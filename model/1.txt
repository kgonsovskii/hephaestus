public string RunExeDesktop(string exe, string serverName, string? arguments = null)
{
    var args = $"{serverName}";
    if (!string.IsNullOrEmpty(arguments))
        args += $" {arguments}";
    var sa = new ProcessStartInfo
    {
        FileName = exe,
        Arguments = args,
        CreateNoWindow = false,
        UseShellExecute = true,
        RedirectStandardOutput = false,
        RedirectStandardError = false
    };
    Process process = new Process { StartInfo = sa };
    process.Start();
    return "OK";
}


    public string RunScriptDesktop(string server, string scriptFile, string logFile, Action<string>? logger,
        int timeoutMinutes,
        params (string Name, object Value)[] parameters)
    {
        try
        {
            File.Delete(logFile);
        }
        catch
        {
        }

        scriptFile = SysScript1(scriptFile);
        var args = string.Join(" ", parameters.Select(p => $"-{p.Name} {p.Value}"));
        var workingDir = ServerDir(server);

        // Get initial PowerShell process IDs
        var initialPids = Process.GetProcessesByName("powershell").Select(p => p.Id).ToList();

        var cmd =
            $"powershell.exe -WindowStyle Normal -ExecutionPolicy Bypass -file \"{scriptFile}\" -serverName \"{server}\" > {logFile}";
        System.IO.File.WriteAllText("C:\\install\\desktop.bat", cmd);
        var launcher = new Process
        {
            StartInfo = new ProcessStartInfo
            {
                FileName = "C:\\install\\desktop.bat",
                UseShellExecute = true,
                CreateNoWindow = false,
                WorkingDirectory = ServerDir(server)
            }
        };
        launcher.Start();

        // Wait until a new PowerShell process appears
        Stopwatch sw = Stopwatch.StartNew();
        Process? targetProcess = null;

        while (sw.Elapsed < TimeSpan.FromMinutes(timeoutMinutes))
        {
            var currentPids = Process.GetProcessesByName("powershell").Select(p => p.Id).ToList();
            var newPids = currentPids.Except(initialPids).ToList();
            if (newPids.Any())
            {
                targetProcess = Process.GetProcessById(newPids.First());
                break;
            }

            Thread.Sleep(1000); // Check every second
        }

        if (targetProcess == null)
            throw new TimeoutException("PowerShell process did not start within the timeout.");

        // Real-time log reading (every 2 seconds)
        var cts = new CancellationTokenSource();
        var logBuilder = new StringBuilder();

        var logThread = new Thread(() =>
        {
            long lastPosition = 0;

            while (!cts.Token.IsCancellationRequested)
            {
                try
                {
                    // Open the log file with the FileShare.ReadWrite option to allow concurrent read/write
                    if (File.Exists(logFile))
                    {
                        using var fs = new FileStream(logFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                        fs.Seek(lastPosition, SeekOrigin.Begin); // Move to the last read position
                        using var reader = new StreamReader(fs);
                        string? line;
                        while ((line = reader.ReadLine()) != null)
                        {
                            logger?.Invoke(line); // Call the logger action to log output in real-time
                            logBuilder.AppendLine(line); // Append line to internal log
                        }

                        lastPosition = fs.Position; // Update the position to the end of the log
                    }
                }
                catch (Exception ex)
                {
                    // Handle any issues with reading the file
                    logger?.Invoke($"Error reading log: {ex.Message}");
                }

                Thread.Sleep(3000); // Sleep for 2 seconds before reading again
            }
        });

        logThread.IsBackground = true;
        logThread.Start();

        // Wait for the new PowerShell process to exit
        if (!targetProcess.WaitForExit(timeoutMinutes * 60 * 1000))
        {
            cts.Cancel();
            logThread.Join();
            try
            {
                targetProcess.Kill();
            }
            catch
            {
            }

            throw new TimeoutException("PowerShell script timed out.");
        }

        // Stop log thread after process exits
        cts.Cancel();
        logThread.Join();

        // Return log contents after the process finishes
        return logBuilder.ToString() + Environment.NewLine + "SYS ACCOMPLISHED";
    }
